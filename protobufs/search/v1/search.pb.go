// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: search.proto

package searchpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyType int32

const (
	CompanyType_CompanyTypeUnknown CompanyType = 0 // 未知（不要使用）
	CompanyType_CompanyTypeCh      CompanyType = 1 // 沪深，A股
	CompanyType_CompanyTypeHK      CompanyType = 2 // 港股
	CompanyType_CompanyTypeUS      CompanyType = 3 // 美股
)

// Enum value maps for CompanyType.
var (
	CompanyType_name = map[int32]string{
		0: "CompanyTypeUnknown",
		1: "CompanyTypeCh",
		2: "CompanyTypeHK",
		3: "CompanyTypeUS",
	}
	CompanyType_value = map[string]int32{
		"CompanyTypeUnknown": 0,
		"CompanyTypeCh":      1,
		"CompanyTypeHK":      2,
		"CompanyTypeUS":      3,
	}
)

func (x CompanyType) Enum() *CompanyType {
	p := new(CompanyType)
	*p = x
	return p
}

func (x CompanyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyType) Descriptor() protoreflect.EnumDescriptor {
	return file_search_proto_enumTypes[0].Descriptor()
}

func (CompanyType) Type() protoreflect.EnumType {
	return &file_search_proto_enumTypes[0]
}

func (x CompanyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyType.Descriptor instead.
func (CompanyType) EnumDescriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{0}
}

type StockType int32

const (
	StockType_StockTypeUnknown                 StockType = 0 // 未知（不要使用）
	StockType_StockTypeInfo                    StockType = 1 // 股票基本信息
	StockType_StockTypeGrossAndNetProfitMargin StockType = 2 // 毛利率与净利率
	StockType_StockTypeRevenue                 StockType = 3 // 营业收入
	StockType_StockTypeNetProfit               StockType = 4 // 净利润
	StockType_StockTypeTotalAssets             StockType = 5 // 总资产
	StockType_StockTypeTotalLiabilities        StockType = 6 // 总负债
	StockType_StockTypeOperatingIncome         StockType = 7 // 经营净额
	StockType_StockTypeInvestmentIncome        StockType = 8 // 投资净额
	StockType_StockTypeFinancingIncome         StockType = 9 // 融资净额
)

// Enum value maps for StockType.
var (
	StockType_name = map[int32]string{
		0: "StockTypeUnknown",
		1: "StockTypeInfo",
		2: "StockTypeGrossAndNetProfitMargin",
		3: "StockTypeRevenue",
		4: "StockTypeNetProfit",
		5: "StockTypeTotalAssets",
		6: "StockTypeTotalLiabilities",
		7: "StockTypeOperatingIncome",
		8: "StockTypeInvestmentIncome",
		9: "StockTypeFinancingIncome",
	}
	StockType_value = map[string]int32{
		"StockTypeUnknown":                 0,
		"StockTypeInfo":                    1,
		"StockTypeGrossAndNetProfitMargin": 2,
		"StockTypeRevenue":                 3,
		"StockTypeNetProfit":               4,
		"StockTypeTotalAssets":             5,
		"StockTypeTotalLiabilities":        6,
		"StockTypeOperatingIncome":         7,
		"StockTypeInvestmentIncome":        8,
		"StockTypeFinancingIncome":         9,
	}
)

func (x StockType) Enum() *StockType {
	p := new(StockType)
	*p = x
	return p
}

func (x StockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockType) Descriptor() protoreflect.EnumDescriptor {
	return file_search_proto_enumTypes[1].Descriptor()
}

func (StockType) Type() protoreflect.EnumType {
	return &file_search_proto_enumTypes[1]
}

func (x StockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockType.Descriptor instead.
func (StockType) EnumDescriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{1}
}

type GetCompanyInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetCompanyInfoReq) Reset() {
	*x = GetCompanyInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyInfoReq) ProtoMessage() {}

func (x *GetCompanyInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyInfoReq.ProtoReflect.Descriptor instead.
func (*GetCompanyInfoReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{0}
}

func (x *GetCompanyInfoReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetCompanyInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // 消息
	Data *CompanyInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 数据
}

func (x *GetCompanyInfoRsp) Reset() {
	*x = GetCompanyInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyInfoRsp) ProtoMessage() {}

func (x *GetCompanyInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCompanyInfoRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{1}
}

func (x *GetCompanyInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetCompanyInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetCompanyInfoRsp) GetData() *CompanyInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        CompanyType    `protobuf:"varint,1,opt,name=type,proto3,enum=chatfinbot.search.v1.CompanyType" json:"type,omitempty"` // 公司类型
	ChData      *CompanyInfoCh `protobuf:"bytes,2,opt,name=ch_data,json=chData,proto3" json:"ch_data,omitempty"`                      // 沪深，A股基本信息
	HkData      *CompanyInfoHK `protobuf:"bytes,3,opt,name=hk_data,json=hkData,proto3" json:"hk_data,omitempty"`                      // 港股基本信息
	CompanyName string         `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`       // 公司名字
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyInfo) GetType() CompanyType {
	if x != nil {
		return x.Type
	}
	return CompanyType_CompanyTypeUnknown
}

func (x *CompanyInfo) GetChData() *CompanyInfoCh {
	if x != nil {
		return x.ChData
	}
	return nil
}

func (x *CompanyInfo) GetHkData() *CompanyInfoHK {
	if x != nil {
		return x.HkData
	}
	return nil
}

func (x *CompanyInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

// 公司基本信息
type CompanyInfoCh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompName      string `protobuf:"bytes,1,opt,name=comp_name,json=compName,proto3" json:"comp_name,omitempty"`                 // 公司中文名称 COMPNAME
	CompNameEng   string `protobuf:"bytes,2,opt,name=comp_name_eng,json=compNameEng,proto3" json:"comp_name_eng,omitempty"`      // 公司中文名称 COMPNAMEENG
	Gics          string `protobuf:"bytes,3,opt,name=gics,proto3" json:"gics,omitempty"`                                         // 所属行业 GICS
	RegCapital    string `protobuf:"bytes,4,opt,name=reg_capital,json=regCapital,proto3" json:"reg_capital,omitempty"`           // 注册资本 REGCAPITAL
	RegAddress    string `protobuf:"bytes,5,opt,name=reg_address,json=regAddress,proto3" json:"reg_address,omitempty"`           // 注册地址 REGADDRESS
	FoundDate     string `protobuf:"bytes,6,opt,name=found_date,json=foundDate,proto3" json:"found_date,omitempty"`              // 成立时间 FOUNDDATE
	ListDate      string `protobuf:"bytes,7,opt,name=list_date,json=listDate,proto3" json:"list_date,omitempty"`                 // 上市时间 LISTDATE
	Legrepresent  string `protobuf:"bytes,8,opt,name=legrepresent,proto3" json:"legrepresent,omitempty"`                         // 法定代表人 LEGREPRESENT
	Code          string `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`                                         // 股票代码 CODE
	AholderType   string `protobuf:"bytes,10,opt,name=aholder_type,json=aholderType,proto3" json:"aholder_type,omitempty"`       // 实控人 AHOLDERTYPE
	HoldName      string `protobuf:"bytes,11,opt,name=hold_name,json=holdName,proto3" json:"hold_name,omitempty"`                // 第一股东 HOLDNAME
	Website       string `protobuf:"bytes,12,opt,name=website,proto3" json:"website,omitempty"`                                  // 公司官网 WEBSITE
	OfficeAddress string `protobuf:"bytes,13,opt,name=office_address,json=officeAddress,proto3" json:"office_address,omitempty"` // 办公地址 OFFICEADDRESS
	Phone         string `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`                                      // 电话 PHONE
	Email         string `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`                                      // 电子邮箱 EMAIL
	ComProfile    string `protobuf:"bytes,16,opt,name=com_profile,json=comProfile,proto3" json:"com_profile,omitempty"`          // 公司介绍 COMPROFILE
}

func (x *CompanyInfoCh) Reset() {
	*x = CompanyInfoCh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfoCh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfoCh) ProtoMessage() {}

func (x *CompanyInfoCh) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfoCh.ProtoReflect.Descriptor instead.
func (*CompanyInfoCh) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyInfoCh) GetCompName() string {
	if x != nil {
		return x.CompName
	}
	return ""
}

func (x *CompanyInfoCh) GetCompNameEng() string {
	if x != nil {
		return x.CompNameEng
	}
	return ""
}

func (x *CompanyInfoCh) GetGics() string {
	if x != nil {
		return x.Gics
	}
	return ""
}

func (x *CompanyInfoCh) GetRegCapital() string {
	if x != nil {
		return x.RegCapital
	}
	return ""
}

func (x *CompanyInfoCh) GetRegAddress() string {
	if x != nil {
		return x.RegAddress
	}
	return ""
}

func (x *CompanyInfoCh) GetFoundDate() string {
	if x != nil {
		return x.FoundDate
	}
	return ""
}

func (x *CompanyInfoCh) GetListDate() string {
	if x != nil {
		return x.ListDate
	}
	return ""
}

func (x *CompanyInfoCh) GetLegrepresent() string {
	if x != nil {
		return x.Legrepresent
	}
	return ""
}

func (x *CompanyInfoCh) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CompanyInfoCh) GetAholderType() string {
	if x != nil {
		return x.AholderType
	}
	return ""
}

func (x *CompanyInfoCh) GetHoldName() string {
	if x != nil {
		return x.HoldName
	}
	return ""
}

func (x *CompanyInfoCh) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *CompanyInfoCh) GetOfficeAddress() string {
	if x != nil {
		return x.OfficeAddress
	}
	return ""
}

func (x *CompanyInfoCh) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CompanyInfoCh) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CompanyInfoCh) GetComProfile() string {
	if x != nil {
		return x.ComProfile
	}
	return ""
}

// 港股公司基本信息
type CompanyInfoHK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompanyInfoHK) Reset() {
	*x = CompanyInfoHK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfoHK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfoHK) ProtoMessage() {}

func (x *CompanyInfoHK) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfoHK.ProtoReflect.Descriptor instead.
func (*CompanyInfoHK) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{4}
}

type GetIndicatorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetIndicatorsReq) Reset() {
	*x = GetIndicatorsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndicatorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndicatorsReq) ProtoMessage() {}

func (x *GetIndicatorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndicatorsReq.ProtoReflect.Descriptor instead.
func (*GetIndicatorsReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{5}
}

func (x *GetIndicatorsReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetIndicatorsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32           `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *IndicatorsInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetIndicatorsRsp) Reset() {
	*x = GetIndicatorsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndicatorsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndicatorsRsp) ProtoMessage() {}

func (x *GetIndicatorsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndicatorsRsp.ProtoReflect.Descriptor instead.
func (*GetIndicatorsRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{6}
}

func (x *GetIndicatorsRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetIndicatorsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetIndicatorsRsp) GetData() *IndicatorsInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type IndicatorsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List        []*CommonListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string            `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
	Date        string            `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`                                  // 更新时间
}

func (x *IndicatorsInfo) Reset() {
	*x = IndicatorsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorsInfo) ProtoMessage() {}

func (x *IndicatorsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorsInfo.ProtoReflect.Descriptor instead.
func (*IndicatorsInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{7}
}

func (x *IndicatorsInfo) GetList() []*CommonListData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *IndicatorsInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *IndicatorsInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type CommonListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CnName string `protobuf:"bytes,1,opt,name=cn_name,json=cnName,proto3" json:"cn_name,omitempty"` // 字段中文名
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // 字段名
	Unit   uint32 `protobuf:"varint,3,opt,name=unit,proto3" json:"unit,omitempty"`                  // 单位
	Val    string `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`                     // 值
	Sign   uint32 `protobuf:"varint,5,opt,name=sign,proto3" json:"sign,omitempty"`                  // 标记 0=无变化  1=标蓝
}

func (x *CommonListData) Reset() {
	*x = CommonListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListData) ProtoMessage() {}

func (x *CommonListData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListData.ProtoReflect.Descriptor instead.
func (*CommonListData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{8}
}

func (x *CommonListData) GetCnName() string {
	if x != nil {
		return x.CnName
	}
	return ""
}

func (x *CommonListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommonListData) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *CommonListData) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *CommonListData) GetSign() uint32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

// 行情指标
type IndicatorsCh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Close            string `protobuf:"bytes,1,opt,name=close,proto3" json:"close,omitempty"`                                                  // 最新收盘价 Close
	DifferRange      string `protobuf:"bytes,2,opt,name=differ_range,json=differRange,proto3" json:"differ_range,omitempty"`                   // 涨跌幅 DifferRange
	Amount           string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                                // 成交额 Amount
	Volume           string `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`                                                // 成交量 Volume
	Mvbycsrc         string `protobuf:"bytes,5,opt,name=mvbycsrc,proto3" json:"mvbycsrc,omitempty"`                                            /// 总市值 MVBYCSRC
	TotalShare       string `protobuf:"bytes,6,opt,name=total_share,json=totalShare,proto3" json:"total_share,omitempty"`                      // 总股本 TOTALSHARE
	LiqShare         string `protobuf:"bytes,7,opt,name=liq_share,json=liqShare,proto3" json:"liq_share,omitempty"`                            // 流通股本 LIQSHARE
	ListedMvbycsrc   string `protobuf:"bytes,8,opt,name=listed_mvbycsrc,json=listedMvbycsrc,proto3" json:"listed_mvbycsrc,omitempty"`          // 上市市值
	DifferRangey     string `protobuf:"bytes,9,opt,name=differ_rangey,json=differRangey,proto3" json:"differ_rangey,omitempty"`                // 年内涨跌幅 DifferRangeY
	Pettm            string `protobuf:"bytes,10,opt,name=pettm,proto3" json:"pettm,omitempty"`                                                 // PE (TTM) PETTM
	Epsttm           string `protobuf:"bytes,11,opt,name=epsttm,proto3" json:"epsttm,omitempty"`                                               // EPS (TTM) EPSTTM
	Psttm            string `protobuf:"bytes,12,opt,name=psttm,proto3" json:"psttm,omitempty"`                                                 // PS (TTM) PSTTM
	Pbmrqn           string `protobuf:"bytes,13,opt,name=pbmrqn,proto3" json:"pbmrqn,omitempty"`                                               // PB (MRQ) PBMRQN
	DividendYieldNew string `protobuf:"bytes,14,opt,name=dividend_yield_new,json=dividendYieldNew,proto3" json:"dividend_yield_new,omitempty"` // 股息率 DIVIDENDYIELDNEW
	DividendRate     string `protobuf:"bytes,15,opt,name=dividend_rate,json=dividendRate,proto3" json:"dividend_rate,omitempty"`               // 分红率
}

func (x *IndicatorsCh) Reset() {
	*x = IndicatorsCh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorsCh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorsCh) ProtoMessage() {}

func (x *IndicatorsCh) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorsCh.ProtoReflect.Descriptor instead.
func (*IndicatorsCh) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{9}
}

func (x *IndicatorsCh) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

func (x *IndicatorsCh) GetDifferRange() string {
	if x != nil {
		return x.DifferRange
	}
	return ""
}

func (x *IndicatorsCh) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *IndicatorsCh) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *IndicatorsCh) GetMvbycsrc() string {
	if x != nil {
		return x.Mvbycsrc
	}
	return ""
}

func (x *IndicatorsCh) GetTotalShare() string {
	if x != nil {
		return x.TotalShare
	}
	return ""
}

func (x *IndicatorsCh) GetLiqShare() string {
	if x != nil {
		return x.LiqShare
	}
	return ""
}

func (x *IndicatorsCh) GetListedMvbycsrc() string {
	if x != nil {
		return x.ListedMvbycsrc
	}
	return ""
}

func (x *IndicatorsCh) GetDifferRangey() string {
	if x != nil {
		return x.DifferRangey
	}
	return ""
}

func (x *IndicatorsCh) GetPettm() string {
	if x != nil {
		return x.Pettm
	}
	return ""
}

func (x *IndicatorsCh) GetEpsttm() string {
	if x != nil {
		return x.Epsttm
	}
	return ""
}

func (x *IndicatorsCh) GetPsttm() string {
	if x != nil {
		return x.Psttm
	}
	return ""
}

func (x *IndicatorsCh) GetPbmrqn() string {
	if x != nil {
		return x.Pbmrqn
	}
	return ""
}

func (x *IndicatorsCh) GetDividendYieldNew() string {
	if x != nil {
		return x.DividendYieldNew
	}
	return ""
}

func (x *IndicatorsCh) GetDividendRate() string {
	if x != nil {
		return x.DividendRate
	}
	return ""
}

type GetShareholdersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetShareholdersReq) Reset() {
	*x = GetShareholdersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersReq) ProtoMessage() {}

func (x *GetShareholdersReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersReq.ProtoReflect.Descriptor instead.
func (*GetShareholdersReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{10}
}

func (x *GetShareholdersReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetShareholdersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32             `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *ShareholdersInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetShareholdersRsp) Reset() {
	*x = GetShareholdersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersRsp) ProtoMessage() {}

func (x *GetShareholdersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersRsp.ProtoReflect.Descriptor instead.
func (*GetShareholdersRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{11}
}

func (x *GetShareholdersRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetShareholdersRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetShareholdersRsp) GetData() *ShareholdersInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ShareholdersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetShareholdersChart `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetShareholdersInfo  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 股东数据
	CompanyName string                  `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *ShareholdersInfo) Reset() {
	*x = ShareholdersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareholdersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareholdersInfo) ProtoMessage() {}

func (x *ShareholdersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareholdersInfo.ProtoReflect.Descriptor instead.
func (*ShareholdersInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{12}
}

func (x *ShareholdersInfo) GetCharts() []*GetShareholdersChart {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *ShareholdersInfo) GetList() []*GetShareholdersInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ShareholdersInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetShareholdersChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // id
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetShareholdersChart) Reset() {
	*x = GetShareholdersChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersChart) ProtoMessage() {}

func (x *GetShareholdersChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersChart.ProtoReflect.Descriptor instead.
func (*GetShareholdersChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{13}
}

func (x *GetShareholdersChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetShareholdersChart) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetShareholdersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldName      string  `protobuf:"bytes,1,opt,name=hold_name,json=holdName,proto3" json:"hold_name,omitempty"`                    // 股东名称 HOLDNAME
	HoldAmt       string  `protobuf:"bytes,2,opt,name=hold_amt,json=holdAmt,proto3" json:"hold_amt,omitempty"`                       // 持股数量 HOLDAMT
	HoldAmtUnit   uint32  `protobuf:"varint,3,opt,name=hold_amt_unit,json=holdAmtUnit,proto3" json:"hold_amt_unit,omitempty"`        // 持股数量单位  0=不设置 1=万 2=亿
	HoldPct       string  `protobuf:"bytes,4,opt,name=hold_pct,json=holdPct,proto3" json:"hold_pct,omitempty"`                       // 持股比例 HOLDPCT
	Reference     uint64  `protobuf:"varint,5,opt,name=reference,proto3" json:"reference,omitempty"`                                 // 期末参考值
	HoldChange    string  `protobuf:"bytes,6,opt,name=hold_change,json=holdChange,proto3" json:"hold_change,omitempty"`              // 较上期持股变动数 HOLDCHANGE
	ChangeType    uint32  `protobuf:"varint,7,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`             // 1= 新增 2=减少 3=不变
	Direction     string  `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`                                  // 变动方向 DIRECTION
	HoldChangePct float64 `protobuf:"fixed64,9,opt,name=hold_change_pct,json=holdChangePct,proto3" json:"hold_change_pct,omitempty"` // 持股比例变动
}

func (x *GetShareholdersInfo) Reset() {
	*x = GetShareholdersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersInfo) ProtoMessage() {}

func (x *GetShareholdersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersInfo.ProtoReflect.Descriptor instead.
func (*GetShareholdersInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{14}
}

func (x *GetShareholdersInfo) GetHoldName() string {
	if x != nil {
		return x.HoldName
	}
	return ""
}

func (x *GetShareholdersInfo) GetHoldAmt() string {
	if x != nil {
		return x.HoldAmt
	}
	return ""
}

func (x *GetShareholdersInfo) GetHoldAmtUnit() uint32 {
	if x != nil {
		return x.HoldAmtUnit
	}
	return 0
}

func (x *GetShareholdersInfo) GetHoldPct() string {
	if x != nil {
		return x.HoldPct
	}
	return ""
}

func (x *GetShareholdersInfo) GetReference() uint64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *GetShareholdersInfo) GetHoldChange() string {
	if x != nil {
		return x.HoldChange
	}
	return ""
}

func (x *GetShareholdersInfo) GetChangeType() uint32 {
	if x != nil {
		return x.ChangeType
	}
	return 0
}

func (x *GetShareholdersInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetShareholdersInfo) GetHoldChangePct() float64 {
	if x != nil {
		return x.HoldChangePct
	}
	return 0
}

type GetExecutivesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetExecutivesReq) Reset() {
	*x = GetExecutivesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutivesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutivesReq) ProtoMessage() {}

func (x *GetExecutivesReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutivesReq.ProtoReflect.Descriptor instead.
func (*GetExecutivesReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{15}
}

func (x *GetExecutivesReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetExecutivesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32           `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *ExecutivesInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetExecutivesRsp) Reset() {
	*x = GetExecutivesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutivesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutivesRsp) ProtoMessage() {}

func (x *GetExecutivesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutivesRsp.ProtoReflect.Descriptor instead.
func (*GetExecutivesRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{16}
}

func (x *GetExecutivesRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetExecutivesRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetExecutivesRsp) GetData() *ExecutivesInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExecutivesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List        []*ExecutivesData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                                  // 高层信息
	CompanyName string            `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *ExecutivesInfo) Reset() {
	*x = ExecutivesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutivesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutivesInfo) ProtoMessage() {}

func (x *ExecutivesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutivesInfo.ProtoReflect.Descriptor instead.
func (*ExecutivesInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{17}
}

func (x *ExecutivesInfo) GetList() []*ExecutivesData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ExecutivesInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

// 高层信息
type ExecutivesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // 名字
	Position    string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`                             // 职务
	Age         uint32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`                                      // 年龄
	Gender      uint32 `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`                                // 性别 1=男 2=女
	Edu         string `protobuf:"bytes,5,opt,name=edu,proto3" json:"edu,omitempty"`                                       // 学历
	Pmt         string `protobuf:"bytes,6,opt,name=pmt,proto3" json:"pmt,omitempty"`                                       // 酬薪 留空则表示未知
	PmtUnit     uint32 `protobuf:"varint,7,opt,name=pmt_unit,json=pmtUnit,proto3" json:"pmt_unit,omitempty"`               // 酬薪单位 0=不设置 1=万 2=亿
	HoldAmt     string `protobuf:"bytes,8,opt,name=hold_amt,json=holdAmt,proto3" json:"hold_amt,omitempty"`                // 持股数量  留空则表示未知
	HoldAmtUnit uint32 `protobuf:"varint,9,opt,name=hold_amt_unit,json=holdAmtUnit,proto3" json:"hold_amt_unit,omitempty"` // 持股数量单位  0=不设置 1=万 2=亿
	HoldPct     string `protobuf:"bytes,10,opt,name=hold_pct,json=holdPct,proto3" json:"hold_pct,omitempty"`               // 持股比例
	Resume      string `protobuf:"bytes,11,opt,name=resume,proto3" json:"resume,omitempty"`                                // 个人简历
}

func (x *ExecutivesData) Reset() {
	*x = ExecutivesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutivesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutivesData) ProtoMessage() {}

func (x *ExecutivesData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutivesData.ProtoReflect.Descriptor instead.
func (*ExecutivesData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{18}
}

func (x *ExecutivesData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutivesData) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *ExecutivesData) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ExecutivesData) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ExecutivesData) GetEdu() string {
	if x != nil {
		return x.Edu
	}
	return ""
}

func (x *ExecutivesData) GetPmt() string {
	if x != nil {
		return x.Pmt
	}
	return ""
}

func (x *ExecutivesData) GetPmtUnit() uint32 {
	if x != nil {
		return x.PmtUnit
	}
	return 0
}

func (x *ExecutivesData) GetHoldAmt() string {
	if x != nil {
		return x.HoldAmt
	}
	return ""
}

func (x *ExecutivesData) GetHoldAmtUnit() uint32 {
	if x != nil {
		return x.HoldAmtUnit
	}
	return 0
}

func (x *ExecutivesData) GetHoldPct() string {
	if x != nil {
		return x.HoldPct
	}
	return ""
}

func (x *ExecutivesData) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type GetStaffInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"` // 3=近三年 5=近五年 10=近十年  999=上市以来
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`    // 公司code 例如00030.SZ
}

func (x *GetStaffInfoReq) Reset() {
	*x = GetStaffInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoReq) ProtoMessage() {}

func (x *GetStaffInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoReq.ProtoReflect.Descriptor instead.
func (*GetStaffInfoReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{19}
}

func (x *GetStaffInfoReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetStaffInfoReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetStaffInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32      `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *StaffInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetStaffInfoRsp) Reset() {
	*x = GetStaffInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoRsp) ProtoMessage() {}

func (x *GetStaffInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoRsp.ProtoReflect.Descriptor instead.
func (*GetStaffInfoRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{20}
}

func (x *GetStaffInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetStaffInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStaffInfoRsp) GetData() *StaffInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type StaffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobCharts   []*GetStaffInfoChartList `protobuf:"bytes,1,rep,name=job_charts,json=jobCharts,proto3" json:"job_charts,omitempty"`       // 饼状图
	EduCharts   []*GetStaffInfoChartList `protobuf:"bytes,2,rep,name=edu_charts,json=eduCharts,proto3" json:"edu_charts,omitempty"`       // 饼状图
	JobList     []*GetStaffInfoData      `protobuf:"bytes,3,rep,name=job_list,json=jobList,proto3" json:"job_list,omitempty"`             // 专业构成
	EduList     []*GetStaffInfoData      `protobuf:"bytes,4,rep,name=edu_list,json=eduList,proto3" json:"edu_list,omitempty"`             // 学历构成
	CompanyName string                   `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *StaffInfo) Reset() {
	*x = StaffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffInfo) ProtoMessage() {}

func (x *StaffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffInfo.ProtoReflect.Descriptor instead.
func (*StaffInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{21}
}

func (x *StaffInfo) GetJobCharts() []*GetStaffInfoChartList {
	if x != nil {
		return x.JobCharts
	}
	return nil
}

func (x *StaffInfo) GetEduCharts() []*GetStaffInfoChartList {
	if x != nil {
		return x.EduCharts
	}
	return nil
}

func (x *StaffInfo) GetJobList() []*GetStaffInfoData {
	if x != nil {
		return x.JobList
	}
	return nil
}

func (x *StaffInfo) GetEduList() []*GetStaffInfoData {
	if x != nil {
		return x.EduList
	}
	return nil
}

func (x *StaffInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetStaffInfoChartList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year uint32               `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"` // 年份
	List []*GetStaffInfoChart `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`  // 列表
}

func (x *GetStaffInfoChartList) Reset() {
	*x = GetStaffInfoChartList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoChartList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoChartList) ProtoMessage() {}

func (x *GetStaffInfoChartList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoChartList.ProtoReflect.Descriptor instead.
func (*GetStaffInfoChartList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{22}
}

func (x *GetStaffInfoChartList) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetStaffInfoChartList) GetList() []*GetStaffInfoChart {
	if x != nil {
		return x.List
	}
	return nil
}

type GetStaffInfoChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`        // id
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetStaffInfoChart) Reset() {
	*x = GetStaffInfoChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoChart) ProtoMessage() {}

func (x *GetStaffInfoChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoChart.ProtoReflect.Descriptor instead.
func (*GetStaffInfoChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{23}
}

func (x *GetStaffInfoChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetStaffInfoChart) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetStaffInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year uint32            `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"` // 年份
	List []*CommonListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetStaffInfoData) Reset() {
	*x = GetStaffInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoData) ProtoMessage() {}

func (x *GetStaffInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoData.ProtoReflect.Descriptor instead.
func (*GetStaffInfoData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{24}
}

func (x *GetStaffInfoData) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetStaffInfoData) GetList() []*CommonListData {
	if x != nil {
		return x.List
	}
	return nil
}

type StaffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeNum   string `protobuf:"bytes,1,opt,name=employee_num,json=employeeNum,proto3" json:"employee_num,omitempty"`       // 职工总数 EMPLOYEENUM
	ProducerNum   string `protobuf:"bytes,2,opt,name=producer_num,json=producerNum,proto3" json:"producer_num,omitempty"`       // 生产人员 PRODUCERNUM
	SalesmanNum   string `protobuf:"bytes,3,opt,name=salesman_num,json=salesmanNum,proto3" json:"salesman_num,omitempty"`       // 销售人员 SALESMANNUM
	FinancialNum  string `protobuf:"bytes,4,opt,name=financial_num,json=financialNum,proto3" json:"financial_num,omitempty"`    // 财务人员 FINANCIALNUM
	TechnicianNum string `protobuf:"bytes,5,opt,name=technician_num,json=technicianNum,proto3" json:"technician_num,omitempty"` // 技术人员 TECHNICIANNUM
	RanddNum      string `protobuf:"bytes,6,opt,name=randd_num,json=randdNum,proto3" json:"randd_num,omitempty"`                // 研发人员 RANDDNUM
	AdministraNum string `protobuf:"bytes,7,opt,name=administra_num,json=administraNum,proto3" json:"administra_num,omitempty"` // 行政管理人员 ADMINISTRANUM
	RetireNum     string `protobuf:"bytes,8,opt,name=retire_num,json=retireNum,proto3" json:"retire_num,omitempty"`             // 退休人员
	OtherNum      string `protobuf:"bytes,9,opt,name=other_num,json=otherNum,proto3" json:"other_num,omitempty"`                // 其他人员
	Edu_1         string `protobuf:"bytes,10,opt,name=edu_1,json=edu1,proto3" json:"edu_1,omitempty"`                           //  博士 level_1
	Edu_2         string `protobuf:"bytes,11,opt,name=edu_2,json=edu2,proto3" json:"edu_2,omitempty"`                           // 硕士 level_2
	Edu_3         string `protobuf:"bytes,12,opt,name=edu_3,json=edu3,proto3" json:"edu_3,omitempty"`                           // 本科  level_3
	Edu_4         string `protobuf:"bytes,13,opt,name=edu_4,json=edu4,proto3" json:"edu_4,omitempty"`                           // 大专 level_4
	Edu_5         string `protobuf:"bytes,14,opt,name=edu_5,json=edu5,proto3" json:"edu_5,omitempty"`                           // 大专以下 level_5
}

func (x *StaffData) Reset() {
	*x = StaffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffData) ProtoMessage() {}

func (x *StaffData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffData.ProtoReflect.Descriptor instead.
func (*StaffData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{25}
}

func (x *StaffData) GetEmployeeNum() string {
	if x != nil {
		return x.EmployeeNum
	}
	return ""
}

func (x *StaffData) GetProducerNum() string {
	if x != nil {
		return x.ProducerNum
	}
	return ""
}

func (x *StaffData) GetSalesmanNum() string {
	if x != nil {
		return x.SalesmanNum
	}
	return ""
}

func (x *StaffData) GetFinancialNum() string {
	if x != nil {
		return x.FinancialNum
	}
	return ""
}

func (x *StaffData) GetTechnicianNum() string {
	if x != nil {
		return x.TechnicianNum
	}
	return ""
}

func (x *StaffData) GetRanddNum() string {
	if x != nil {
		return x.RanddNum
	}
	return ""
}

func (x *StaffData) GetAdministraNum() string {
	if x != nil {
		return x.AdministraNum
	}
	return ""
}

func (x *StaffData) GetRetireNum() string {
	if x != nil {
		return x.RetireNum
	}
	return ""
}

func (x *StaffData) GetOtherNum() string {
	if x != nil {
		return x.OtherNum
	}
	return ""
}

func (x *StaffData) GetEdu_1() string {
	if x != nil {
		return x.Edu_1
	}
	return ""
}

func (x *StaffData) GetEdu_2() string {
	if x != nil {
		return x.Edu_2
	}
	return ""
}

func (x *StaffData) GetEdu_3() string {
	if x != nil {
		return x.Edu_3
	}
	return ""
}

func (x *StaffData) GetEdu_4() string {
	if x != nil {
		return x.Edu_4
	}
	return ""
}

func (x *StaffData) GetEdu_5() string {
	if x != nil {
		return x.Edu_5
	}
	return ""
}

type GetMBRevenueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype  uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"`   // 3=近三年 5=近五年 10=近十年  999=上市以来
	Mbtype uint32 `protobuf:"varint,2,opt,name=mbtype,proto3" json:"mbtype,omitempty"` // 类型 1=行业 2=产品 3=地区
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`      // 公司code 例如00030.SZ
	Unit   uint32 `protobuf:"varint,4,opt,name=unit,proto3" json:"unit,omitempty"`     // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetMBRevenueReq) Reset() {
	*x = GetMBRevenueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueReq) ProtoMessage() {}

func (x *GetMBRevenueReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueReq.ProtoReflect.Descriptor instead.
func (*GetMBRevenueReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{26}
}

func (x *GetMBRevenueReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetMBRevenueReq) GetMbtype() uint32 {
	if x != nil {
		return x.Mbtype
	}
	return 0
}

func (x *GetMBRevenueReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetMBRevenueReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetMBRevenueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *MBRevenueInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMBRevenueRsp) Reset() {
	*x = GetMBRevenueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueRsp) ProtoMessage() {}

func (x *GetMBRevenueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueRsp.ProtoReflect.Descriptor instead.
func (*GetMBRevenueRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{27}
}

func (x *GetMBRevenueRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetMBRevenueRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetMBRevenueRsp) GetData() *MBRevenueInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MBRevenueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetMBRevenueCharts `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetMBRevenueList   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string                `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *MBRevenueInfo) Reset() {
	*x = MBRevenueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBRevenueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBRevenueInfo) ProtoMessage() {}

func (x *MBRevenueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBRevenueInfo.ProtoReflect.Descriptor instead.
func (*MBRevenueInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{28}
}

func (x *MBRevenueInfo) GetCharts() []*GetMBRevenueCharts {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *MBRevenueInfo) GetList() []*GetMBRevenueList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MBRevenueInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetMBRevenueCharts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year    string  `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`         // 年份
	Service string  `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`   // 业务
	Revenue float64 `protobuf:"fixed64,3,opt,name=revenue,proto3" json:"revenue,omitempty"` // 营收
}

func (x *GetMBRevenueCharts) Reset() {
	*x = GetMBRevenueCharts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueCharts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueCharts) ProtoMessage() {}

func (x *GetMBRevenueCharts) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueCharts.ProtoReflect.Descriptor instead.
func (*GetMBRevenueCharts) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{29}
}

func (x *GetMBRevenueCharts) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *GetMBRevenueCharts) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetMBRevenueCharts) GetRevenue() float64 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

type GetMBRevenueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       uint32              `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`                              // 年
	ColumnList []*GetMBRevenueData `protobuf:"bytes,2,rep,name=column_list,json=columnList,proto3" json:"column_list,omitempty"` // 栏目
}

func (x *GetMBRevenueList) Reset() {
	*x = GetMBRevenueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueList) ProtoMessage() {}

func (x *GetMBRevenueList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueList.ProtoReflect.Descriptor instead.
func (*GetMBRevenueList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{30}
}

func (x *GetMBRevenueList) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetMBRevenueList) GetColumnList() []*GetMBRevenueData {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

type GetMBRevenueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // 栏目名
	ItemList []*CommonListData `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"` // 明细
}

func (x *GetMBRevenueData) Reset() {
	*x = GetMBRevenueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueData) ProtoMessage() {}

func (x *GetMBRevenueData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueData.ProtoReflect.Descriptor instead.
func (*GetMBRevenueData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{31}
}

func (x *GetMBRevenueData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMBRevenueData) GetItemList() []*CommonListData {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type GetFinancialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"` // 3=近三年 5=近五年 10=近十年  999=上市以来
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`    // 公司code 例如00030.SZ
	Unit  uint32 `protobuf:"varint,3,opt,name=unit,proto3" json:"unit,omitempty"`   // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetFinancialReq) Reset() {
	*x = GetFinancialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialReq) ProtoMessage() {}

func (x *GetFinancialReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialReq.ProtoReflect.Descriptor instead.
func (*GetFinancialReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{32}
}

func (x *GetFinancialReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetFinancialReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetFinancialReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetFinancialRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *FinancialInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFinancialRsp) Reset() {
	*x = GetFinancialRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialRsp) ProtoMessage() {}

func (x *GetFinancialRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialRsp.ProtoReflect.Descriptor instead.
func (*GetFinancialRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{33}
}

func (x *GetFinancialRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetFinancialRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetFinancialRsp) GetData() *FinancialInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type FinancialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetFinancialChartsList `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetFinancialList       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string                    `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *FinancialInfo) Reset() {
	*x = FinancialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialInfo) ProtoMessage() {}

func (x *FinancialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialInfo.ProtoReflect.Descriptor instead.
func (*FinancialInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{34}
}

func (x *FinancialInfo) GetCharts() []*GetFinancialChartsList {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *FinancialInfo) GetList() []*GetFinancialList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FinancialInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetFinancialChartsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 名称
	List []*GetFinancialChart `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` // 柱状图列表
}

func (x *GetFinancialChartsList) Reset() {
	*x = GetFinancialChartsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialChartsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialChartsList) ProtoMessage() {}

func (x *GetFinancialChartsList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialChartsList.ProtoReflect.Descriptor instead.
func (*GetFinancialChartsList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{35}
}

func (x *GetFinancialChartsList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetFinancialChartsList) GetList() []*GetFinancialChart {
	if x != nil {
		return x.List
	}
	return nil
}

type GetFinancialChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // id
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetFinancialChart) Reset() {
	*x = GetFinancialChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialChart) ProtoMessage() {}

func (x *GetFinancialChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialChart.ProtoReflect.Descriptor instead.
func (*GetFinancialChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{36}
}

func (x *GetFinancialChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFinancialChart) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetFinancialList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       string              `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`                               // 年
	ColumnList []*GetMBRevenueData `protobuf:"bytes,2,rep,name=column_list,json=columnList,proto3" json:"column_list,omitempty"` // 栏目
}

func (x *GetFinancialList) Reset() {
	*x = GetFinancialList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialList) ProtoMessage() {}

func (x *GetFinancialList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialList.ProtoReflect.Descriptor instead.
func (*GetFinancialList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{37}
}

func (x *GetFinancialList) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *GetFinancialList) GetColumnList() []*GetMBRevenueData {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

type GetFinancialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // 栏目名
	ItemList []*CommonListData `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"` // 明细
}

func (x *GetFinancialData) Reset() {
	*x = GetFinancialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialData) ProtoMessage() {}

func (x *GetFinancialData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialData.ProtoReflect.Descriptor instead.
func (*GetFinancialData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{38}
}

func (x *GetFinancialData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetFinancialData) GetItemList() []*CommonListData {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type Financial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial) Reset() {
	*x = Financial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial) ProtoMessage() {}

func (x *Financial) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial.ProtoReflect.Descriptor instead.
func (*Financial) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{39}
}

type SearchCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // 关键字
}

func (x *SearchCompanyReq) Reset() {
	*x = SearchCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCompanyReq) ProtoMessage() {}

func (x *SearchCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCompanyReq.ProtoReflect.Descriptor instead.
func (*SearchCompanyReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{40}
}

func (x *SearchCompanyReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchCompanyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	List []*CompanyData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchCompanyRsp) Reset() {
	*x = SearchCompanyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCompanyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCompanyRsp) ProtoMessage() {}

func (x *SearchCompanyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCompanyRsp.ProtoReflect.Descriptor instead.
func (*SearchCompanyRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{41}
}

func (x *SearchCompanyRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SearchCompanyRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SearchCompanyRsp) GetList() []*CompanyData {
	if x != nil {
		return x.List
	}
	return nil
}

type CompanyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CompanyName        string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	EnglishName        string `protobuf:"bytes,3,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	Abbreviation       string `protobuf:"bytes,4,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	Symbol             string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PinyinAbbreviation string `protobuf:"bytes,6,opt,name=pinyin_abbreviation,json=pinyinAbbreviation,proto3" json:"pinyin_abbreviation,omitempty"`
}

func (x *CompanyData) Reset() {
	*x = CompanyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyData) ProtoMessage() {}

func (x *CompanyData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyData.ProtoReflect.Descriptor instead.
func (*CompanyData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{42}
}

func (x *CompanyData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CompanyData) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyData) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *CompanyData) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *CompanyData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CompanyData) GetPinyinAbbreviation() string {
	if x != nil {
		return x.PinyinAbbreviation
	}
	return ""
}

type SearchPublicReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CompanyName    string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	ReportType     string `protobuf:"bytes,3,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	Past           int32  `protobuf:"varint,4,opt,name=past,proto3" json:"past,omitempty"`
	Since          string `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`
	Till           string `protobuf:"bytes,6,opt,name=till,proto3" json:"till,omitempty"`
	Size           int32  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	ReturnFulltext bool   `protobuf:"varint,8,opt,name=return_fulltext,json=returnFulltext,proto3" json:"return_fulltext,omitempty"`
	Year           int32  `protobuf:"varint,9,opt,name=year,proto3" json:"year,omitempty"`
	FileName       string `protobuf:"bytes,10,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *SearchPublicReportReq) Reset() {
	*x = SearchPublicReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPublicReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPublicReportReq) ProtoMessage() {}

func (x *SearchPublicReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPublicReportReq.ProtoReflect.Descriptor instead.
func (*SearchPublicReportReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{43}
}

func (x *SearchPublicReportReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SearchPublicReportReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *SearchPublicReportReq) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *SearchPublicReportReq) GetPast() int32 {
	if x != nil {
		return x.Past
	}
	return 0
}

func (x *SearchPublicReportReq) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *SearchPublicReportReq) GetTill() string {
	if x != nil {
		return x.Till
	}
	return ""
}

func (x *SearchPublicReportReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchPublicReportReq) GetReturnFulltext() bool {
	if x != nil {
		return x.ReturnFulltext
	}
	return false
}

func (x *SearchPublicReportReq) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *SearchPublicReportReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type SearchPublicReportRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32           `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	List []*PublicReport `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchPublicReportRsp) Reset() {
	*x = SearchPublicReportRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPublicReportRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPublicReportRsp) ProtoMessage() {}

func (x *SearchPublicReportRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPublicReportRsp.ProtoReflect.Descriptor instead.
func (*SearchPublicReportRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{44}
}

func (x *SearchPublicReportRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SearchPublicReportRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SearchPublicReportRsp) GetList() []*PublicReport {
	if x != nil {
		return x.List
	}
	return nil
}

type PublicReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Abbreviation string `protobuf:"bytes,2,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	FileName     string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileType     string `protobuf:"bytes,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	S3Path       string `protobuf:"bytes,5,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	FileHash     string `protobuf:"bytes,6,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Description  string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ReportType   string `protobuf:"bytes,8,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	ReleaseDate  string `protobuf:"bytes,9,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Year         int32  `protobuf:"varint,10,opt,name=year,proto3" json:"year,omitempty"`
	Quarter      int32  `protobuf:"varint,11,opt,name=quarter,proto3" json:"quarter,omitempty"`
	CompanyCode  string `protobuf:"bytes,12,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`
	CompanyName  string `protobuf:"bytes,13,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	FilePath     string `protobuf:"bytes,14,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	UpdateDate   string `protobuf:"bytes,15,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	TotalPages   int32  `protobuf:"varint,16,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
}

func (x *PublicReport) Reset() {
	*x = PublicReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicReport) ProtoMessage() {}

func (x *PublicReport) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicReport.ProtoReflect.Descriptor instead.
func (*PublicReport) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{45}
}

func (x *PublicReport) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PublicReport) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *PublicReport) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PublicReport) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *PublicReport) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

func (x *PublicReport) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *PublicReport) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicReport) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *PublicReport) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *PublicReport) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PublicReport) GetQuarter() int32 {
	if x != nil {
		return x.Quarter
	}
	return 0
}

func (x *PublicReport) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *PublicReport) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PublicReport) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *PublicReport) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *PublicReport) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type GetAccountsReceivableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`    // 公司code 例如00030.SZ
	Stype uint32 `protobuf:"varint,2,opt,name=stype,proto3" json:"stype,omitempty"` // 3=近三年 5=近五年 10=近十年  999=上市以来
	Unit  uint32 `protobuf:"varint,3,opt,name=unit,proto3" json:"unit,omitempty"`   // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetAccountsReceivableReq) Reset() {
	*x = GetAccountsReceivableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsReceivableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsReceivableReq) ProtoMessage() {}

func (x *GetAccountsReceivableReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsReceivableReq.ProtoReflect.Descriptor instead.
func (*GetAccountsReceivableReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{46}
}

func (x *GetAccountsReceivableReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAccountsReceivableReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetAccountsReceivableReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetAccountsReceivableRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32                   `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *AccountsReceivableInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountsReceivableRsp) Reset() {
	*x = GetAccountsReceivableRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsReceivableRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsReceivableRsp) ProtoMessage() {}

func (x *GetAccountsReceivableRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsReceivableRsp.ProtoReflect.Descriptor instead.
func (*GetAccountsReceivableRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{47}
}

func (x *GetAccountsReceivableRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetAccountsReceivableRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetAccountsReceivableRsp) GetData() *AccountsReceivableInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type AccountsReceivableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetAccountsReceivableCharts `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetAccountsReceivableList   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string                         `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *AccountsReceivableInfo) Reset() {
	*x = AccountsReceivableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsReceivableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsReceivableInfo) ProtoMessage() {}

func (x *AccountsReceivableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsReceivableInfo.ProtoReflect.Descriptor instead.
func (*AccountsReceivableInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{48}
}

func (x *AccountsReceivableInfo) GetCharts() []*GetAccountsReceivableCharts {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *AccountsReceivableInfo) GetList() []*GetAccountsReceivableList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AccountsReceivableInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetAccountsReceivableCharts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 名称
	List []*GetAccountsReceivableChart `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` // 柱状图列表
}

func (x *GetAccountsReceivableCharts) Reset() {
	*x = GetAccountsReceivableCharts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsReceivableCharts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsReceivableCharts) ProtoMessage() {}

func (x *GetAccountsReceivableCharts) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsReceivableCharts.ProtoReflect.Descriptor instead.
func (*GetAccountsReceivableCharts) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{49}
}

func (x *GetAccountsReceivableCharts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAccountsReceivableCharts) GetList() []*GetAccountsReceivableChart {
	if x != nil {
		return x.List
	}
	return nil
}

type GetAccountsReceivableChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // id
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetAccountsReceivableChart) Reset() {
	*x = GetAccountsReceivableChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsReceivableChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsReceivableChart) ProtoMessage() {}

func (x *GetAccountsReceivableChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsReceivableChart.ProtoReflect.Descriptor instead.
func (*GetAccountsReceivableChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{50}
}

func (x *GetAccountsReceivableChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAccountsReceivableChart) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetAccountsReceivableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year     string                    `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`                         // 年
	ItemList []*AccountsReceivableData `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"` // 明细
}

func (x *GetAccountsReceivableList) Reset() {
	*x = GetAccountsReceivableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountsReceivableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsReceivableList) ProtoMessage() {}

func (x *GetAccountsReceivableList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsReceivableList.ProtoReflect.Descriptor instead.
func (*GetAccountsReceivableList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{51}
}

func (x *GetAccountsReceivableList) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *GetAccountsReceivableList) GetItemList() []*AccountsReceivableData {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type AccountsReceivableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                      // 名称
	Money   string `protobuf:"bytes,2,opt,name=money,proto3" json:"money,omitempty"`                    // 应收账款-金额
	Ratio   string `protobuf:"bytes,3,opt,name=ratio,proto3" json:"ratio,omitempty"`                    // 应收账款-比例
	BadDebt string `protobuf:"bytes,4,opt,name=bad_debt,json=badDebt,proto3" json:"bad_debt,omitempty"` // 坏账准备
}

func (x *AccountsReceivableData) Reset() {
	*x = AccountsReceivableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsReceivableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsReceivableData) ProtoMessage() {}

func (x *AccountsReceivableData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsReceivableData.ProtoReflect.Descriptor instead.
func (*AccountsReceivableData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{52}
}

func (x *AccountsReceivableData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountsReceivableData) GetMoney() string {
	if x != nil {
		return x.Money
	}
	return ""
}

func (x *AccountsReceivableData) GetRatio() string {
	if x != nil {
		return x.Ratio
	}
	return ""
}

func (x *AccountsReceivableData) GetBadDebt() string {
	if x != nil {
		return x.BadDebt
	}
	return ""
}

type GetRdExpenditureReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"` // 3=近三年 5=近五年 10=近十年  999=上市以来
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`    // 公司code 例如00030.SZ
	Unit  uint32 `protobuf:"varint,3,opt,name=unit,proto3" json:"unit,omitempty"`   // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetRdExpenditureReq) Reset() {
	*x = GetRdExpenditureReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdExpenditureReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdExpenditureReq) ProtoMessage() {}

func (x *GetRdExpenditureReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdExpenditureReq.ProtoReflect.Descriptor instead.
func (*GetRdExpenditureReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{53}
}

func (x *GetRdExpenditureReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetRdExpenditureReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetRdExpenditureReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetRdExpenditureRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32              `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // 消息
	Data *RdExpenditureInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRdExpenditureRsp) Reset() {
	*x = GetRdExpenditureRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdExpenditureRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdExpenditureRsp) ProtoMessage() {}

func (x *GetRdExpenditureRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdExpenditureRsp.ProtoReflect.Descriptor instead.
func (*GetRdExpenditureRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{54}
}

func (x *GetRdExpenditureRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetRdExpenditureRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRdExpenditureRsp) GetData() *RdExpenditureInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type RdExpenditureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetRdExpenditureChart `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetRdExpenditureList  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string                   `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *RdExpenditureInfo) Reset() {
	*x = RdExpenditureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdExpenditureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdExpenditureInfo) ProtoMessage() {}

func (x *RdExpenditureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdExpenditureInfo.ProtoReflect.Descriptor instead.
func (*RdExpenditureInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{55}
}

func (x *RdExpenditureInfo) GetCharts() []*GetRdExpenditureChart {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *RdExpenditureInfo) GetList() []*GetRdExpenditureList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RdExpenditureInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetRdExpenditureChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // id
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetRdExpenditureChart) Reset() {
	*x = GetRdExpenditureChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdExpenditureChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdExpenditureChart) ProtoMessage() {}

func (x *GetRdExpenditureChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdExpenditureChart.ProtoReflect.Descriptor instead.
func (*GetRdExpenditureChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{56}
}

func (x *GetRdExpenditureChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRdExpenditureChart) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetRdExpenditureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year string             `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"` // 年
	Data *RdExpenditureData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 明细
}

func (x *GetRdExpenditureList) Reset() {
	*x = GetRdExpenditureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdExpenditureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdExpenditureList) ProtoMessage() {}

func (x *GetRdExpenditureList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdExpenditureList.ProtoReflect.Descriptor instead.
func (*GetRdExpenditureList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{57}
}

func (x *GetRdExpenditureList) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *GetRdExpenditureList) GetData() *RdExpenditureData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RdExpenditureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdExpendAll     string `protobuf:"bytes,1,opt,name=rd_expend_all,json=rdExpendAll,proto3" json:"rd_expend_all,omitempty"`             // 研发支出合计
	RdExpendCost    string `protobuf:"bytes,2,opt,name=rd_expend_cost,json=rdExpendCost,proto3" json:"rd_expend_cost,omitempty"`          // 研发支出-费用化
	RdExpendCapital string `protobuf:"bytes,3,opt,name=rd_expend_capital,json=rdExpendCapital,proto3" json:"rd_expend_capital,omitempty"` // 研发支出-资本化
	RdPersonnel     string `protobuf:"bytes,4,opt,name=rd_personnel,json=rdPersonnel,proto3" json:"rd_personnel,omitempty"`               // 研发人员人数
}

func (x *RdExpenditureData) Reset() {
	*x = RdExpenditureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdExpenditureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdExpenditureData) ProtoMessage() {}

func (x *RdExpenditureData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdExpenditureData.ProtoReflect.Descriptor instead.
func (*RdExpenditureData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{58}
}

func (x *RdExpenditureData) GetRdExpendAll() string {
	if x != nil {
		return x.RdExpendAll
	}
	return ""
}

func (x *RdExpenditureData) GetRdExpendCost() string {
	if x != nil {
		return x.RdExpendCost
	}
	return ""
}

func (x *RdExpenditureData) GetRdExpendCapital() string {
	if x != nil {
		return x.RdExpendCapital
	}
	return ""
}

func (x *RdExpenditureData) GetRdPersonnel() string {
	if x != nil {
		return x.RdPersonnel
	}
	return ""
}

type GetStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockType StockType `protobuf:"varint,1,opt,name=stock_type,json=stockType,proto3,enum=chatfinbot.search.v1.StockType" json:"stock_type,omitempty"` //类型
	Lang      string    `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`                                                                 // 语言
	Stype     uint32    `protobuf:"varint,3,opt,name=stype,proto3" json:"stype,omitempty"`                                                              // 3=近三年 5=近五年 10=近十年  999=上市以来
	Code      string    `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                                                 // 公司code 例如00030.SZ
	Unit      uint32    `protobuf:"varint,5,opt,name=unit,proto3" json:"unit,omitempty"`                                                                // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetStockReq) Reset() {
	*x = GetStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockReq) ProtoMessage() {}

func (x *GetStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockReq.ProtoReflect.Descriptor instead.
func (*GetStockReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{59}
}

func (x *GetStockReq) GetStockType() StockType {
	if x != nil {
		return x.StockType
	}
	return StockType_StockTypeUnknown
}

func (x *GetStockReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *GetStockReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetStockReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetStockReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetStockRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32      `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // 消息
	Data *StockInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` //
}

func (x *GetStockRsp) Reset() {
	*x = GetStockRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockRsp) ProtoMessage() {}

func (x *GetStockRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockRsp.ProtoReflect.Descriptor instead.
func (*GetStockRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{60}
}

func (x *GetStockRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetStockRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStockRsp) GetData() *StockInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type StockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GraphType   int32              `protobuf:"varint,1,opt,name=graph_type,json=graphType,proto3" json:"graph_type,omitempty"`      // 0= 无图 1=柱状图 2=折线图
	Charts      []*StockInfoCharts `protobuf:"bytes,2,rep,name=charts,proto3" json:"charts,omitempty"`                              // 图形
	List        *StockInfoList     `protobuf:"bytes,3,opt,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	ItemList    []*StockTable      `protobuf:"bytes,4,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`          // 表格数据
	CompanyName string             `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
	Remark      string             `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`                              // 备注
}

func (x *StockInfo) Reset() {
	*x = StockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockInfo) ProtoMessage() {}

func (x *StockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockInfo.ProtoReflect.Descriptor instead.
func (*StockInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{61}
}

func (x *StockInfo) GetGraphType() int32 {
	if x != nil {
		return x.GraphType
	}
	return 0
}

func (x *StockInfo) GetCharts() []*StockInfoCharts {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *StockInfo) GetList() *StockInfoList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *StockInfo) GetItemList() []*StockTable {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *StockInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *StockInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type StockTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 字段中文名
	Val  string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`   // 值
}

func (x *StockTable) Reset() {
	*x = StockTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockTable) ProtoMessage() {}

func (x *StockTable) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockTable.ProtoReflect.Descriptor instead.
func (*StockTable) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{62}
}

func (x *StockTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockTable) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type StockInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []string     `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"` // 标题
	Datas   []*StockData `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`     // 明细
}

func (x *StockInfoList) Reset() {
	*x = StockInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockInfoList) ProtoMessage() {}

func (x *StockInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockInfoList.ProtoReflect.Descriptor instead.
func (*StockInfoList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{63}
}

func (x *StockInfoList) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *StockInfoList) GetDatas() []*StockData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type StockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 字段名
	Val  []string `protobuf:"bytes,2,rep,name=val,proto3" json:"val,omitempty"`   // 值
}

func (x *StockData) Reset() {
	*x = StockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockData) ProtoMessage() {}

func (x *StockData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockData.ProtoReflect.Descriptor instead.
func (*StockData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{64}
}

func (x *StockData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockData) GetVal() []string {
	if x != nil {
		return x.Val
	}
	return nil
}

type StockInfoCharts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name
	X    string  `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`       // x
	Y    float64 `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`     // y
}

func (x *StockInfoCharts) Reset() {
	*x = StockInfoCharts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockInfoCharts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockInfoCharts) ProtoMessage() {}

func (x *StockInfoCharts) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockInfoCharts.ProtoReflect.Descriptor instead.
func (*StockInfoCharts) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{65}
}

func (x *StockInfoCharts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockInfoCharts) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *StockInfoCharts) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_search_proto protoreflect.FileDescriptor

var file_search_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x01, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x52, 0x06, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3c, 0x0a, 0x07, 0x68, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x4b, 0x52, 0x06, 0x68, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xe8, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x5f,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65,
	0x67, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x0f, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x4b, 0x22, 0x26, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x22, 0xce, 0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x43, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x76, 0x62, 0x79, 0x63, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x76, 0x62, 0x79, 0x63, 0x73, 0x72, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x71, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x76, 0x62, 0x79, 0x63, 0x73, 0x72, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x76, 0x62, 0x79, 0x63, 0x73, 0x72,
	0x63, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x74, 0x74, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x74, 0x74, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x70, 0x73, 0x74, 0x74, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x70,
	0x73, 0x74, 0x74, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x74, 0x74, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x73, 0x74, 0x74, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62,
	0x6d, 0x72, 0x71, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x6d, 0x72,
	0x71, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x77,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x74, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2,
	0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x63, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9b, 0x02, 0x0a,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x64, 0x75,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x64, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6d, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6d, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x6d, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x61, 0x6d, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64,
	0x41, 0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64,
	0x41, 0x6d, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xcc, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4a, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x0a, 0x65, 0x64, 0x75, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x65, 0x64, 0x75, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08,
	0x65, 0x64, 0x75, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x64, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x64, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x4e, 0x75, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x05,
	0x65, 0x64, 0x75, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x75,
	0x31, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x64, 0x75, 0x5f, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x64, 0x75, 0x32, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x64, 0x75, 0x5f, 0x33, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x75, 0x33, 0x12, 0x13, 0x0a, 0x05, 0x65,
	0x64, 0x75, 0x5f, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x75, 0x34,
	0x12, 0x13, 0x0a, 0x05, 0x65, 0x64, 0x75, 0x5f, 0x35, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x64, 0x75, 0x35, 0x22, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x6e,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x42, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0,
	0x01, 0x0a, 0x0d, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x5c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22,
	0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x6e, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x01, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x39,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x22, 0x24, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6d, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2f, 0x0a,
	0x13, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x79,
	0x69, 0x6e, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b,
	0x02, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x15,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xef, 0x03, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x33, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x33, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x40,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xcb, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x49, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x64, 0x44, 0x65, 0x62, 0x74, 0x22, 0x53, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x22, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x52, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x43, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x64, 0x45,
	0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xac, 0x01, 0x0a, 0x11, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x9f,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x3e,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x22, 0x66, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x32, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x0d, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x31, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x22, 0x41, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x79, 0x2a, 0x5e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x4b, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x53, 0x10, 0x03, 0x2a, 0x9c, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x4e,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x10, 0x09, 0x32, 0xa9, 0x0c, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x7e, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x7a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2f, 0x6d, 0x62, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x7a, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x7b, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x63, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x61, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x64, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2f, 0x72, 0x64, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x52, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x45,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_search_proto_rawDescOnce sync.Once
	file_search_proto_rawDescData = file_search_proto_rawDesc
)

func file_search_proto_rawDescGZIP() []byte {
	file_search_proto_rawDescOnce.Do(func() {
		file_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_search_proto_rawDescData)
	})
	return file_search_proto_rawDescData
}

var file_search_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_search_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_search_proto_goTypes = []interface{}{
	(CompanyType)(0),                    // 0: chatfinbot.search.v1.CompanyType
	(StockType)(0),                      // 1: chatfinbot.search.v1.StockType
	(*GetCompanyInfoReq)(nil),           // 2: chatfinbot.search.v1.GetCompanyInfoReq
	(*GetCompanyInfoRsp)(nil),           // 3: chatfinbot.search.v1.GetCompanyInfoRsp
	(*CompanyInfo)(nil),                 // 4: chatfinbot.search.v1.CompanyInfo
	(*CompanyInfoCh)(nil),               // 5: chatfinbot.search.v1.CompanyInfoCh
	(*CompanyInfoHK)(nil),               // 6: chatfinbot.search.v1.CompanyInfoHK
	(*GetIndicatorsReq)(nil),            // 7: chatfinbot.search.v1.GetIndicatorsReq
	(*GetIndicatorsRsp)(nil),            // 8: chatfinbot.search.v1.GetIndicatorsRsp
	(*IndicatorsInfo)(nil),              // 9: chatfinbot.search.v1.IndicatorsInfo
	(*CommonListData)(nil),              // 10: chatfinbot.search.v1.CommonListData
	(*IndicatorsCh)(nil),                // 11: chatfinbot.search.v1.IndicatorsCh
	(*GetShareholdersReq)(nil),          // 12: chatfinbot.search.v1.GetShareholdersReq
	(*GetShareholdersRsp)(nil),          // 13: chatfinbot.search.v1.GetShareholdersRsp
	(*ShareholdersInfo)(nil),            // 14: chatfinbot.search.v1.ShareholdersInfo
	(*GetShareholdersChart)(nil),        // 15: chatfinbot.search.v1.GetShareholdersChart
	(*GetShareholdersInfo)(nil),         // 16: chatfinbot.search.v1.GetShareholdersInfo
	(*GetExecutivesReq)(nil),            // 17: chatfinbot.search.v1.GetExecutivesReq
	(*GetExecutivesRsp)(nil),            // 18: chatfinbot.search.v1.GetExecutivesRsp
	(*ExecutivesInfo)(nil),              // 19: chatfinbot.search.v1.ExecutivesInfo
	(*ExecutivesData)(nil),              // 20: chatfinbot.search.v1.ExecutivesData
	(*GetStaffInfoReq)(nil),             // 21: chatfinbot.search.v1.GetStaffInfoReq
	(*GetStaffInfoRsp)(nil),             // 22: chatfinbot.search.v1.GetStaffInfoRsp
	(*StaffInfo)(nil),                   // 23: chatfinbot.search.v1.StaffInfo
	(*GetStaffInfoChartList)(nil),       // 24: chatfinbot.search.v1.GetStaffInfoChartList
	(*GetStaffInfoChart)(nil),           // 25: chatfinbot.search.v1.GetStaffInfoChart
	(*GetStaffInfoData)(nil),            // 26: chatfinbot.search.v1.GetStaffInfoData
	(*StaffData)(nil),                   // 27: chatfinbot.search.v1.StaffData
	(*GetMBRevenueReq)(nil),             // 28: chatfinbot.search.v1.GetMBRevenueReq
	(*GetMBRevenueRsp)(nil),             // 29: chatfinbot.search.v1.GetMBRevenueRsp
	(*MBRevenueInfo)(nil),               // 30: chatfinbot.search.v1.MBRevenueInfo
	(*GetMBRevenueCharts)(nil),          // 31: chatfinbot.search.v1.GetMBRevenueCharts
	(*GetMBRevenueList)(nil),            // 32: chatfinbot.search.v1.GetMBRevenueList
	(*GetMBRevenueData)(nil),            // 33: chatfinbot.search.v1.GetMBRevenueData
	(*GetFinancialReq)(nil),             // 34: chatfinbot.search.v1.GetFinancialReq
	(*GetFinancialRsp)(nil),             // 35: chatfinbot.search.v1.GetFinancialRsp
	(*FinancialInfo)(nil),               // 36: chatfinbot.search.v1.FinancialInfo
	(*GetFinancialChartsList)(nil),      // 37: chatfinbot.search.v1.GetFinancialChartsList
	(*GetFinancialChart)(nil),           // 38: chatfinbot.search.v1.GetFinancialChart
	(*GetFinancialList)(nil),            // 39: chatfinbot.search.v1.GetFinancialList
	(*GetFinancialData)(nil),            // 40: chatfinbot.search.v1.GetFinancialData
	(*Financial)(nil),                   // 41: chatfinbot.search.v1.Financial
	(*SearchCompanyReq)(nil),            // 42: chatfinbot.search.v1.SearchCompanyReq
	(*SearchCompanyRsp)(nil),            // 43: chatfinbot.search.v1.SearchCompanyRsp
	(*CompanyData)(nil),                 // 44: chatfinbot.search.v1.CompanyData
	(*SearchPublicReportReq)(nil),       // 45: chatfinbot.search.v1.SearchPublicReportReq
	(*SearchPublicReportRsp)(nil),       // 46: chatfinbot.search.v1.SearchPublicReportRsp
	(*PublicReport)(nil),                // 47: chatfinbot.search.v1.PublicReport
	(*GetAccountsReceivableReq)(nil),    // 48: chatfinbot.search.v1.GetAccountsReceivableReq
	(*GetAccountsReceivableRsp)(nil),    // 49: chatfinbot.search.v1.GetAccountsReceivableRsp
	(*AccountsReceivableInfo)(nil),      // 50: chatfinbot.search.v1.AccountsReceivableInfo
	(*GetAccountsReceivableCharts)(nil), // 51: chatfinbot.search.v1.GetAccountsReceivableCharts
	(*GetAccountsReceivableChart)(nil),  // 52: chatfinbot.search.v1.GetAccountsReceivableChart
	(*GetAccountsReceivableList)(nil),   // 53: chatfinbot.search.v1.GetAccountsReceivableList
	(*AccountsReceivableData)(nil),      // 54: chatfinbot.search.v1.AccountsReceivableData
	(*GetRdExpenditureReq)(nil),         // 55: chatfinbot.search.v1.GetRdExpenditureReq
	(*GetRdExpenditureRsp)(nil),         // 56: chatfinbot.search.v1.GetRdExpenditureRsp
	(*RdExpenditureInfo)(nil),           // 57: chatfinbot.search.v1.RdExpenditureInfo
	(*GetRdExpenditureChart)(nil),       // 58: chatfinbot.search.v1.GetRdExpenditureChart
	(*GetRdExpenditureList)(nil),        // 59: chatfinbot.search.v1.GetRdExpenditureList
	(*RdExpenditureData)(nil),           // 60: chatfinbot.search.v1.RdExpenditureData
	(*GetStockReq)(nil),                 // 61: chatfinbot.search.v1.GetStockReq
	(*GetStockRsp)(nil),                 // 62: chatfinbot.search.v1.GetStockRsp
	(*StockInfo)(nil),                   // 63: chatfinbot.search.v1.StockInfo
	(*StockTable)(nil),                  // 64: chatfinbot.search.v1.StockTable
	(*StockInfoList)(nil),               // 65: chatfinbot.search.v1.StockInfoList
	(*StockData)(nil),                   // 66: chatfinbot.search.v1.StockData
	(*StockInfoCharts)(nil),             // 67: chatfinbot.search.v1.StockInfoCharts
}
var file_search_proto_depIdxs = []int32{
	4,  // 0: chatfinbot.search.v1.GetCompanyInfoRsp.data:type_name -> chatfinbot.search.v1.CompanyInfo
	0,  // 1: chatfinbot.search.v1.CompanyInfo.type:type_name -> chatfinbot.search.v1.CompanyType
	5,  // 2: chatfinbot.search.v1.CompanyInfo.ch_data:type_name -> chatfinbot.search.v1.CompanyInfoCh
	6,  // 3: chatfinbot.search.v1.CompanyInfo.hk_data:type_name -> chatfinbot.search.v1.CompanyInfoHK
	9,  // 4: chatfinbot.search.v1.GetIndicatorsRsp.data:type_name -> chatfinbot.search.v1.IndicatorsInfo
	10, // 5: chatfinbot.search.v1.IndicatorsInfo.list:type_name -> chatfinbot.search.v1.CommonListData
	14, // 6: chatfinbot.search.v1.GetShareholdersRsp.data:type_name -> chatfinbot.search.v1.ShareholdersInfo
	15, // 7: chatfinbot.search.v1.ShareholdersInfo.charts:type_name -> chatfinbot.search.v1.GetShareholdersChart
	16, // 8: chatfinbot.search.v1.ShareholdersInfo.list:type_name -> chatfinbot.search.v1.GetShareholdersInfo
	19, // 9: chatfinbot.search.v1.GetExecutivesRsp.data:type_name -> chatfinbot.search.v1.ExecutivesInfo
	20, // 10: chatfinbot.search.v1.ExecutivesInfo.list:type_name -> chatfinbot.search.v1.ExecutivesData
	23, // 11: chatfinbot.search.v1.GetStaffInfoRsp.data:type_name -> chatfinbot.search.v1.StaffInfo
	24, // 12: chatfinbot.search.v1.StaffInfo.job_charts:type_name -> chatfinbot.search.v1.GetStaffInfoChartList
	24, // 13: chatfinbot.search.v1.StaffInfo.edu_charts:type_name -> chatfinbot.search.v1.GetStaffInfoChartList
	26, // 14: chatfinbot.search.v1.StaffInfo.job_list:type_name -> chatfinbot.search.v1.GetStaffInfoData
	26, // 15: chatfinbot.search.v1.StaffInfo.edu_list:type_name -> chatfinbot.search.v1.GetStaffInfoData
	25, // 16: chatfinbot.search.v1.GetStaffInfoChartList.list:type_name -> chatfinbot.search.v1.GetStaffInfoChart
	10, // 17: chatfinbot.search.v1.GetStaffInfoData.list:type_name -> chatfinbot.search.v1.CommonListData
	30, // 18: chatfinbot.search.v1.GetMBRevenueRsp.data:type_name -> chatfinbot.search.v1.MBRevenueInfo
	31, // 19: chatfinbot.search.v1.MBRevenueInfo.charts:type_name -> chatfinbot.search.v1.GetMBRevenueCharts
	32, // 20: chatfinbot.search.v1.MBRevenueInfo.list:type_name -> chatfinbot.search.v1.GetMBRevenueList
	33, // 21: chatfinbot.search.v1.GetMBRevenueList.column_list:type_name -> chatfinbot.search.v1.GetMBRevenueData
	10, // 22: chatfinbot.search.v1.GetMBRevenueData.item_list:type_name -> chatfinbot.search.v1.CommonListData
	36, // 23: chatfinbot.search.v1.GetFinancialRsp.data:type_name -> chatfinbot.search.v1.FinancialInfo
	37, // 24: chatfinbot.search.v1.FinancialInfo.charts:type_name -> chatfinbot.search.v1.GetFinancialChartsList
	39, // 25: chatfinbot.search.v1.FinancialInfo.list:type_name -> chatfinbot.search.v1.GetFinancialList
	38, // 26: chatfinbot.search.v1.GetFinancialChartsList.list:type_name -> chatfinbot.search.v1.GetFinancialChart
	33, // 27: chatfinbot.search.v1.GetFinancialList.column_list:type_name -> chatfinbot.search.v1.GetMBRevenueData
	10, // 28: chatfinbot.search.v1.GetFinancialData.item_list:type_name -> chatfinbot.search.v1.CommonListData
	44, // 29: chatfinbot.search.v1.SearchCompanyRsp.list:type_name -> chatfinbot.search.v1.CompanyData
	47, // 30: chatfinbot.search.v1.SearchPublicReportRsp.list:type_name -> chatfinbot.search.v1.PublicReport
	50, // 31: chatfinbot.search.v1.GetAccountsReceivableRsp.data:type_name -> chatfinbot.search.v1.AccountsReceivableInfo
	51, // 32: chatfinbot.search.v1.AccountsReceivableInfo.charts:type_name -> chatfinbot.search.v1.GetAccountsReceivableCharts
	53, // 33: chatfinbot.search.v1.AccountsReceivableInfo.list:type_name -> chatfinbot.search.v1.GetAccountsReceivableList
	52, // 34: chatfinbot.search.v1.GetAccountsReceivableCharts.list:type_name -> chatfinbot.search.v1.GetAccountsReceivableChart
	54, // 35: chatfinbot.search.v1.GetAccountsReceivableList.item_list:type_name -> chatfinbot.search.v1.AccountsReceivableData
	57, // 36: chatfinbot.search.v1.GetRdExpenditureRsp.data:type_name -> chatfinbot.search.v1.RdExpenditureInfo
	58, // 37: chatfinbot.search.v1.RdExpenditureInfo.charts:type_name -> chatfinbot.search.v1.GetRdExpenditureChart
	59, // 38: chatfinbot.search.v1.RdExpenditureInfo.list:type_name -> chatfinbot.search.v1.GetRdExpenditureList
	60, // 39: chatfinbot.search.v1.GetRdExpenditureList.data:type_name -> chatfinbot.search.v1.RdExpenditureData
	1,  // 40: chatfinbot.search.v1.GetStockReq.stock_type:type_name -> chatfinbot.search.v1.StockType
	63, // 41: chatfinbot.search.v1.GetStockRsp.data:type_name -> chatfinbot.search.v1.StockInfo
	67, // 42: chatfinbot.search.v1.StockInfo.charts:type_name -> chatfinbot.search.v1.StockInfoCharts
	65, // 43: chatfinbot.search.v1.StockInfo.list:type_name -> chatfinbot.search.v1.StockInfoList
	64, // 44: chatfinbot.search.v1.StockInfo.item_list:type_name -> chatfinbot.search.v1.StockTable
	66, // 45: chatfinbot.search.v1.StockInfoList.datas:type_name -> chatfinbot.search.v1.StockData
	2,  // 46: chatfinbot.search.v1.SearchService.GetCompanyInfo:input_type -> chatfinbot.search.v1.GetCompanyInfoReq
	7,  // 47: chatfinbot.search.v1.SearchService.GetIndicators:input_type -> chatfinbot.search.v1.GetIndicatorsReq
	12, // 48: chatfinbot.search.v1.SearchService.GetShareholders:input_type -> chatfinbot.search.v1.GetShareholdersReq
	17, // 49: chatfinbot.search.v1.SearchService.GetExecutives:input_type -> chatfinbot.search.v1.GetExecutivesReq
	21, // 50: chatfinbot.search.v1.SearchService.GetStaffInfo:input_type -> chatfinbot.search.v1.GetStaffInfoReq
	28, // 51: chatfinbot.search.v1.SearchService.GetMBRevenue:input_type -> chatfinbot.search.v1.GetMBRevenueReq
	34, // 52: chatfinbot.search.v1.SearchService.GetFinancial:input_type -> chatfinbot.search.v1.GetFinancialReq
	42, // 53: chatfinbot.search.v1.SearchService.SearchCompany:input_type -> chatfinbot.search.v1.SearchCompanyReq
	45, // 54: chatfinbot.search.v1.SearchService.SearchPublicReport:input_type -> chatfinbot.search.v1.SearchPublicReportReq
	48, // 55: chatfinbot.search.v1.SearchService.GetAccountsReceivable:input_type -> chatfinbot.search.v1.GetAccountsReceivableReq
	55, // 56: chatfinbot.search.v1.SearchService.GetRdExpenditure:input_type -> chatfinbot.search.v1.GetRdExpenditureReq
	61, // 57: chatfinbot.search.v1.SearchService.GetStock:input_type -> chatfinbot.search.v1.GetStockReq
	3,  // 58: chatfinbot.search.v1.SearchService.GetCompanyInfo:output_type -> chatfinbot.search.v1.GetCompanyInfoRsp
	8,  // 59: chatfinbot.search.v1.SearchService.GetIndicators:output_type -> chatfinbot.search.v1.GetIndicatorsRsp
	13, // 60: chatfinbot.search.v1.SearchService.GetShareholders:output_type -> chatfinbot.search.v1.GetShareholdersRsp
	18, // 61: chatfinbot.search.v1.SearchService.GetExecutives:output_type -> chatfinbot.search.v1.GetExecutivesRsp
	22, // 62: chatfinbot.search.v1.SearchService.GetStaffInfo:output_type -> chatfinbot.search.v1.GetStaffInfoRsp
	29, // 63: chatfinbot.search.v1.SearchService.GetMBRevenue:output_type -> chatfinbot.search.v1.GetMBRevenueRsp
	35, // 64: chatfinbot.search.v1.SearchService.GetFinancial:output_type -> chatfinbot.search.v1.GetFinancialRsp
	43, // 65: chatfinbot.search.v1.SearchService.SearchCompany:output_type -> chatfinbot.search.v1.SearchCompanyRsp
	46, // 66: chatfinbot.search.v1.SearchService.SearchPublicReport:output_type -> chatfinbot.search.v1.SearchPublicReportRsp
	49, // 67: chatfinbot.search.v1.SearchService.GetAccountsReceivable:output_type -> chatfinbot.search.v1.GetAccountsReceivableRsp
	56, // 68: chatfinbot.search.v1.SearchService.GetRdExpenditure:output_type -> chatfinbot.search.v1.GetRdExpenditureRsp
	62, // 69: chatfinbot.search.v1.SearchService.GetStock:output_type -> chatfinbot.search.v1.GetStockRsp
	58, // [58:70] is the sub-list for method output_type
	46, // [46:58] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_search_proto_init() }
func file_search_proto_init() {
	if File_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfoCh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfoHK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndicatorsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndicatorsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorsCh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareholdersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutivesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutivesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutivesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutivesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoChartList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBRevenueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueCharts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialChartsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCompanyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPublicReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPublicReportRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountsReceivableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountsReceivableRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsReceivableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountsReceivableCharts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountsReceivableChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountsReceivableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsReceivableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRdExpenditureReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRdExpenditureRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdExpenditureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRdExpenditureChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRdExpenditureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdExpenditureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockInfoCharts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_search_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_search_proto_goTypes,
		DependencyIndexes: file_search_proto_depIdxs,
		EnumInfos:         file_search_proto_enumTypes,
		MessageInfos:      file_search_proto_msgTypes,
	}.Build()
	File_search_proto = out.File
	file_search_proto_rawDesc = nil
	file_search_proto_goTypes = nil
	file_search_proto_depIdxs = nil
}
