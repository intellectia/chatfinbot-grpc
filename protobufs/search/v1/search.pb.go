// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: search.proto

package searchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyType int32

const (
	CompanyType_CompanyTypeUnknown CompanyType = 0 // 未知（不要使用）
	CompanyType_CompanyTypeCh      CompanyType = 1 // 沪深，A股
	CompanyType_CompanyTypeHK      CompanyType = 2 // 港股
	CompanyType_CompanyTypeUS      CompanyType = 3 // 美股
)

// Enum value maps for CompanyType.
var (
	CompanyType_name = map[int32]string{
		0: "CompanyTypeUnknown",
		1: "CompanyTypeCh",
		2: "CompanyTypeHK",
		3: "CompanyTypeUS",
	}
	CompanyType_value = map[string]int32{
		"CompanyTypeUnknown": 0,
		"CompanyTypeCh":      1,
		"CompanyTypeHK":      2,
		"CompanyTypeUS":      3,
	}
)

func (x CompanyType) Enum() *CompanyType {
	p := new(CompanyType)
	*p = x
	return p
}

func (x CompanyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyType) Descriptor() protoreflect.EnumDescriptor {
	return file_search_proto_enumTypes[0].Descriptor()
}

func (CompanyType) Type() protoreflect.EnumType {
	return &file_search_proto_enumTypes[0]
}

func (x CompanyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyType.Descriptor instead.
func (CompanyType) EnumDescriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{0}
}

type GetCompanyInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetCompanyInfoReq) Reset() {
	*x = GetCompanyInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyInfoReq) ProtoMessage() {}

func (x *GetCompanyInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyInfoReq.ProtoReflect.Descriptor instead.
func (*GetCompanyInfoReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{0}
}

func (x *GetCompanyInfoReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetCompanyInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        CompanyType    `protobuf:"varint,1,opt,name=type,proto3,enum=chatfinbot.search.v1.CompanyType" json:"type,omitempty"` // 公司类型
	ChData      *CompanyInfoCh `protobuf:"bytes,2,opt,name=ch_data,json=chData,proto3" json:"ch_data,omitempty"`                      // 沪深，A股基本信息
	HkData      *CompanyInfoHK `protobuf:"bytes,3,opt,name=hk_data,json=hkData,proto3" json:"hk_data,omitempty"`                      // 港股基本信息
	CompanyName string         `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`       // 公司名字
}

func (x *GetCompanyInfoRsp) Reset() {
	*x = GetCompanyInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyInfoRsp) ProtoMessage() {}

func (x *GetCompanyInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCompanyInfoRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{1}
}

func (x *GetCompanyInfoRsp) GetType() CompanyType {
	if x != nil {
		return x.Type
	}
	return CompanyType_CompanyTypeUnknown
}

func (x *GetCompanyInfoRsp) GetChData() *CompanyInfoCh {
	if x != nil {
		return x.ChData
	}
	return nil
}

func (x *GetCompanyInfoRsp) GetHkData() *CompanyInfoHK {
	if x != nil {
		return x.HkData
	}
	return nil
}

func (x *GetCompanyInfoRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

// 公司基本信息
type CompanyInfoCh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompName      string `protobuf:"bytes,1,opt,name=comp_name,json=compName,proto3" json:"comp_name,omitempty"`                 // 公司中文名称 COMPNAME
	CompNameEng   string `protobuf:"bytes,2,opt,name=comp_name_eng,json=compNameEng,proto3" json:"comp_name_eng,omitempty"`      // 公司中文名称 COMPNAMEENG
	Gics          string `protobuf:"bytes,3,opt,name=gics,proto3" json:"gics,omitempty"`                                         // 所属行业 GICS
	RegCapital    string `protobuf:"bytes,4,opt,name=reg_capital,json=regCapital,proto3" json:"reg_capital,omitempty"`           // 注册资本 REGCAPITAL
	RegAddress    string `protobuf:"bytes,5,opt,name=reg_address,json=regAddress,proto3" json:"reg_address,omitempty"`           // 注册地址 REGADDRESS
	FoundDate     string `protobuf:"bytes,6,opt,name=found_date,json=foundDate,proto3" json:"found_date,omitempty"`              // 成立时间 FOUNDDATE
	ListDate      string `protobuf:"bytes,7,opt,name=list_date,json=listDate,proto3" json:"list_date,omitempty"`                 // 上市时间 LISTDATE
	Legrepresent  string `protobuf:"bytes,8,opt,name=legrepresent,proto3" json:"legrepresent,omitempty"`                         // 法定代表人 LEGREPRESENT
	Code          string `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`                                         // 股票代码 CODE
	AholderType   string `protobuf:"bytes,10,opt,name=aholder_type,json=aholderType,proto3" json:"aholder_type,omitempty"`       // 实控人 AHOLDERTYPE
	HoldName      string `protobuf:"bytes,11,opt,name=hold_name,json=holdName,proto3" json:"hold_name,omitempty"`                // 第一股东 HOLDNAME
	Website       string `protobuf:"bytes,12,opt,name=website,proto3" json:"website,omitempty"`                                  // 公司官网 WEBSITE
	OfficeAddress string `protobuf:"bytes,13,opt,name=office_address,json=officeAddress,proto3" json:"office_address,omitempty"` // 办公地址 OFFICEADDRESS
	Phone         string `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`                                      // 电话 PHONE
	Email         string `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`                                      // 电子邮箱 EMAIL
	ComProfile    string `protobuf:"bytes,16,opt,name=com_profile,json=comProfile,proto3" json:"com_profile,omitempty"`          // 公司介绍 COMPROFILE
}

func (x *CompanyInfoCh) Reset() {
	*x = CompanyInfoCh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfoCh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfoCh) ProtoMessage() {}

func (x *CompanyInfoCh) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfoCh.ProtoReflect.Descriptor instead.
func (*CompanyInfoCh) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyInfoCh) GetCompName() string {
	if x != nil {
		return x.CompName
	}
	return ""
}

func (x *CompanyInfoCh) GetCompNameEng() string {
	if x != nil {
		return x.CompNameEng
	}
	return ""
}

func (x *CompanyInfoCh) GetGics() string {
	if x != nil {
		return x.Gics
	}
	return ""
}

func (x *CompanyInfoCh) GetRegCapital() string {
	if x != nil {
		return x.RegCapital
	}
	return ""
}

func (x *CompanyInfoCh) GetRegAddress() string {
	if x != nil {
		return x.RegAddress
	}
	return ""
}

func (x *CompanyInfoCh) GetFoundDate() string {
	if x != nil {
		return x.FoundDate
	}
	return ""
}

func (x *CompanyInfoCh) GetListDate() string {
	if x != nil {
		return x.ListDate
	}
	return ""
}

func (x *CompanyInfoCh) GetLegrepresent() string {
	if x != nil {
		return x.Legrepresent
	}
	return ""
}

func (x *CompanyInfoCh) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CompanyInfoCh) GetAholderType() string {
	if x != nil {
		return x.AholderType
	}
	return ""
}

func (x *CompanyInfoCh) GetHoldName() string {
	if x != nil {
		return x.HoldName
	}
	return ""
}

func (x *CompanyInfoCh) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *CompanyInfoCh) GetOfficeAddress() string {
	if x != nil {
		return x.OfficeAddress
	}
	return ""
}

func (x *CompanyInfoCh) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CompanyInfoCh) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CompanyInfoCh) GetComProfile() string {
	if x != nil {
		return x.ComProfile
	}
	return ""
}

// 港股公司基本信息
type CompanyInfoHK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompanyInfoHK) Reset() {
	*x = CompanyInfoHK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfoHK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfoHK) ProtoMessage() {}

func (x *CompanyInfoHK) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfoHK.ProtoReflect.Descriptor instead.
func (*CompanyInfoHK) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{3}
}

type GetIndicatorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetIndicatorsReq) Reset() {
	*x = GetIndicatorsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndicatorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndicatorsReq) ProtoMessage() {}

func (x *GetIndicatorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndicatorsReq.ProtoReflect.Descriptor instead.
func (*GetIndicatorsReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{4}
}

func (x *GetIndicatorsReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetIndicatorsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List        []*CommonListData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string            `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
	Date        string            `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`                                  // 更新时间
}

func (x *GetIndicatorsRsp) Reset() {
	*x = GetIndicatorsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndicatorsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndicatorsRsp) ProtoMessage() {}

func (x *GetIndicatorsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndicatorsRsp.ProtoReflect.Descriptor instead.
func (*GetIndicatorsRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{5}
}

func (x *GetIndicatorsRsp) GetList() []*CommonListData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetIndicatorsRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *GetIndicatorsRsp) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type CommonListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CnName string `protobuf:"bytes,1,opt,name=cn_name,json=cnName,proto3" json:"cn_name,omitempty"` // 字段中文名
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // 字段名
	Unit   uint32 `protobuf:"varint,3,opt,name=unit,proto3" json:"unit,omitempty"`                  // 单位
	Val    string `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`                     // 值
	Sign   uint32 `protobuf:"varint,5,opt,name=sign,proto3" json:"sign,omitempty"`                  // 标记 0=无变化  1=标蓝
}

func (x *CommonListData) Reset() {
	*x = CommonListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonListData) ProtoMessage() {}

func (x *CommonListData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonListData.ProtoReflect.Descriptor instead.
func (*CommonListData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{6}
}

func (x *CommonListData) GetCnName() string {
	if x != nil {
		return x.CnName
	}
	return ""
}

func (x *CommonListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommonListData) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *CommonListData) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

func (x *CommonListData) GetSign() uint32 {
	if x != nil {
		return x.Sign
	}
	return 0
}

// 行情指标
type IndicatorsCh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Close            string `protobuf:"bytes,1,opt,name=close,proto3" json:"close,omitempty"`                                                  // 最新收盘价 Close
	DifferRange      string `protobuf:"bytes,2,opt,name=differ_range,json=differRange,proto3" json:"differ_range,omitempty"`                   // 涨跌幅 DifferRange
	Amount           string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                                // 成交额 Amount
	Volume           string `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`                                                // 成交量 Volume
	Mvbycsrc         string `protobuf:"bytes,5,opt,name=mvbycsrc,proto3" json:"mvbycsrc,omitempty"`                                            /// 总市值 MVBYCSRC
	TotalShare       string `protobuf:"bytes,6,opt,name=total_share,json=totalShare,proto3" json:"total_share,omitempty"`                      // 总股本 TOTALSHARE
	LiqShare         string `protobuf:"bytes,7,opt,name=liq_share,json=liqShare,proto3" json:"liq_share,omitempty"`                            // 流通股本 LIQSHARE
	ListedMvbycsrc   string `protobuf:"bytes,8,opt,name=listed_mvbycsrc,json=listedMvbycsrc,proto3" json:"listed_mvbycsrc,omitempty"`          // 上市市值
	DifferRangey     string `protobuf:"bytes,9,opt,name=differ_rangey,json=differRangey,proto3" json:"differ_rangey,omitempty"`                // 年内涨跌幅 DifferRangeY
	Pettm            string `protobuf:"bytes,10,opt,name=pettm,proto3" json:"pettm,omitempty"`                                                 // PE (TTM) PETTM
	Epsttm           string `protobuf:"bytes,11,opt,name=epsttm,proto3" json:"epsttm,omitempty"`                                               // EPS (TTM) EPSTTM
	Psttm            string `protobuf:"bytes,12,opt,name=psttm,proto3" json:"psttm,omitempty"`                                                 // PS (TTM) PSTTM
	Pbmrqn           string `protobuf:"bytes,13,opt,name=pbmrqn,proto3" json:"pbmrqn,omitempty"`                                               // PB (MRQ) PBMRQN
	DividendYieldNew string `protobuf:"bytes,14,opt,name=dividend_yield_new,json=dividendYieldNew,proto3" json:"dividend_yield_new,omitempty"` // 股息率 DIVIDENDYIELDNEW
	DividendRate     string `protobuf:"bytes,15,opt,name=dividend_rate,json=dividendRate,proto3" json:"dividend_rate,omitempty"`               // 分红率
}

func (x *IndicatorsCh) Reset() {
	*x = IndicatorsCh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorsCh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorsCh) ProtoMessage() {}

func (x *IndicatorsCh) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorsCh.ProtoReflect.Descriptor instead.
func (*IndicatorsCh) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{7}
}

func (x *IndicatorsCh) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

func (x *IndicatorsCh) GetDifferRange() string {
	if x != nil {
		return x.DifferRange
	}
	return ""
}

func (x *IndicatorsCh) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *IndicatorsCh) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *IndicatorsCh) GetMvbycsrc() string {
	if x != nil {
		return x.Mvbycsrc
	}
	return ""
}

func (x *IndicatorsCh) GetTotalShare() string {
	if x != nil {
		return x.TotalShare
	}
	return ""
}

func (x *IndicatorsCh) GetLiqShare() string {
	if x != nil {
		return x.LiqShare
	}
	return ""
}

func (x *IndicatorsCh) GetListedMvbycsrc() string {
	if x != nil {
		return x.ListedMvbycsrc
	}
	return ""
}

func (x *IndicatorsCh) GetDifferRangey() string {
	if x != nil {
		return x.DifferRangey
	}
	return ""
}

func (x *IndicatorsCh) GetPettm() string {
	if x != nil {
		return x.Pettm
	}
	return ""
}

func (x *IndicatorsCh) GetEpsttm() string {
	if x != nil {
		return x.Epsttm
	}
	return ""
}

func (x *IndicatorsCh) GetPsttm() string {
	if x != nil {
		return x.Psttm
	}
	return ""
}

func (x *IndicatorsCh) GetPbmrqn() string {
	if x != nil {
		return x.Pbmrqn
	}
	return ""
}

func (x *IndicatorsCh) GetDividendYieldNew() string {
	if x != nil {
		return x.DividendYieldNew
	}
	return ""
}

func (x *IndicatorsCh) GetDividendRate() string {
	if x != nil {
		return x.DividendRate
	}
	return ""
}

type GetShareholdersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetShareholdersReq) Reset() {
	*x = GetShareholdersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersReq) ProtoMessage() {}

func (x *GetShareholdersReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersReq.ProtoReflect.Descriptor instead.
func (*GetShareholdersReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{8}
}

func (x *GetShareholdersReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetShareholdersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetShareholdersChart `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetShareholdersInfo  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 股东数据
	CompanyName string                  `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *GetShareholdersRsp) Reset() {
	*x = GetShareholdersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersRsp) ProtoMessage() {}

func (x *GetShareholdersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersRsp.ProtoReflect.Descriptor instead.
func (*GetShareholdersRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{9}
}

func (x *GetShareholdersRsp) GetCharts() []*GetShareholdersChart {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *GetShareholdersRsp) GetList() []*GetShareholdersInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShareholdersRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetShareholdersChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // id
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetShareholdersChart) Reset() {
	*x = GetShareholdersChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersChart) ProtoMessage() {}

func (x *GetShareholdersChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersChart.ProtoReflect.Descriptor instead.
func (*GetShareholdersChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{10}
}

func (x *GetShareholdersChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetShareholdersChart) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetShareholdersInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldName      string  `protobuf:"bytes,1,opt,name=hold_name,json=holdName,proto3" json:"hold_name,omitempty"`                    // 股东名称 HOLDNAME
	HoldAmt       string  `protobuf:"bytes,2,opt,name=hold_amt,json=holdAmt,proto3" json:"hold_amt,omitempty"`                       // 持股数量 HOLDAMT
	HoldAmtUnit   uint32  `protobuf:"varint,3,opt,name=hold_amt_unit,json=holdAmtUnit,proto3" json:"hold_amt_unit,omitempty"`        // 持股数量单位  0=不设置 1=万 2=亿
	HoldPct       string  `protobuf:"bytes,4,opt,name=hold_pct,json=holdPct,proto3" json:"hold_pct,omitempty"`                       // 持股比例 HOLDPCT
	Reference     uint64  `protobuf:"varint,5,opt,name=reference,proto3" json:"reference,omitempty"`                                 // 期末参考值
	HoldChange    string  `protobuf:"bytes,6,opt,name=hold_change,json=holdChange,proto3" json:"hold_change,omitempty"`              // 较上期持股变动数 HOLDCHANGE
	ChangeType    uint32  `protobuf:"varint,7,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`             // 1= 新增 2=减少 3=不变
	Direction     string  `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`                                  // 变动方向 DIRECTION
	HoldChangePct float64 `protobuf:"fixed64,9,opt,name=hold_change_pct,json=holdChangePct,proto3" json:"hold_change_pct,omitempty"` // 持股比例变动
}

func (x *GetShareholdersInfo) Reset() {
	*x = GetShareholdersInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareholdersInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareholdersInfo) ProtoMessage() {}

func (x *GetShareholdersInfo) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareholdersInfo.ProtoReflect.Descriptor instead.
func (*GetShareholdersInfo) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{11}
}

func (x *GetShareholdersInfo) GetHoldName() string {
	if x != nil {
		return x.HoldName
	}
	return ""
}

func (x *GetShareholdersInfo) GetHoldAmt() string {
	if x != nil {
		return x.HoldAmt
	}
	return ""
}

func (x *GetShareholdersInfo) GetHoldAmtUnit() uint32 {
	if x != nil {
		return x.HoldAmtUnit
	}
	return 0
}

func (x *GetShareholdersInfo) GetHoldPct() string {
	if x != nil {
		return x.HoldPct
	}
	return ""
}

func (x *GetShareholdersInfo) GetReference() uint64 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *GetShareholdersInfo) GetHoldChange() string {
	if x != nil {
		return x.HoldChange
	}
	return ""
}

func (x *GetShareholdersInfo) GetChangeType() uint32 {
	if x != nil {
		return x.ChangeType
	}
	return 0
}

func (x *GetShareholdersInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *GetShareholdersInfo) GetHoldChangePct() float64 {
	if x != nil {
		return x.HoldChangePct
	}
	return 0
}

type GetExecutivesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 公司code 例如00030.SZ
}

func (x *GetExecutivesReq) Reset() {
	*x = GetExecutivesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutivesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutivesReq) ProtoMessage() {}

func (x *GetExecutivesReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutivesReq.ProtoReflect.Descriptor instead.
func (*GetExecutivesReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{12}
}

func (x *GetExecutivesReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetExecutivesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List        []*ExecutivesData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                                  // 高层信息
	CompanyName string            `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *GetExecutivesRsp) Reset() {
	*x = GetExecutivesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExecutivesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExecutivesRsp) ProtoMessage() {}

func (x *GetExecutivesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExecutivesRsp.ProtoReflect.Descriptor instead.
func (*GetExecutivesRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{13}
}

func (x *GetExecutivesRsp) GetList() []*ExecutivesData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetExecutivesRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

// 高层信息
type ExecutivesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // 名字
	Position    string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`                             // 职务
	Age         uint32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`                                      // 年龄
	Gender      uint32 `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`                                // 性别 1=男 2=女
	Edu         string `protobuf:"bytes,5,opt,name=edu,proto3" json:"edu,omitempty"`                                       // 学历
	Pmt         string `protobuf:"bytes,6,opt,name=pmt,proto3" json:"pmt,omitempty"`                                       // 酬薪 留空则表示未知
	PmtUnit     uint32 `protobuf:"varint,7,opt,name=pmt_unit,json=pmtUnit,proto3" json:"pmt_unit,omitempty"`               // 酬薪单位 0=不设置 1=万 2=亿
	HoldAmt     string `protobuf:"bytes,8,opt,name=hold_amt,json=holdAmt,proto3" json:"hold_amt,omitempty"`                // 持股数量  留空则表示未知
	HoldAmtUnit uint32 `protobuf:"varint,9,opt,name=hold_amt_unit,json=holdAmtUnit,proto3" json:"hold_amt_unit,omitempty"` // 持股数量单位  0=不设置 1=万 2=亿
	HoldPct     string `protobuf:"bytes,10,opt,name=hold_pct,json=holdPct,proto3" json:"hold_pct,omitempty"`               // 持股比例
	Resume      string `protobuf:"bytes,11,opt,name=resume,proto3" json:"resume,omitempty"`                                // 个人简历
}

func (x *ExecutivesData) Reset() {
	*x = ExecutivesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutivesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutivesData) ProtoMessage() {}

func (x *ExecutivesData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutivesData.ProtoReflect.Descriptor instead.
func (*ExecutivesData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutivesData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutivesData) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *ExecutivesData) GetAge() uint32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ExecutivesData) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ExecutivesData) GetEdu() string {
	if x != nil {
		return x.Edu
	}
	return ""
}

func (x *ExecutivesData) GetPmt() string {
	if x != nil {
		return x.Pmt
	}
	return ""
}

func (x *ExecutivesData) GetPmtUnit() uint32 {
	if x != nil {
		return x.PmtUnit
	}
	return 0
}

func (x *ExecutivesData) GetHoldAmt() string {
	if x != nil {
		return x.HoldAmt
	}
	return ""
}

func (x *ExecutivesData) GetHoldAmtUnit() uint32 {
	if x != nil {
		return x.HoldAmtUnit
	}
	return 0
}

func (x *ExecutivesData) GetHoldPct() string {
	if x != nil {
		return x.HoldPct
	}
	return ""
}

func (x *ExecutivesData) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type GetStaffInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"` // 3=近三年 5=近五年 10=近十年  999=上市以来
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`    // 公司code 例如00030.SZ
}

func (x *GetStaffInfoReq) Reset() {
	*x = GetStaffInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoReq) ProtoMessage() {}

func (x *GetStaffInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoReq.ProtoReflect.Descriptor instead.
func (*GetStaffInfoReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{15}
}

func (x *GetStaffInfoReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetStaffInfoReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetStaffInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobCharts   []*GetStaffInfoChartList `protobuf:"bytes,1,rep,name=job_charts,json=jobCharts,proto3" json:"job_charts,omitempty"`       // 饼状图
	EduCharts   []*GetStaffInfoChartList `protobuf:"bytes,2,rep,name=edu_charts,json=eduCharts,proto3" json:"edu_charts,omitempty"`       // 饼状图
	JobList     []*GetStaffInfoData      `protobuf:"bytes,3,rep,name=job_list,json=jobList,proto3" json:"job_list,omitempty"`             // 专业构成
	EduList     []*GetStaffInfoData      `protobuf:"bytes,4,rep,name=edu_list,json=eduList,proto3" json:"edu_list,omitempty"`             // 学历构成
	CompanyName string                   `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *GetStaffInfoRsp) Reset() {
	*x = GetStaffInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoRsp) ProtoMessage() {}

func (x *GetStaffInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoRsp.ProtoReflect.Descriptor instead.
func (*GetStaffInfoRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{16}
}

func (x *GetStaffInfoRsp) GetJobCharts() []*GetStaffInfoChartList {
	if x != nil {
		return x.JobCharts
	}
	return nil
}

func (x *GetStaffInfoRsp) GetEduCharts() []*GetStaffInfoChartList {
	if x != nil {
		return x.EduCharts
	}
	return nil
}

func (x *GetStaffInfoRsp) GetJobList() []*GetStaffInfoData {
	if x != nil {
		return x.JobList
	}
	return nil
}

func (x *GetStaffInfoRsp) GetEduList() []*GetStaffInfoData {
	if x != nil {
		return x.EduList
	}
	return nil
}

func (x *GetStaffInfoRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetStaffInfoChartList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year uint32               `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"` // 年份
	List []*GetStaffInfoChart `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`  // 列表
}

func (x *GetStaffInfoChartList) Reset() {
	*x = GetStaffInfoChartList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoChartList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoChartList) ProtoMessage() {}

func (x *GetStaffInfoChartList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoChartList.ProtoReflect.Descriptor instead.
func (*GetStaffInfoChartList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{17}
}

func (x *GetStaffInfoChartList) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetStaffInfoChartList) GetList() []*GetStaffInfoChart {
	if x != nil {
		return x.List
	}
	return nil
}

type GetStaffInfoChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`        // id
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetStaffInfoChart) Reset() {
	*x = GetStaffInfoChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoChart) ProtoMessage() {}

func (x *GetStaffInfoChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoChart.ProtoReflect.Descriptor instead.
func (*GetStaffInfoChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{18}
}

func (x *GetStaffInfoChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetStaffInfoChart) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetStaffInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year uint32            `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"` // 年份
	List []*CommonListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetStaffInfoData) Reset() {
	*x = GetStaffInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffInfoData) ProtoMessage() {}

func (x *GetStaffInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffInfoData.ProtoReflect.Descriptor instead.
func (*GetStaffInfoData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{19}
}

func (x *GetStaffInfoData) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetStaffInfoData) GetList() []*CommonListData {
	if x != nil {
		return x.List
	}
	return nil
}

type StaffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeNum   string `protobuf:"bytes,1,opt,name=employee_num,json=employeeNum,proto3" json:"employee_num,omitempty"`       // 职工总数 EMPLOYEENUM
	ProducerNum   string `protobuf:"bytes,2,opt,name=producer_num,json=producerNum,proto3" json:"producer_num,omitempty"`       // 生产人员 PRODUCERNUM
	SalesmanNum   string `protobuf:"bytes,3,opt,name=salesman_num,json=salesmanNum,proto3" json:"salesman_num,omitempty"`       // 销售人员 SALESMANNUM
	FinancialNum  string `protobuf:"bytes,4,opt,name=financial_num,json=financialNum,proto3" json:"financial_num,omitempty"`    // 财务人员 FINANCIALNUM
	TechnicianNum string `protobuf:"bytes,5,opt,name=technician_num,json=technicianNum,proto3" json:"technician_num,omitempty"` // 技术人员 TECHNICIANNUM
	RanddNum      string `protobuf:"bytes,6,opt,name=randd_num,json=randdNum,proto3" json:"randd_num,omitempty"`                // 研发人员 RANDDNUM
	AdministraNum string `protobuf:"bytes,7,opt,name=administra_num,json=administraNum,proto3" json:"administra_num,omitempty"` // 行政管理人员 ADMINISTRANUM
	RetireNum     string `protobuf:"bytes,8,opt,name=retire_num,json=retireNum,proto3" json:"retire_num,omitempty"`             // 退休人员
	OtherNum      string `protobuf:"bytes,9,opt,name=other_num,json=otherNum,proto3" json:"other_num,omitempty"`                // 其他人员
	Edu_1         string `protobuf:"bytes,10,opt,name=edu_1,json=edu1,proto3" json:"edu_1,omitempty"`                           //  博士 level_1
	Edu_2         string `protobuf:"bytes,11,opt,name=edu_2,json=edu2,proto3" json:"edu_2,omitempty"`                           // 硕士 level_2
	Edu_3         string `protobuf:"bytes,12,opt,name=edu_3,json=edu3,proto3" json:"edu_3,omitempty"`                           // 本科  level_3
	Edu_4         string `protobuf:"bytes,13,opt,name=edu_4,json=edu4,proto3" json:"edu_4,omitempty"`                           // 大专 level_4
	Edu_5         string `protobuf:"bytes,14,opt,name=edu_5,json=edu5,proto3" json:"edu_5,omitempty"`                           // 大专以下 level_5
}

func (x *StaffData) Reset() {
	*x = StaffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffData) ProtoMessage() {}

func (x *StaffData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffData.ProtoReflect.Descriptor instead.
func (*StaffData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{20}
}

func (x *StaffData) GetEmployeeNum() string {
	if x != nil {
		return x.EmployeeNum
	}
	return ""
}

func (x *StaffData) GetProducerNum() string {
	if x != nil {
		return x.ProducerNum
	}
	return ""
}

func (x *StaffData) GetSalesmanNum() string {
	if x != nil {
		return x.SalesmanNum
	}
	return ""
}

func (x *StaffData) GetFinancialNum() string {
	if x != nil {
		return x.FinancialNum
	}
	return ""
}

func (x *StaffData) GetTechnicianNum() string {
	if x != nil {
		return x.TechnicianNum
	}
	return ""
}

func (x *StaffData) GetRanddNum() string {
	if x != nil {
		return x.RanddNum
	}
	return ""
}

func (x *StaffData) GetAdministraNum() string {
	if x != nil {
		return x.AdministraNum
	}
	return ""
}

func (x *StaffData) GetRetireNum() string {
	if x != nil {
		return x.RetireNum
	}
	return ""
}

func (x *StaffData) GetOtherNum() string {
	if x != nil {
		return x.OtherNum
	}
	return ""
}

func (x *StaffData) GetEdu_1() string {
	if x != nil {
		return x.Edu_1
	}
	return ""
}

func (x *StaffData) GetEdu_2() string {
	if x != nil {
		return x.Edu_2
	}
	return ""
}

func (x *StaffData) GetEdu_3() string {
	if x != nil {
		return x.Edu_3
	}
	return ""
}

func (x *StaffData) GetEdu_4() string {
	if x != nil {
		return x.Edu_4
	}
	return ""
}

func (x *StaffData) GetEdu_5() string {
	if x != nil {
		return x.Edu_5
	}
	return ""
}

type GetMBRevenueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype  uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"`   // 3=近三年 5=近五年 10=近十年  999=上市以来
	Mbtype uint32 `protobuf:"varint,2,opt,name=mbtype,proto3" json:"mbtype,omitempty"` // 类型 1=行业 2=产品 3=地区
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`      // 公司code 例如00030.SZ
	Unit   uint32 `protobuf:"varint,4,opt,name=unit,proto3" json:"unit,omitempty"`     // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetMBRevenueReq) Reset() {
	*x = GetMBRevenueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueReq) ProtoMessage() {}

func (x *GetMBRevenueReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueReq.ProtoReflect.Descriptor instead.
func (*GetMBRevenueReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{21}
}

func (x *GetMBRevenueReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetMBRevenueReq) GetMbtype() uint32 {
	if x != nil {
		return x.Mbtype
	}
	return 0
}

func (x *GetMBRevenueReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetMBRevenueReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetMBRevenueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetMBRevenueCharts `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetMBRevenueList   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string                `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *GetMBRevenueRsp) Reset() {
	*x = GetMBRevenueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueRsp) ProtoMessage() {}

func (x *GetMBRevenueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueRsp.ProtoReflect.Descriptor instead.
func (*GetMBRevenueRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{22}
}

func (x *GetMBRevenueRsp) GetCharts() []*GetMBRevenueCharts {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *GetMBRevenueRsp) GetList() []*GetMBRevenueList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMBRevenueRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetMBRevenueCharts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year    string  `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`         // 年份
	Service string  `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`   // 业务
	Revenue float64 `protobuf:"fixed64,3,opt,name=revenue,proto3" json:"revenue,omitempty"` // 营收
}

func (x *GetMBRevenueCharts) Reset() {
	*x = GetMBRevenueCharts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueCharts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueCharts) ProtoMessage() {}

func (x *GetMBRevenueCharts) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueCharts.ProtoReflect.Descriptor instead.
func (*GetMBRevenueCharts) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{23}
}

func (x *GetMBRevenueCharts) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *GetMBRevenueCharts) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetMBRevenueCharts) GetRevenue() float64 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

type GetMBRevenueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       uint32              `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`                              // 年
	ColumnList []*GetMBRevenueData `protobuf:"bytes,2,rep,name=column_list,json=columnList,proto3" json:"column_list,omitempty"` // 栏目
}

func (x *GetMBRevenueList) Reset() {
	*x = GetMBRevenueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueList) ProtoMessage() {}

func (x *GetMBRevenueList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueList.ProtoReflect.Descriptor instead.
func (*GetMBRevenueList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{24}
}

func (x *GetMBRevenueList) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetMBRevenueList) GetColumnList() []*GetMBRevenueData {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

type GetMBRevenueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // 栏目名
	ItemList []*CommonListData `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"` // 明细
}

func (x *GetMBRevenueData) Reset() {
	*x = GetMBRevenueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMBRevenueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMBRevenueData) ProtoMessage() {}

func (x *GetMBRevenueData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMBRevenueData.ProtoReflect.Descriptor instead.
func (*GetMBRevenueData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{25}
}

func (x *GetMBRevenueData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMBRevenueData) GetItemList() []*CommonListData {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type GetFinancialReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype uint32 `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty"` // 3=近三年 5=近五年 10=近十年  999=上市以来
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`    // 公司code 例如00030.SZ
	Unit  uint32 `protobuf:"varint,3,opt,name=unit,proto3" json:"unit,omitempty"`   // 单位 0=元 1=千元 2=万元 3=百万元 4=亿元 5=十亿元
}

func (x *GetFinancialReq) Reset() {
	*x = GetFinancialReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialReq) ProtoMessage() {}

func (x *GetFinancialReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialReq.ProtoReflect.Descriptor instead.
func (*GetFinancialReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{26}
}

func (x *GetFinancialReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *GetFinancialReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetFinancialReq) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

type GetFinancialRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charts      []*GetFinancialChartsList `protobuf:"bytes,1,rep,name=charts,proto3" json:"charts,omitempty"`                              // 饼状图
	List        []*GetFinancialList       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`                                  // 列表数据
	CompanyName string                    `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"` // 公司名字
}

func (x *GetFinancialRsp) Reset() {
	*x = GetFinancialRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialRsp) ProtoMessage() {}

func (x *GetFinancialRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialRsp.ProtoReflect.Descriptor instead.
func (*GetFinancialRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{27}
}

func (x *GetFinancialRsp) GetCharts() []*GetFinancialChartsList {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *GetFinancialRsp) GetList() []*GetFinancialList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFinancialRsp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type GetFinancialChartsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 名称
	List []*GetFinancialChart `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` // 柱状图列表
}

func (x *GetFinancialChartsList) Reset() {
	*x = GetFinancialChartsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialChartsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialChartsList) ProtoMessage() {}

func (x *GetFinancialChartsList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialChartsList.ProtoReflect.Descriptor instead.
func (*GetFinancialChartsList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{28}
}

func (x *GetFinancialChartsList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetFinancialChartsList) GetList() []*GetFinancialChart {
	if x != nil {
		return x.List
	}
	return nil
}

type GetFinancialChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // id
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *GetFinancialChart) Reset() {
	*x = GetFinancialChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialChart) ProtoMessage() {}

func (x *GetFinancialChart) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialChart.ProtoReflect.Descriptor instead.
func (*GetFinancialChart) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{29}
}

func (x *GetFinancialChart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFinancialChart) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetFinancialList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       string              `protobuf:"bytes,1,opt,name=year,proto3" json:"year,omitempty"`                               // 年
	ColumnList []*GetMBRevenueData `protobuf:"bytes,2,rep,name=column_list,json=columnList,proto3" json:"column_list,omitempty"` // 栏目
}

func (x *GetFinancialList) Reset() {
	*x = GetFinancialList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialList) ProtoMessage() {}

func (x *GetFinancialList) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialList.ProtoReflect.Descriptor instead.
func (*GetFinancialList) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{30}
}

func (x *GetFinancialList) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *GetFinancialList) GetColumnList() []*GetMBRevenueData {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

type GetFinancialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // 栏目名
	ItemList []*CommonListData `protobuf:"bytes,2,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"` // 明细
}

func (x *GetFinancialData) Reset() {
	*x = GetFinancialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialData) ProtoMessage() {}

func (x *GetFinancialData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialData.ProtoReflect.Descriptor instead.
func (*GetFinancialData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{31}
}

func (x *GetFinancialData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetFinancialData) GetItemList() []*CommonListData {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type Financial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Financial) Reset() {
	*x = Financial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Financial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Financial) ProtoMessage() {}

func (x *Financial) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Financial.ProtoReflect.Descriptor instead.
func (*Financial) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{32}
}

type SearchCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // 关键字
}

func (x *SearchCompanyReq) Reset() {
	*x = SearchCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCompanyReq) ProtoMessage() {}

func (x *SearchCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCompanyReq.ProtoReflect.Descriptor instead.
func (*SearchCompanyReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{33}
}

func (x *SearchCompanyReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SearchCompanyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CompanyData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchCompanyRsp) Reset() {
	*x = SearchCompanyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCompanyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCompanyRsp) ProtoMessage() {}

func (x *SearchCompanyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCompanyRsp.ProtoReflect.Descriptor instead.
func (*SearchCompanyRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{34}
}

func (x *SearchCompanyRsp) GetList() []*CompanyData {
	if x != nil {
		return x.List
	}
	return nil
}

type CompanyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CompanyName        string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	EnglishName        string `protobuf:"bytes,3,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	Abbreviation       string `protobuf:"bytes,4,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	Symbol             string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PinyinAbbreviation string `protobuf:"bytes,6,opt,name=pinyin_abbreviation,json=pinyinAbbreviation,proto3" json:"pinyin_abbreviation,omitempty"`
}

func (x *CompanyData) Reset() {
	*x = CompanyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyData) ProtoMessage() {}

func (x *CompanyData) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyData.ProtoReflect.Descriptor instead.
func (*CompanyData) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{35}
}

func (x *CompanyData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CompanyData) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyData) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *CompanyData) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *CompanyData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CompanyData) GetPinyinAbbreviation() string {
	if x != nil {
		return x.PinyinAbbreviation
	}
	return ""
}

type SearchPublicReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CompanyName    string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	ReportType     string `protobuf:"bytes,3,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	Past           int32  `protobuf:"varint,4,opt,name=past,proto3" json:"past,omitempty"`
	Since          string `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`
	Till           string `protobuf:"bytes,6,opt,name=till,proto3" json:"till,omitempty"`
	Size           int32  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	ReturnFulltext bool   `protobuf:"varint,8,opt,name=return_fulltext,json=returnFulltext,proto3" json:"return_fulltext,omitempty"`
}

func (x *SearchPublicReportReq) Reset() {
	*x = SearchPublicReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPublicReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPublicReportReq) ProtoMessage() {}

func (x *SearchPublicReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPublicReportReq.ProtoReflect.Descriptor instead.
func (*SearchPublicReportReq) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{36}
}

func (x *SearchPublicReportReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SearchPublicReportReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *SearchPublicReportReq) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *SearchPublicReportReq) GetPast() int32 {
	if x != nil {
		return x.Past
	}
	return 0
}

func (x *SearchPublicReportReq) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *SearchPublicReportReq) GetTill() string {
	if x != nil {
		return x.Till
	}
	return ""
}

func (x *SearchPublicReportReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchPublicReportReq) GetReturnFulltext() bool {
	if x != nil {
		return x.ReturnFulltext
	}
	return false
}

type SearchPublicReportRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PublicReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchPublicReportRsp) Reset() {
	*x = SearchPublicReportRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPublicReportRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPublicReportRsp) ProtoMessage() {}

func (x *SearchPublicReportRsp) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPublicReportRsp.ProtoReflect.Descriptor instead.
func (*SearchPublicReportRsp) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{37}
}

func (x *SearchPublicReportRsp) GetList() []*PublicReport {
	if x != nil {
		return x.List
	}
	return nil
}

type PublicReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Abbreviation string `protobuf:"bytes,2,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	FileName     string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileType     string `protobuf:"bytes,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	S3Path       string `protobuf:"bytes,5,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`
	FileHash     string `protobuf:"bytes,6,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	Description  string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ReportType   string `protobuf:"bytes,8,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	ReleaseDate  string `protobuf:"bytes,9,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Year         int32  `protobuf:"varint,10,opt,name=year,proto3" json:"year,omitempty"`
	Quarter      int32  `protobuf:"varint,11,opt,name=quarter,proto3" json:"quarter,omitempty"`
	CompanyCode  string `protobuf:"bytes,12,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`
	CompanyName  string `protobuf:"bytes,13,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	FilePath     string `protobuf:"bytes,14,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	UpdateDate   string `protobuf:"bytes,15,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
}

func (x *PublicReport) Reset() {
	*x = PublicReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_search_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicReport) ProtoMessage() {}

func (x *PublicReport) ProtoReflect() protoreflect.Message {
	mi := &file_search_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicReport.ProtoReflect.Descriptor instead.
func (*PublicReport) Descriptor() ([]byte, []int) {
	return file_search_proto_rawDescGZIP(), []int{38}
}

func (x *PublicReport) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PublicReport) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *PublicReport) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PublicReport) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *PublicReport) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

func (x *PublicReport) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *PublicReport) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicReport) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *PublicReport) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *PublicReport) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PublicReport) GetQuarter() int32 {
	if x != nil {
		return x.Quarter
	}
	return 0
}

func (x *PublicReport) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *PublicReport) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *PublicReport) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *PublicReport) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

var File_search_proto protoreflect.FileDescriptor

var file_search_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68,
	0x52, 0x06, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x07, 0x68, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x4b, 0x52, 0x06,
	0x68, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x69, 0x63, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x4b, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xce, 0x03, 0x0a,
	0x0c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x76, 0x62, 0x79, 0x63, 0x73,
	0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x76, 0x62, 0x79, 0x63, 0x73,
	0x72, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x71, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x76, 0x62, 0x79, 0x63,
	0x73, 0x72, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x76, 0x62, 0x79, 0x63, 0x73, 0x72, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x65, 0x74, 0x74, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x65, 0x74, 0x74, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x70, 0x73, 0x74, 0x74, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x70, 0x73, 0x74, 0x74, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x73, 0x74, 0x74, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x73, 0x74,
	0x74, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x62, 0x6d, 0x72, 0x71, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x62, 0x6d, 0x72, 0x71, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x28, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x42,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x61, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x6d, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x63, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x64, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x64, 0x75, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6d,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6d, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6d, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x61, 0x6d, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12,
	0x4a, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x6a, 0x6f, 0x62, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x65,
	0x64, 0x75, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x65, 0x64,
	0x75, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x64,
	0x75, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x64, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x3b, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x38, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x6d, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x4e, 0x75, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x64,
	0x75, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x75, 0x31, 0x12,
	0x13, 0x0a, 0x05, 0x65, 0x64, 0x75, 0x5f, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x64, 0x75, 0x32, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x64, 0x75, 0x5f, 0x33, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x75, 0x33, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x64, 0x75,
	0x5f, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x75, 0x34, 0x12, 0x13,
	0x0a, 0x05, 0x65, 0x64, 0x75, 0x5f, 0x35, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x64, 0x75, 0x35, 0x22, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xb2, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x5c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22,
	0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xb6, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x73, 0x70,
	0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x0b, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x49, 0x0a, 0x10, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70,
	0x69, 0x6e, 0x79, 0x69, 0x6e, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e,
	0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a,
	0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x33, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x33, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x2a, 0x5e, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x4b, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x53, 0x10, 0x03, 0x32, 0x87, 0x07, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73,
	0x70, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x73, 0x70, 0x12, 0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d,
	0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x42, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x52, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x73, 0x70, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_search_proto_rawDescOnce sync.Once
	file_search_proto_rawDescData = file_search_proto_rawDesc
)

func file_search_proto_rawDescGZIP() []byte {
	file_search_proto_rawDescOnce.Do(func() {
		file_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_search_proto_rawDescData)
	})
	return file_search_proto_rawDescData
}

var file_search_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_search_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_search_proto_goTypes = []interface{}{
	(CompanyType)(0),               // 0: chatfinbot.search.v1.CompanyType
	(*GetCompanyInfoReq)(nil),      // 1: chatfinbot.search.v1.GetCompanyInfoReq
	(*GetCompanyInfoRsp)(nil),      // 2: chatfinbot.search.v1.GetCompanyInfoRsp
	(*CompanyInfoCh)(nil),          // 3: chatfinbot.search.v1.CompanyInfoCh
	(*CompanyInfoHK)(nil),          // 4: chatfinbot.search.v1.CompanyInfoHK
	(*GetIndicatorsReq)(nil),       // 5: chatfinbot.search.v1.GetIndicatorsReq
	(*GetIndicatorsRsp)(nil),       // 6: chatfinbot.search.v1.GetIndicatorsRsp
	(*CommonListData)(nil),         // 7: chatfinbot.search.v1.CommonListData
	(*IndicatorsCh)(nil),           // 8: chatfinbot.search.v1.IndicatorsCh
	(*GetShareholdersReq)(nil),     // 9: chatfinbot.search.v1.GetShareholdersReq
	(*GetShareholdersRsp)(nil),     // 10: chatfinbot.search.v1.GetShareholdersRsp
	(*GetShareholdersChart)(nil),   // 11: chatfinbot.search.v1.GetShareholdersChart
	(*GetShareholdersInfo)(nil),    // 12: chatfinbot.search.v1.GetShareholdersInfo
	(*GetExecutivesReq)(nil),       // 13: chatfinbot.search.v1.GetExecutivesReq
	(*GetExecutivesRsp)(nil),       // 14: chatfinbot.search.v1.GetExecutivesRsp
	(*ExecutivesData)(nil),         // 15: chatfinbot.search.v1.ExecutivesData
	(*GetStaffInfoReq)(nil),        // 16: chatfinbot.search.v1.GetStaffInfoReq
	(*GetStaffInfoRsp)(nil),        // 17: chatfinbot.search.v1.GetStaffInfoRsp
	(*GetStaffInfoChartList)(nil),  // 18: chatfinbot.search.v1.GetStaffInfoChartList
	(*GetStaffInfoChart)(nil),      // 19: chatfinbot.search.v1.GetStaffInfoChart
	(*GetStaffInfoData)(nil),       // 20: chatfinbot.search.v1.GetStaffInfoData
	(*StaffData)(nil),              // 21: chatfinbot.search.v1.StaffData
	(*GetMBRevenueReq)(nil),        // 22: chatfinbot.search.v1.GetMBRevenueReq
	(*GetMBRevenueRsp)(nil),        // 23: chatfinbot.search.v1.GetMBRevenueRsp
	(*GetMBRevenueCharts)(nil),     // 24: chatfinbot.search.v1.GetMBRevenueCharts
	(*GetMBRevenueList)(nil),       // 25: chatfinbot.search.v1.GetMBRevenueList
	(*GetMBRevenueData)(nil),       // 26: chatfinbot.search.v1.GetMBRevenueData
	(*GetFinancialReq)(nil),        // 27: chatfinbot.search.v1.GetFinancialReq
	(*GetFinancialRsp)(nil),        // 28: chatfinbot.search.v1.GetFinancialRsp
	(*GetFinancialChartsList)(nil), // 29: chatfinbot.search.v1.GetFinancialChartsList
	(*GetFinancialChart)(nil),      // 30: chatfinbot.search.v1.GetFinancialChart
	(*GetFinancialList)(nil),       // 31: chatfinbot.search.v1.GetFinancialList
	(*GetFinancialData)(nil),       // 32: chatfinbot.search.v1.GetFinancialData
	(*Financial)(nil),              // 33: chatfinbot.search.v1.Financial
	(*SearchCompanyReq)(nil),       // 34: chatfinbot.search.v1.SearchCompanyReq
	(*SearchCompanyRsp)(nil),       // 35: chatfinbot.search.v1.SearchCompanyRsp
	(*CompanyData)(nil),            // 36: chatfinbot.search.v1.CompanyData
	(*SearchPublicReportReq)(nil),  // 37: chatfinbot.search.v1.SearchPublicReportReq
	(*SearchPublicReportRsp)(nil),  // 38: chatfinbot.search.v1.SearchPublicReportRsp
	(*PublicReport)(nil),           // 39: chatfinbot.search.v1.PublicReport
}
var file_search_proto_depIdxs = []int32{
	0,  // 0: chatfinbot.search.v1.GetCompanyInfoRsp.type:type_name -> chatfinbot.search.v1.CompanyType
	3,  // 1: chatfinbot.search.v1.GetCompanyInfoRsp.ch_data:type_name -> chatfinbot.search.v1.CompanyInfoCh
	4,  // 2: chatfinbot.search.v1.GetCompanyInfoRsp.hk_data:type_name -> chatfinbot.search.v1.CompanyInfoHK
	7,  // 3: chatfinbot.search.v1.GetIndicatorsRsp.list:type_name -> chatfinbot.search.v1.CommonListData
	11, // 4: chatfinbot.search.v1.GetShareholdersRsp.charts:type_name -> chatfinbot.search.v1.GetShareholdersChart
	12, // 5: chatfinbot.search.v1.GetShareholdersRsp.list:type_name -> chatfinbot.search.v1.GetShareholdersInfo
	15, // 6: chatfinbot.search.v1.GetExecutivesRsp.list:type_name -> chatfinbot.search.v1.ExecutivesData
	18, // 7: chatfinbot.search.v1.GetStaffInfoRsp.job_charts:type_name -> chatfinbot.search.v1.GetStaffInfoChartList
	18, // 8: chatfinbot.search.v1.GetStaffInfoRsp.edu_charts:type_name -> chatfinbot.search.v1.GetStaffInfoChartList
	20, // 9: chatfinbot.search.v1.GetStaffInfoRsp.job_list:type_name -> chatfinbot.search.v1.GetStaffInfoData
	20, // 10: chatfinbot.search.v1.GetStaffInfoRsp.edu_list:type_name -> chatfinbot.search.v1.GetStaffInfoData
	19, // 11: chatfinbot.search.v1.GetStaffInfoChartList.list:type_name -> chatfinbot.search.v1.GetStaffInfoChart
	7,  // 12: chatfinbot.search.v1.GetStaffInfoData.list:type_name -> chatfinbot.search.v1.CommonListData
	24, // 13: chatfinbot.search.v1.GetMBRevenueRsp.charts:type_name -> chatfinbot.search.v1.GetMBRevenueCharts
	25, // 14: chatfinbot.search.v1.GetMBRevenueRsp.list:type_name -> chatfinbot.search.v1.GetMBRevenueList
	26, // 15: chatfinbot.search.v1.GetMBRevenueList.column_list:type_name -> chatfinbot.search.v1.GetMBRevenueData
	7,  // 16: chatfinbot.search.v1.GetMBRevenueData.item_list:type_name -> chatfinbot.search.v1.CommonListData
	29, // 17: chatfinbot.search.v1.GetFinancialRsp.charts:type_name -> chatfinbot.search.v1.GetFinancialChartsList
	31, // 18: chatfinbot.search.v1.GetFinancialRsp.list:type_name -> chatfinbot.search.v1.GetFinancialList
	30, // 19: chatfinbot.search.v1.GetFinancialChartsList.list:type_name -> chatfinbot.search.v1.GetFinancialChart
	26, // 20: chatfinbot.search.v1.GetFinancialList.column_list:type_name -> chatfinbot.search.v1.GetMBRevenueData
	7,  // 21: chatfinbot.search.v1.GetFinancialData.item_list:type_name -> chatfinbot.search.v1.CommonListData
	36, // 22: chatfinbot.search.v1.SearchCompanyRsp.list:type_name -> chatfinbot.search.v1.CompanyData
	39, // 23: chatfinbot.search.v1.SearchPublicReportRsp.list:type_name -> chatfinbot.search.v1.PublicReport
	1,  // 24: chatfinbot.search.v1.SearchService.GetCompanyInfo:input_type -> chatfinbot.search.v1.GetCompanyInfoReq
	5,  // 25: chatfinbot.search.v1.SearchService.GetIndicators:input_type -> chatfinbot.search.v1.GetIndicatorsReq
	9,  // 26: chatfinbot.search.v1.SearchService.GetShareholders:input_type -> chatfinbot.search.v1.GetShareholdersReq
	13, // 27: chatfinbot.search.v1.SearchService.GetExecutives:input_type -> chatfinbot.search.v1.GetExecutivesReq
	16, // 28: chatfinbot.search.v1.SearchService.GetStaffInfo:input_type -> chatfinbot.search.v1.GetStaffInfoReq
	22, // 29: chatfinbot.search.v1.SearchService.GetMBRevenue:input_type -> chatfinbot.search.v1.GetMBRevenueReq
	27, // 30: chatfinbot.search.v1.SearchService.GetFinancial:input_type -> chatfinbot.search.v1.GetFinancialReq
	34, // 31: chatfinbot.search.v1.SearchService.SearchCompany:input_type -> chatfinbot.search.v1.SearchCompanyReq
	37, // 32: chatfinbot.search.v1.SearchService.SearchPublicReport:input_type -> chatfinbot.search.v1.SearchPublicReportReq
	2,  // 33: chatfinbot.search.v1.SearchService.GetCompanyInfo:output_type -> chatfinbot.search.v1.GetCompanyInfoRsp
	6,  // 34: chatfinbot.search.v1.SearchService.GetIndicators:output_type -> chatfinbot.search.v1.GetIndicatorsRsp
	10, // 35: chatfinbot.search.v1.SearchService.GetShareholders:output_type -> chatfinbot.search.v1.GetShareholdersRsp
	14, // 36: chatfinbot.search.v1.SearchService.GetExecutives:output_type -> chatfinbot.search.v1.GetExecutivesRsp
	17, // 37: chatfinbot.search.v1.SearchService.GetStaffInfo:output_type -> chatfinbot.search.v1.GetStaffInfoRsp
	23, // 38: chatfinbot.search.v1.SearchService.GetMBRevenue:output_type -> chatfinbot.search.v1.GetMBRevenueRsp
	28, // 39: chatfinbot.search.v1.SearchService.GetFinancial:output_type -> chatfinbot.search.v1.GetFinancialRsp
	35, // 40: chatfinbot.search.v1.SearchService.SearchCompany:output_type -> chatfinbot.search.v1.SearchCompanyRsp
	38, // 41: chatfinbot.search.v1.SearchService.SearchPublicReport:output_type -> chatfinbot.search.v1.SearchPublicReportRsp
	33, // [33:42] is the sub-list for method output_type
	24, // [24:33] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_search_proto_init() }
func file_search_proto_init() {
	if File_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfoCh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfoHK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndicatorsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIndicatorsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorsCh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareholdersInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutivesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExecutivesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutivesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoChartList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueCharts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMBRevenueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialChartsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Financial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCompanyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPublicReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPublicReportRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_search_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_search_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_search_proto_goTypes,
		DependencyIndexes: file_search_proto_depIdxs,
		EnumInfos:         file_search_proto_enumTypes,
		MessageInfos:      file_search_proto_msgTypes,
	}.Build()
	File_search_proto = out.File
	file_search_proto_rawDesc = nil
	file_search_proto_goTypes = nil
	file_search_proto_depIdxs = nil
}
