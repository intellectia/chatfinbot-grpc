syntax = "proto3";

package chatfinbot.news.v1;

option go_package = ".;newspb";

import "google/api/annotations.proto";

// News service definition
service NewsService {
    // Get a list of news articles
    rpc GetNewsList(GetNewsListReq) returns (GetNewsListRsp) {
        option (google.api.http) = {
            get: "/v1/news/list"
        };
    };

    // Get detailed information about a specific news article
    rpc GetNewsInfo(GetNewsInfoReq) returns (GetNewsInfoRsp) {
        option (google.api.http) = {
            get: "/v1/news/info"
        };
    };

    // Get detailed information about a specific news article
    rpc GetCacheInfo(GetCacheInfoReq) returns (GetCacheInfoRsp) {
        option (google.api.http) = {
            get: "/v1/news/cache-info"
        };
    };

    // Get a list of sentiment
    rpc GetSentimentList(GetSentimentListReq) returns (GetSentimentListRsp) {
        option (google.api.http) = {
            get: "/v1/news/sentiment"
        };
    };
}

// Request message for GetNewsList
message GetNewsListReq {
    string first_category = 1; // Primary news category
    string second_category = 2; // Secondary news category (optional)
    int32 page = 3;            // Pagination: page number
    int32 page_size = 4;        // Pagination: number of items per page
    string company_code = 5;        // Company Code (optional)
}

// Response message for GetNewsList
message GetNewsListRsp {
    int32 ret = 1;                     // Return code (0 for success, non-zero for errors)
    string msg = 2;                    // Response message or error description
    repeated NewsArticle articles = 3; // List of news articles
}

message TitleEntry {
    string text = 1;
    string lang = 2;
}

message SummaryEntry {
    int32 negative = 1;
    string summary_id = 2;
    string text = 3;
    int32 positive = 4;
    string lang = 5;
}

message Category {
    string primary_category = 1;
    string secondary_category = 2;
    string tertiary_category = 3;
    string quaternary_category = 4;
    string quinary_category = 5;
}

message CompanyInfo {
    string company_code = 1;
    string company_name_en = 2;
    string company_name_zh = 3;
}

message Image {
    string cover_image_url = 1;   // URL of the cover image
    string desc = 2;              // Description of the image
    string id = 3;                // Unique identifier for the image
    string local_path = 4;        // Local path of the image file
    repeated Subtitle subtitles = 5; // Nested subtitles field (if applicable)
    string type = 6;              // Type of the image
    string url = 7;               // URL of the image
}


message Video {
    string cover_image_url = 1;   // URL of the cover image
    string desc = 2;              // Description of the video
    string id = 3;                // Unique identifier for the video
    string local_path = 4;        // Local path of the video file
    repeated Subtitle subtitles = 5; // Nested subtitles field
    string type = 6;              // Type of the video
    string url = 7;               // URL of the video
}

message SubtitleEntry {
    int32 start = 1;
    int32 end = 2;
    string text = 3;
    string lang = 4; // Optional, if you want to support multiple languages for subtitles
}

message Audio {
    string cover_image_url = 1;   
    string desc = 2;             
    string id = 3;                
    string local_path = 4;        
    repeated Subtitle subtitles = 5; 
    string type = 6;              
    string url = 7;              
}

message Subtitle {
    int32 end = 1;             // End time of the subtitle
    string speaker = 2;        // Speaker's name or identifier
    int32 start = 3;           // Start time of the subtitle
    string text = 4;           // Subtitle text
}

message TextEntry {
    string lang = 1;
    string text = 2;
}

message FullText {
    string id = 1;       
    string lang = 2;     
    string tag = 3;      
    string text = 4;     
}


// Define the Summary message
message Summary {
    string id = 1;         // Unique identifier for the summary
    string lang = 2;       // Language of the summary
    int32 negative = 3;    // Negative sentiment score
    int32 positive = 4;    // Positive sentiment score
    string tag = 5;        // Tag or label associated with the summary
    string text = 6;       // The actual summary text
}

// Now, update the NewsArticle message
message NewsArticle {
    string doc_id = 1;                 
    repeated TextEntry title = 2;       
    string url = 4;                    
    string published_date = 5;         
    repeated CompanyInfo company_info = 7; 
    string file_type = 8;             
    Category category_info = 9; 
    repeated Image images = 10;       
    string region = 11;               
    repeated FullText full_text = 12; 
    repeated Video videos = 13;       
    repeated Audio audios = 14;
    string pdf_file_path = 15;
    string txt_file_path = 16; 
    repeated Summary summaries = 18;
    string id = 19;        
}

// Request message for GetNewsInfo
message GetNewsInfoReq {
    string doc_id = 1; // Unique identifier for the news article
}

// Response message for GetNewsInfo
message GetNewsInfoRsp {
    int32 ret = 1;            // Return code (0 for success, non-zero for errors)
    string msg = 2;           // Response message or error description
    NewsArticle article = 3;  // Detailed information about the news article
}

// Request message for GetCacheInfo
message GetCacheInfoReq {
    string cache_key = 1; // Unique identifier for the news article
}

// Response message for GetCacheInfo
message GetCacheInfoRsp {
    int32 ret = 1;            // Return code (0 for success, non-zero for errors)
    string msg = 2;           // Response message or error description
    string cache_info = 3;  // Detailed information about the cache info
}

message GetSentimentListReq {
    uint32 type = 1;  // 类型 1=大v 2=选股
    string code = 2;  // type=2时生效，公司代码
    string last_id = 3;  // 下一页把这个id传上来
    uint32 size = 4; // 分页数，最大50
}

message GetSentimentListRsp {
    int32 ret = 1;            // Return code (0 for success, non-zero for errors)
    string msg = 2;           // Response message or error description
    repeated SentimentData list = 3; // list about the sentiment
}

message SentimentData {
    string id = 1;
    SentimentContent content = 2;
    SentimentAuthor author = 3;
    SentimentVideo video = 4;
    SentimentAnimated animated = 5;
    SentimentImage image = 6;
    SentimentFeedback feedback = 7;
    SentimentTags tags = 8;
    string source = 9;
}

message SentimentContent {
    string content_id = 1;
    string content_url = 2;
    string content_date = 3;
    string raw_content = 4;
}

message SentimentAuthor {
    bool is_kol = 1;
    string author_created = 2;
    string author_description = 3;
    string author_displayname = 4;
    int32 author_favourites_count = 5;
    int32 author_followers_count = 6;
    int32 author_friends_count = 7;
    string author_id = 8;
    int32 author_listed_count = 9;
    string author_location = 10;
    int32 author_media_count = 11;
    string author_name = 12;
    string author_profile_banner_url = 13;
    string author_profile_image_url = 14;
    int32 author_statuses_count = 15;
    string author_url = 16;
}

message SentimentVideo {
    repeated string videos_pic = 1;
    repeated string videos_vid = 2;
}

message SentimentAnimated {
    repeated string animated_pic = 1;
    repeated string animated_vid = 2;
}

message SentimentImage {
    repeated string image_url = 1;
    repeated string image_id = 2;
}

message SentimentFeedback {
    int32 like_count = 1;
    int32 quote_count = 2;
    int32 reply_count = 3;
    int32 retweet_count = 4;
    int32 view_count = 5;
}

message SentimentTags {
    string ticker = 1;
    repeated string cashtags = 2;
    repeated string hashtags = 3;
}