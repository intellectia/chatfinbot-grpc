// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: news.proto

package newspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SentimentType int32

const (
	SentimentType_SentimentTypeUnknown SentimentType = 0
	SentimentType_SentimentTypeKOL     SentimentType = 1
	SentimentType_SentimentTypeTicker  SentimentType = 2
)

// Enum value maps for SentimentType.
var (
	SentimentType_name = map[int32]string{
		0: "SentimentTypeUnknown",
		1: "SentimentTypeKOL",
		2: "SentimentTypeTicker",
	}
	SentimentType_value = map[string]int32{
		"SentimentTypeUnknown": 0,
		"SentimentTypeKOL":     1,
		"SentimentTypeTicker":  2,
	}
)

func (x SentimentType) Enum() *SentimentType {
	p := new(SentimentType)
	*p = x
	return p
}

func (x SentimentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SentimentType) Descriptor() protoreflect.EnumDescriptor {
	return file_news_proto_enumTypes[0].Descriptor()
}

func (SentimentType) Type() protoreflect.EnumType {
	return &file_news_proto_enumTypes[0]
}

func (x SentimentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SentimentType.Descriptor instead.
func (SentimentType) EnumDescriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{0}
}

// Request message for GetNewsList
type GetNewsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstCategory  string `protobuf:"bytes,1,opt,name=first_category,json=firstCategory,proto3" json:"first_category,omitempty"`    // Primary news category
	SecondCategory string `protobuf:"bytes,2,opt,name=second_category,json=secondCategory,proto3" json:"second_category,omitempty"` // Secondary news category (optional)
	Page           int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                                          // Pagination: page number
	PageSize       int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // Pagination: number of items per page
	CompanyCode    string `protobuf:"bytes,5,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`          // Company Code (optional)
}

func (x *GetNewsListReq) Reset() {
	*x = GetNewsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsListReq) ProtoMessage() {}

func (x *GetNewsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsListReq.ProtoReflect.Descriptor instead.
func (*GetNewsListReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{0}
}

func (x *GetNewsListReq) GetFirstCategory() string {
	if x != nil {
		return x.FirstCategory
	}
	return ""
}

func (x *GetNewsListReq) GetSecondCategory() string {
	if x != nil {
		return x.SecondCategory
	}
	return ""
}

func (x *GetNewsListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNewsListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNewsListReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

// Response message for GetNewsList
type GetNewsListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`          // Return code (0 for success, non-zero for errors)
	Msg      string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`           // Response message or error description
	Articles []*NewsArticle `protobuf:"bytes,3,rep,name=articles,proto3" json:"articles,omitempty"` // List of news articles
}

func (x *GetNewsListRsp) Reset() {
	*x = GetNewsListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsListRsp) ProtoMessage() {}

func (x *GetNewsListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsListRsp.ProtoReflect.Descriptor instead.
func (*GetNewsListRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{1}
}

func (x *GetNewsListRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetNewsListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNewsListRsp) GetArticles() []*NewsArticle {
	if x != nil {
		return x.Articles
	}
	return nil
}

type TitleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *TitleEntry) Reset() {
	*x = TitleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleEntry) ProtoMessage() {}

func (x *TitleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleEntry.ProtoReflect.Descriptor instead.
func (*TitleEntry) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{2}
}

func (x *TitleEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TitleEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type SummaryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negative  int32  `protobuf:"varint,1,opt,name=negative,proto3" json:"negative,omitempty"`
	SummaryId string `protobuf:"bytes,2,opt,name=summary_id,json=summaryId,proto3" json:"summary_id,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Positive  int32  `protobuf:"varint,4,opt,name=positive,proto3" json:"positive,omitempty"`
	Lang      string `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *SummaryEntry) Reset() {
	*x = SummaryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryEntry) ProtoMessage() {}

func (x *SummaryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryEntry.ProtoReflect.Descriptor instead.
func (*SummaryEntry) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{3}
}

func (x *SummaryEntry) GetNegative() int32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

func (x *SummaryEntry) GetSummaryId() string {
	if x != nil {
		return x.SummaryId
	}
	return ""
}

func (x *SummaryEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SummaryEntry) GetPositive() int32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *SummaryEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryCategory    string `protobuf:"bytes,1,opt,name=primary_category,json=primaryCategory,proto3" json:"primary_category,omitempty"`
	SecondaryCategory  string `protobuf:"bytes,2,opt,name=secondary_category,json=secondaryCategory,proto3" json:"secondary_category,omitempty"`
	TertiaryCategory   string `protobuf:"bytes,3,opt,name=tertiary_category,json=tertiaryCategory,proto3" json:"tertiary_category,omitempty"`
	QuaternaryCategory string `protobuf:"bytes,4,opt,name=quaternary_category,json=quaternaryCategory,proto3" json:"quaternary_category,omitempty"`
	QuinaryCategory    string `protobuf:"bytes,5,opt,name=quinary_category,json=quinaryCategory,proto3" json:"quinary_category,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{4}
}

func (x *Category) GetPrimaryCategory() string {
	if x != nil {
		return x.PrimaryCategory
	}
	return ""
}

func (x *Category) GetSecondaryCategory() string {
	if x != nil {
		return x.SecondaryCategory
	}
	return ""
}

func (x *Category) GetTertiaryCategory() string {
	if x != nil {
		return x.TertiaryCategory
	}
	return ""
}

func (x *Category) GetQuaternaryCategory() string {
	if x != nil {
		return x.QuaternaryCategory
	}
	return ""
}

func (x *Category) GetQuinaryCategory() string {
	if x != nil {
		return x.QuinaryCategory
	}
	return ""
}

type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyCode   string `protobuf:"bytes,1,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`
	CompanyNameEn string `protobuf:"bytes,2,opt,name=company_name_en,json=companyNameEn,proto3" json:"company_name_en,omitempty"`
	CompanyNameZh string `protobuf:"bytes,3,opt,name=company_name_zh,json=companyNameZh,proto3" json:"company_name_zh,omitempty"`
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{5}
}

func (x *CompanyInfo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyInfo) GetCompanyNameEn() string {
	if x != nil {
		return x.CompanyNameEn
	}
	return ""
}

func (x *CompanyInfo) GetCompanyNameZh() string {
	if x != nil {
		return x.CompanyNameZh
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverImageUrl string      `protobuf:"bytes,1,opt,name=cover_image_url,json=coverImageUrl,proto3" json:"cover_image_url,omitempty"` // URL of the cover image
	Desc          string      `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`                                          // Description of the image
	Id            string      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                              // Unique identifier for the image
	LocalPath     string      `protobuf:"bytes,4,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`               // Local path of the image file
	Subtitles     []*Subtitle `protobuf:"bytes,5,rep,name=subtitles,proto3" json:"subtitles,omitempty"`                                // Nested subtitles field (if applicable)
	Type          string      `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                                          // Type of the image
	Url           string      `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`                                            // URL of the image
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{6}
}

func (x *Image) GetCoverImageUrl() string {
	if x != nil {
		return x.CoverImageUrl
	}
	return ""
}

func (x *Image) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *Image) GetSubtitles() []*Subtitle {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *Image) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverImageUrl string      `protobuf:"bytes,1,opt,name=cover_image_url,json=coverImageUrl,proto3" json:"cover_image_url,omitempty"` // URL of the cover image
	Desc          string      `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`                                          // Description of the video
	Id            string      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                              // Unique identifier for the video
	LocalPath     string      `protobuf:"bytes,4,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`               // Local path of the video file
	Subtitles     []*Subtitle `protobuf:"bytes,5,rep,name=subtitles,proto3" json:"subtitles,omitempty"`                                // Nested subtitles field
	Type          string      `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`                                          // Type of the video
	Url           string      `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`                                            // URL of the video
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{7}
}

func (x *Video) GetCoverImageUrl() string {
	if x != nil {
		return x.CoverImageUrl
	}
	return ""
}

func (x *Video) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Video) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Video) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *Video) GetSubtitles() []*Subtitle {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *Video) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Video) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SubtitleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Text  string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Lang  string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"` // Optional, if you want to support multiple languages for subtitles
}

func (x *SubtitleEntry) Reset() {
	*x = SubtitleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtitleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtitleEntry) ProtoMessage() {}

func (x *SubtitleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtitleEntry.ProtoReflect.Descriptor instead.
func (*SubtitleEntry) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{8}
}

func (x *SubtitleEntry) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SubtitleEntry) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SubtitleEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SubtitleEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverImageUrl string      `protobuf:"bytes,1,opt,name=cover_image_url,json=coverImageUrl,proto3" json:"cover_image_url,omitempty"`
	Desc          string      `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Id            string      `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	LocalPath     string      `protobuf:"bytes,4,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	Subtitles     []*Subtitle `protobuf:"bytes,5,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
	Type          string      `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Url           string      `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{9}
}

func (x *Audio) GetCoverImageUrl() string {
	if x != nil {
		return x.CoverImageUrl
	}
	return ""
}

func (x *Audio) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Audio) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Audio) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *Audio) GetSubtitles() []*Subtitle {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *Audio) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Audio) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Subtitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	End     int32  `protobuf:"varint,1,opt,name=end,proto3" json:"end,omitempty"`        // End time of the subtitle
	Speaker string `protobuf:"bytes,2,opt,name=speaker,proto3" json:"speaker,omitempty"` // Speaker's name or identifier
	Start   int32  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`    // Start time of the subtitle
	Text    string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`       // Subtitle text
}

func (x *Subtitle) Reset() {
	*x = Subtitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subtitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subtitle) ProtoMessage() {}

func (x *Subtitle) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subtitle.ProtoReflect.Descriptor instead.
func (*Subtitle) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{10}
}

func (x *Subtitle) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Subtitle) GetSpeaker() string {
	if x != nil {
		return x.Speaker
	}
	return ""
}

func (x *Subtitle) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Subtitle) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TextEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextEntry) Reset() {
	*x = TextEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEntry) ProtoMessage() {}

func (x *TextEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEntry.ProtoReflect.Descriptor instead.
func (*TextEntry) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{11}
}

func (x *TextEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *TextEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type FullText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	Tag  string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *FullText) Reset() {
	*x = FullText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullText) ProtoMessage() {}

func (x *FullText) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullText.ProtoReflect.Descriptor instead.
func (*FullText) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{12}
}

func (x *FullText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FullText) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *FullText) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FullText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Define the Summary message
type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`              // Unique identifier for the summary
	Lang     string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`          // Language of the summary
	Negative int32  `protobuf:"varint,3,opt,name=negative,proto3" json:"negative,omitempty"` // Negative sentiment score
	Positive int32  `protobuf:"varint,4,opt,name=positive,proto3" json:"positive,omitempty"` // Positive sentiment score
	Tag      string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`            // Tag or label associated with the summary
	Text     string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`          // The actual summary text
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{13}
}

func (x *Summary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Summary) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Summary) GetNegative() int32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

func (x *Summary) GetPositive() int32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *Summary) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Summary) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Now, update the NewsArticle message
type NewsArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId         string         `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Title         []*TextEntry   `protobuf:"bytes,2,rep,name=title,proto3" json:"title,omitempty"`
	Url           string         `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	PublishedDate string         `protobuf:"bytes,5,opt,name=published_date,json=publishedDate,proto3" json:"published_date,omitempty"`
	CompanyInfo   []*CompanyInfo `protobuf:"bytes,7,rep,name=company_info,json=companyInfo,proto3" json:"company_info,omitempty"`
	FileType      string         `protobuf:"bytes,8,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	CategoryInfo  *Category      `protobuf:"bytes,9,opt,name=category_info,json=categoryInfo,proto3" json:"category_info,omitempty"`
	Images        []*Image       `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	Region        string         `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
	FullText      []*FullText    `protobuf:"bytes,12,rep,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	Videos        []*Video       `protobuf:"bytes,13,rep,name=videos,proto3" json:"videos,omitempty"`
	Audios        []*Audio       `protobuf:"bytes,14,rep,name=audios,proto3" json:"audios,omitempty"`
	PdfFilePath   string         `protobuf:"bytes,15,opt,name=pdf_file_path,json=pdfFilePath,proto3" json:"pdf_file_path,omitempty"`
	TxtFilePath   string         `protobuf:"bytes,16,opt,name=txt_file_path,json=txtFilePath,proto3" json:"txt_file_path,omitempty"`
	Summaries     []*Summary     `protobuf:"bytes,18,rep,name=summaries,proto3" json:"summaries,omitempty"`
	Id            string         `protobuf:"bytes,19,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NewsArticle) Reset() {
	*x = NewsArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsArticle) ProtoMessage() {}

func (x *NewsArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsArticle.ProtoReflect.Descriptor instead.
func (*NewsArticle) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{14}
}

func (x *NewsArticle) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *NewsArticle) GetTitle() []*TextEntry {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *NewsArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsArticle) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *NewsArticle) GetCompanyInfo() []*CompanyInfo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *NewsArticle) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *NewsArticle) GetCategoryInfo() *Category {
	if x != nil {
		return x.CategoryInfo
	}
	return nil
}

func (x *NewsArticle) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *NewsArticle) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NewsArticle) GetFullText() []*FullText {
	if x != nil {
		return x.FullText
	}
	return nil
}

func (x *NewsArticle) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *NewsArticle) GetAudios() []*Audio {
	if x != nil {
		return x.Audios
	}
	return nil
}

func (x *NewsArticle) GetPdfFilePath() string {
	if x != nil {
		return x.PdfFilePath
	}
	return ""
}

func (x *NewsArticle) GetTxtFilePath() string {
	if x != nil {
		return x.TxtFilePath
	}
	return ""
}

func (x *NewsArticle) GetSummaries() []*Summary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *NewsArticle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for GetNewsInfo
type GetNewsInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"` // Unique identifier for the news article
}

func (x *GetNewsInfoReq) Reset() {
	*x = GetNewsInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsInfoReq) ProtoMessage() {}

func (x *GetNewsInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsInfoReq.ProtoReflect.Descriptor instead.
func (*GetNewsInfoReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{15}
}

func (x *GetNewsInfoReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

// Response message for GetNewsInfo
type GetNewsInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`        // Return code (0 for success, non-zero for errors)
	Msg     string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`         // Response message or error description
	Article *NewsArticle `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"` // Detailed information about the news article
}

func (x *GetNewsInfoRsp) Reset() {
	*x = GetNewsInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsInfoRsp) ProtoMessage() {}

func (x *GetNewsInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsInfoRsp.ProtoReflect.Descriptor instead.
func (*GetNewsInfoRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{16}
}

func (x *GetNewsInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetNewsInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNewsInfoRsp) GetArticle() *NewsArticle {
	if x != nil {
		return x.Article
	}
	return nil
}

// Request message for GetCacheInfo
type GetCacheInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheKey string `protobuf:"bytes,1,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"` // Unique identifier for the news article
}

func (x *GetCacheInfoReq) Reset() {
	*x = GetCacheInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheInfoReq) ProtoMessage() {}

func (x *GetCacheInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheInfoReq.ProtoReflect.Descriptor instead.
func (*GetCacheInfoReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{17}
}

func (x *GetCacheInfoReq) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

// Response message for GetCacheInfo
type GetCacheInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`                             // Return code (0 for success, non-zero for errors)
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                              // Response message or error description
	CacheInfo string `protobuf:"bytes,3,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"` // Detailed information about the cache info
}

func (x *GetCacheInfoRsp) Reset() {
	*x = GetCacheInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCacheInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheInfoRsp) ProtoMessage() {}

func (x *GetCacheInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCacheInfoRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{18}
}

func (x *GetCacheInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetCacheInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetCacheInfoRsp) GetCacheInfo() string {
	if x != nil {
		return x.CacheInfo
	}
	return ""
}

type GetSentimentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     SentimentType `protobuf:"varint,1,opt,name=type,proto3,enum=chatfinbot.news.v1.SentimentType" json:"type,omitempty"` // 类型 1=大v 2=选股
	Code     string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                                        // type=2时生效，公司代码
	LastDate string        `protobuf:"bytes,3,opt,name=last_date,json=lastDate,proto3" json:"last_date,omitempty"`                // 下一页把这个最后的date传上来
	LastId   string        `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`                      // 下一页把这个最后的id传上来
	Size     uint32        `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                                       // 分页数，最大50
}

func (x *GetSentimentListReq) Reset() {
	*x = GetSentimentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSentimentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSentimentListReq) ProtoMessage() {}

func (x *GetSentimentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSentimentListReq.ProtoReflect.Descriptor instead.
func (*GetSentimentListReq) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{19}
}

func (x *GetSentimentListReq) GetType() SentimentType {
	if x != nil {
		return x.Type
	}
	return SentimentType_SentimentTypeUnknown
}

func (x *GetSentimentListReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetSentimentListReq) GetLastDate() string {
	if x != nil {
		return x.LastDate
	}
	return ""
}

func (x *GetSentimentListReq) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

func (x *GetSentimentListReq) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetSentimentListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32            `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // Return code (0 for success, non-zero for errors)
	Msg      string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // Response message or error description
	List     []*SentimentData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // list about the sentiment
	LastSort string           `protobuf:"bytes,4,opt,name=last_sort,json=lastSort,proto3" json:"last_sort,omitempty"`
}

func (x *GetSentimentListRsp) Reset() {
	*x = GetSentimentListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSentimentListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSentimentListRsp) ProtoMessage() {}

func (x *GetSentimentListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSentimentListRsp.ProtoReflect.Descriptor instead.
func (*GetSentimentListRsp) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{20}
}

func (x *GetSentimentListRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetSentimentListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetSentimentListRsp) GetList() []*SentimentData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetSentimentListRsp) GetLastSort() string {
	if x != nil {
		return x.LastSort
	}
	return ""
}

type SentimentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content  *SentimentContent  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Author   *SentimentAuthor   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Video    *SentimentVideo    `protobuf:"bytes,4,opt,name=video,proto3" json:"video,omitempty"`
	Animated *SentimentAnimated `protobuf:"bytes,5,opt,name=animated,proto3" json:"animated,omitempty"`
	Image    *SentimentImage    `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	Feedback *SentimentFeedback `protobuf:"bytes,7,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Tags     *SentimentTags     `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	Source   string             `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SentimentData) Reset() {
	*x = SentimentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentData) ProtoMessage() {}

func (x *SentimentData) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentData.ProtoReflect.Descriptor instead.
func (*SentimentData) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{21}
}

func (x *SentimentData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SentimentData) GetContent() *SentimentContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SentimentData) GetAuthor() *SentimentAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *SentimentData) GetVideo() *SentimentVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *SentimentData) GetAnimated() *SentimentAnimated {
	if x != nil {
		return x.Animated
	}
	return nil
}

func (x *SentimentData) GetImage() *SentimentImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *SentimentData) GetFeedback() *SentimentFeedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *SentimentData) GetTags() *SentimentTags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SentimentData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type SentimentContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentId   string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	ContentUrl  string `protobuf:"bytes,2,opt,name=content_url,json=contentUrl,proto3" json:"content_url,omitempty"`
	ContentDate string `protobuf:"bytes,3,opt,name=content_date,json=contentDate,proto3" json:"content_date,omitempty"`
	RawContent  string `protobuf:"bytes,4,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
}

func (x *SentimentContent) Reset() {
	*x = SentimentContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentContent) ProtoMessage() {}

func (x *SentimentContent) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentContent.ProtoReflect.Descriptor instead.
func (*SentimentContent) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{22}
}

func (x *SentimentContent) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *SentimentContent) GetContentUrl() string {
	if x != nil {
		return x.ContentUrl
	}
	return ""
}

func (x *SentimentContent) GetContentDate() string {
	if x != nil {
		return x.ContentDate
	}
	return ""
}

func (x *SentimentContent) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

type SentimentAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsKol                  bool   `protobuf:"varint,1,opt,name=is_kol,json=isKol,proto3" json:"is_kol,omitempty"`
	AuthorCreated          string `protobuf:"bytes,2,opt,name=author_created,json=authorCreated,proto3" json:"author_created,omitempty"`
	AuthorDescription      string `protobuf:"bytes,3,opt,name=author_description,json=authorDescription,proto3" json:"author_description,omitempty"`
	AuthorDisplayname      string `protobuf:"bytes,4,opt,name=author_displayname,json=authorDisplayname,proto3" json:"author_displayname,omitempty"`
	AuthorFavouritesCount  int32  `protobuf:"varint,5,opt,name=author_favourites_count,json=authorFavouritesCount,proto3" json:"author_favourites_count,omitempty"`
	AuthorFollowersCount   int32  `protobuf:"varint,6,opt,name=author_followers_count,json=authorFollowersCount,proto3" json:"author_followers_count,omitempty"`
	AuthorFriendsCount     int32  `protobuf:"varint,7,opt,name=author_friends_count,json=authorFriendsCount,proto3" json:"author_friends_count,omitempty"`
	AuthorId               string `protobuf:"bytes,8,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	AuthorListedCount      int32  `protobuf:"varint,9,opt,name=author_listed_count,json=authorListedCount,proto3" json:"author_listed_count,omitempty"`
	AuthorLocation         string `protobuf:"bytes,10,opt,name=author_location,json=authorLocation,proto3" json:"author_location,omitempty"`
	AuthorMediaCount       int32  `protobuf:"varint,11,opt,name=author_media_count,json=authorMediaCount,proto3" json:"author_media_count,omitempty"`
	AuthorName             string `protobuf:"bytes,12,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
	AuthorProfileBannerUrl string `protobuf:"bytes,13,opt,name=author_profile_banner_url,json=authorProfileBannerUrl,proto3" json:"author_profile_banner_url,omitempty"`
	AuthorProfileImageUrl  string `protobuf:"bytes,14,opt,name=author_profile_image_url,json=authorProfileImageUrl,proto3" json:"author_profile_image_url,omitempty"`
	AuthorStatusesCount    int32  `protobuf:"varint,15,opt,name=author_statuses_count,json=authorStatusesCount,proto3" json:"author_statuses_count,omitempty"`
	AuthorUrl              string `protobuf:"bytes,16,opt,name=author_url,json=authorUrl,proto3" json:"author_url,omitempty"`
}

func (x *SentimentAuthor) Reset() {
	*x = SentimentAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentAuthor) ProtoMessage() {}

func (x *SentimentAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentAuthor.ProtoReflect.Descriptor instead.
func (*SentimentAuthor) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{23}
}

func (x *SentimentAuthor) GetIsKol() bool {
	if x != nil {
		return x.IsKol
	}
	return false
}

func (x *SentimentAuthor) GetAuthorCreated() string {
	if x != nil {
		return x.AuthorCreated
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorDescription() string {
	if x != nil {
		return x.AuthorDescription
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorDisplayname() string {
	if x != nil {
		return x.AuthorDisplayname
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorFavouritesCount() int32 {
	if x != nil {
		return x.AuthorFavouritesCount
	}
	return 0
}

func (x *SentimentAuthor) GetAuthorFollowersCount() int32 {
	if x != nil {
		return x.AuthorFollowersCount
	}
	return 0
}

func (x *SentimentAuthor) GetAuthorFriendsCount() int32 {
	if x != nil {
		return x.AuthorFriendsCount
	}
	return 0
}

func (x *SentimentAuthor) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorListedCount() int32 {
	if x != nil {
		return x.AuthorListedCount
	}
	return 0
}

func (x *SentimentAuthor) GetAuthorLocation() string {
	if x != nil {
		return x.AuthorLocation
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorMediaCount() int32 {
	if x != nil {
		return x.AuthorMediaCount
	}
	return 0
}

func (x *SentimentAuthor) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorProfileBannerUrl() string {
	if x != nil {
		return x.AuthorProfileBannerUrl
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorProfileImageUrl() string {
	if x != nil {
		return x.AuthorProfileImageUrl
	}
	return ""
}

func (x *SentimentAuthor) GetAuthorStatusesCount() int32 {
	if x != nil {
		return x.AuthorStatusesCount
	}
	return 0
}

func (x *SentimentAuthor) GetAuthorUrl() string {
	if x != nil {
		return x.AuthorUrl
	}
	return ""
}

type SentimentVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideosPic []string `protobuf:"bytes,1,rep,name=videos_pic,json=videosPic,proto3" json:"videos_pic,omitempty"`
	VideosVid []string `protobuf:"bytes,2,rep,name=videos_vid,json=videosVid,proto3" json:"videos_vid,omitempty"`
}

func (x *SentimentVideo) Reset() {
	*x = SentimentVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentVideo) ProtoMessage() {}

func (x *SentimentVideo) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentVideo.ProtoReflect.Descriptor instead.
func (*SentimentVideo) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{24}
}

func (x *SentimentVideo) GetVideosPic() []string {
	if x != nil {
		return x.VideosPic
	}
	return nil
}

func (x *SentimentVideo) GetVideosVid() []string {
	if x != nil {
		return x.VideosVid
	}
	return nil
}

type SentimentAnimated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimatedPic []string `protobuf:"bytes,1,rep,name=animated_pic,json=animatedPic,proto3" json:"animated_pic,omitempty"`
	AnimatedVid []string `protobuf:"bytes,2,rep,name=animated_vid,json=animatedVid,proto3" json:"animated_vid,omitempty"`
}

func (x *SentimentAnimated) Reset() {
	*x = SentimentAnimated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentAnimated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentAnimated) ProtoMessage() {}

func (x *SentimentAnimated) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentAnimated.ProtoReflect.Descriptor instead.
func (*SentimentAnimated) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{25}
}

func (x *SentimentAnimated) GetAnimatedPic() []string {
	if x != nil {
		return x.AnimatedPic
	}
	return nil
}

func (x *SentimentAnimated) GetAnimatedVid() []string {
	if x != nil {
		return x.AnimatedVid
	}
	return nil
}

type SentimentImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl []string `protobuf:"bytes,1,rep,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImageId  []string `protobuf:"bytes,2,rep,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *SentimentImage) Reset() {
	*x = SentimentImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentImage) ProtoMessage() {}

func (x *SentimentImage) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentImage.ProtoReflect.Descriptor instead.
func (*SentimentImage) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{26}
}

func (x *SentimentImage) GetImageUrl() []string {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

func (x *SentimentImage) GetImageId() []string {
	if x != nil {
		return x.ImageId
	}
	return nil
}

type SentimentFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LikeCount    int32 `protobuf:"varint,1,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	QuoteCount   int32 `protobuf:"varint,2,opt,name=quote_count,json=quoteCount,proto3" json:"quote_count,omitempty"`
	ReplyCount   int32 `protobuf:"varint,3,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	RetweetCount int32 `protobuf:"varint,4,opt,name=retweet_count,json=retweetCount,proto3" json:"retweet_count,omitempty"`
	ViewCount    int32 `protobuf:"varint,5,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
}

func (x *SentimentFeedback) Reset() {
	*x = SentimentFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentFeedback) ProtoMessage() {}

func (x *SentimentFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentFeedback.ProtoReflect.Descriptor instead.
func (*SentimentFeedback) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{27}
}

func (x *SentimentFeedback) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *SentimentFeedback) GetQuoteCount() int32 {
	if x != nil {
		return x.QuoteCount
	}
	return 0
}

func (x *SentimentFeedback) GetReplyCount() int32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *SentimentFeedback) GetRetweetCount() int32 {
	if x != nil {
		return x.RetweetCount
	}
	return 0
}

func (x *SentimentFeedback) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

type SentimentTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string   `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Cashtags []string `protobuf:"bytes,2,rep,name=cashtags,proto3" json:"cashtags,omitempty"`
	Hashtags []string `protobuf:"bytes,3,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
}

func (x *SentimentTags) Reset() {
	*x = SentimentTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentimentTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentTags) ProtoMessage() {}

func (x *SentimentTags) ProtoReflect() protoreflect.Message {
	mi := &file_news_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentTags.ProtoReflect.Descriptor instead.
func (*SentimentTags) Descriptor() ([]byte, []int) {
	return file_news_proto_rawDescGZIP(), []int{28}
}

func (x *SentimentTags) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *SentimentTags) GetCashtags() []string {
	if x != nil {
		return x.Cashtags
	}
	return nil
}

func (x *SentimentTags) GetHashtags() []string {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

var File_news_proto protoreflect.FileDescriptor

var file_news_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x8d,
	0x01, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xed,
	0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71,
	0x75, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x80,
	0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x5a,
	0x68, 0x22, 0xd4, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x05, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x5f, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x22, 0xd4, 0x01, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x54,
	0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xb5, 0x05, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x06, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x06, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x64, 0x66, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x78, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x22, 0x2e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e,
	0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x41, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd9, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x6b, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x4b, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x55, 0x72, 0x6c, 0x22, 0x4e, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x5f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x50, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x5f,
	0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x56, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x64, 0x22,
	0x48, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x2a, 0x58, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4b, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x32,
	0xe3, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x73, 0x70, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x75, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_news_proto_rawDescOnce sync.Once
	file_news_proto_rawDescData = file_news_proto_rawDesc
)

func file_news_proto_rawDescGZIP() []byte {
	file_news_proto_rawDescOnce.Do(func() {
		file_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_news_proto_rawDescData)
	})
	return file_news_proto_rawDescData
}

var file_news_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_news_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_news_proto_goTypes = []interface{}{
	(SentimentType)(0),          // 0: chatfinbot.news.v1.SentimentType
	(*GetNewsListReq)(nil),      // 1: chatfinbot.news.v1.GetNewsListReq
	(*GetNewsListRsp)(nil),      // 2: chatfinbot.news.v1.GetNewsListRsp
	(*TitleEntry)(nil),          // 3: chatfinbot.news.v1.TitleEntry
	(*SummaryEntry)(nil),        // 4: chatfinbot.news.v1.SummaryEntry
	(*Category)(nil),            // 5: chatfinbot.news.v1.Category
	(*CompanyInfo)(nil),         // 6: chatfinbot.news.v1.CompanyInfo
	(*Image)(nil),               // 7: chatfinbot.news.v1.Image
	(*Video)(nil),               // 8: chatfinbot.news.v1.Video
	(*SubtitleEntry)(nil),       // 9: chatfinbot.news.v1.SubtitleEntry
	(*Audio)(nil),               // 10: chatfinbot.news.v1.Audio
	(*Subtitle)(nil),            // 11: chatfinbot.news.v1.Subtitle
	(*TextEntry)(nil),           // 12: chatfinbot.news.v1.TextEntry
	(*FullText)(nil),            // 13: chatfinbot.news.v1.FullText
	(*Summary)(nil),             // 14: chatfinbot.news.v1.Summary
	(*NewsArticle)(nil),         // 15: chatfinbot.news.v1.NewsArticle
	(*GetNewsInfoReq)(nil),      // 16: chatfinbot.news.v1.GetNewsInfoReq
	(*GetNewsInfoRsp)(nil),      // 17: chatfinbot.news.v1.GetNewsInfoRsp
	(*GetCacheInfoReq)(nil),     // 18: chatfinbot.news.v1.GetCacheInfoReq
	(*GetCacheInfoRsp)(nil),     // 19: chatfinbot.news.v1.GetCacheInfoRsp
	(*GetSentimentListReq)(nil), // 20: chatfinbot.news.v1.GetSentimentListReq
	(*GetSentimentListRsp)(nil), // 21: chatfinbot.news.v1.GetSentimentListRsp
	(*SentimentData)(nil),       // 22: chatfinbot.news.v1.SentimentData
	(*SentimentContent)(nil),    // 23: chatfinbot.news.v1.SentimentContent
	(*SentimentAuthor)(nil),     // 24: chatfinbot.news.v1.SentimentAuthor
	(*SentimentVideo)(nil),      // 25: chatfinbot.news.v1.SentimentVideo
	(*SentimentAnimated)(nil),   // 26: chatfinbot.news.v1.SentimentAnimated
	(*SentimentImage)(nil),      // 27: chatfinbot.news.v1.SentimentImage
	(*SentimentFeedback)(nil),   // 28: chatfinbot.news.v1.SentimentFeedback
	(*SentimentTags)(nil),       // 29: chatfinbot.news.v1.SentimentTags
}
var file_news_proto_depIdxs = []int32{
	15, // 0: chatfinbot.news.v1.GetNewsListRsp.articles:type_name -> chatfinbot.news.v1.NewsArticle
	11, // 1: chatfinbot.news.v1.Image.subtitles:type_name -> chatfinbot.news.v1.Subtitle
	11, // 2: chatfinbot.news.v1.Video.subtitles:type_name -> chatfinbot.news.v1.Subtitle
	11, // 3: chatfinbot.news.v1.Audio.subtitles:type_name -> chatfinbot.news.v1.Subtitle
	12, // 4: chatfinbot.news.v1.NewsArticle.title:type_name -> chatfinbot.news.v1.TextEntry
	6,  // 5: chatfinbot.news.v1.NewsArticle.company_info:type_name -> chatfinbot.news.v1.CompanyInfo
	5,  // 6: chatfinbot.news.v1.NewsArticle.category_info:type_name -> chatfinbot.news.v1.Category
	7,  // 7: chatfinbot.news.v1.NewsArticle.images:type_name -> chatfinbot.news.v1.Image
	13, // 8: chatfinbot.news.v1.NewsArticle.full_text:type_name -> chatfinbot.news.v1.FullText
	8,  // 9: chatfinbot.news.v1.NewsArticle.videos:type_name -> chatfinbot.news.v1.Video
	10, // 10: chatfinbot.news.v1.NewsArticle.audios:type_name -> chatfinbot.news.v1.Audio
	14, // 11: chatfinbot.news.v1.NewsArticle.summaries:type_name -> chatfinbot.news.v1.Summary
	15, // 12: chatfinbot.news.v1.GetNewsInfoRsp.article:type_name -> chatfinbot.news.v1.NewsArticle
	0,  // 13: chatfinbot.news.v1.GetSentimentListReq.type:type_name -> chatfinbot.news.v1.SentimentType
	22, // 14: chatfinbot.news.v1.GetSentimentListRsp.list:type_name -> chatfinbot.news.v1.SentimentData
	23, // 15: chatfinbot.news.v1.SentimentData.content:type_name -> chatfinbot.news.v1.SentimentContent
	24, // 16: chatfinbot.news.v1.SentimentData.author:type_name -> chatfinbot.news.v1.SentimentAuthor
	25, // 17: chatfinbot.news.v1.SentimentData.video:type_name -> chatfinbot.news.v1.SentimentVideo
	26, // 18: chatfinbot.news.v1.SentimentData.animated:type_name -> chatfinbot.news.v1.SentimentAnimated
	27, // 19: chatfinbot.news.v1.SentimentData.image:type_name -> chatfinbot.news.v1.SentimentImage
	28, // 20: chatfinbot.news.v1.SentimentData.feedback:type_name -> chatfinbot.news.v1.SentimentFeedback
	29, // 21: chatfinbot.news.v1.SentimentData.tags:type_name -> chatfinbot.news.v1.SentimentTags
	1,  // 22: chatfinbot.news.v1.NewsService.GetNewsList:input_type -> chatfinbot.news.v1.GetNewsListReq
	16, // 23: chatfinbot.news.v1.NewsService.GetNewsInfo:input_type -> chatfinbot.news.v1.GetNewsInfoReq
	18, // 24: chatfinbot.news.v1.NewsService.GetCacheInfo:input_type -> chatfinbot.news.v1.GetCacheInfoReq
	20, // 25: chatfinbot.news.v1.NewsService.GetSentimentList:input_type -> chatfinbot.news.v1.GetSentimentListReq
	2,  // 26: chatfinbot.news.v1.NewsService.GetNewsList:output_type -> chatfinbot.news.v1.GetNewsListRsp
	17, // 27: chatfinbot.news.v1.NewsService.GetNewsInfo:output_type -> chatfinbot.news.v1.GetNewsInfoRsp
	19, // 28: chatfinbot.news.v1.NewsService.GetCacheInfo:output_type -> chatfinbot.news.v1.GetCacheInfoRsp
	21, // 29: chatfinbot.news.v1.NewsService.GetSentimentList:output_type -> chatfinbot.news.v1.GetSentimentListRsp
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_news_proto_init() }
func file_news_proto_init() {
	if File_news_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtitleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subtitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCacheInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSentimentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSentimentListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentAnimated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentimentTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_news_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_proto_goTypes,
		DependencyIndexes: file_news_proto_depIdxs,
		EnumInfos:         file_news_proto_enumTypes,
		MessageInfos:      file_news_proto_msgTypes,
	}.Build()
	File_news_proto = out.File
	file_news_proto_rawDesc = nil
	file_news_proto_goTypes = nil
	file_news_proto_depIdxs = nil
}
