// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: news/v1/news.proto

package newspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for GetNewsList
type GetNewsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstCategory  string `protobuf:"bytes,1,opt,name=first_category,json=firstCategory,proto3" json:"first_category,omitempty"`    // Primary news category
	SecondCategory string `protobuf:"bytes,2,opt,name=second_category,json=secondCategory,proto3" json:"second_category,omitempty"` // Secondary news category (optional)
	Page           int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                                          // Pagination: page number
	PageSize       int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // Pagination: number of items per page
	CompanyCode    string `protobuf:"bytes,5,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`          // Company Code (optional)
}

func (x *GetNewsListReq) Reset() {
	*x = GetNewsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsListReq) ProtoMessage() {}

func (x *GetNewsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsListReq.ProtoReflect.Descriptor instead.
func (*GetNewsListReq) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{0}
}

func (x *GetNewsListReq) GetFirstCategory() string {
	if x != nil {
		return x.FirstCategory
	}
	return ""
}

func (x *GetNewsListReq) GetSecondCategory() string {
	if x != nil {
		return x.SecondCategory
	}
	return ""
}

func (x *GetNewsListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNewsListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNewsListReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

// Response message for GetNewsList
type GetNewsListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret      int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`          // Return code (0 for success, non-zero for errors)
	Msg      string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`           // Response message or error description
	Articles []*NewsArticle `protobuf:"bytes,3,rep,name=articles,proto3" json:"articles,omitempty"` // List of news articles
}

func (x *GetNewsListRsp) Reset() {
	*x = GetNewsListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsListRsp) ProtoMessage() {}

func (x *GetNewsListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsListRsp.ProtoReflect.Descriptor instead.
func (*GetNewsListRsp) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{1}
}

func (x *GetNewsListRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetNewsListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNewsListRsp) GetArticles() []*NewsArticle {
	if x != nil {
		return x.Articles
	}
	return nil
}

type TitleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *TitleEntry) Reset() {
	*x = TitleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleEntry) ProtoMessage() {}

func (x *TitleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleEntry.ProtoReflect.Descriptor instead.
func (*TitleEntry) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{2}
}

func (x *TitleEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TitleEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type SummaryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negative  int32  `protobuf:"varint,1,opt,name=negative,proto3" json:"negative,omitempty"`
	SummaryId string `protobuf:"bytes,2,opt,name=summary_id,json=summaryId,proto3" json:"summary_id,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Positive  int32  `protobuf:"varint,4,opt,name=positive,proto3" json:"positive,omitempty"`
	Lang      string `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *SummaryEntry) Reset() {
	*x = SummaryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryEntry) ProtoMessage() {}

func (x *SummaryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryEntry.ProtoReflect.Descriptor instead.
func (*SummaryEntry) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{3}
}

func (x *SummaryEntry) GetNegative() int32 {
	if x != nil {
		return x.Negative
	}
	return 0
}

func (x *SummaryEntry) GetSummaryId() string {
	if x != nil {
		return x.SummaryId
	}
	return ""
}

func (x *SummaryEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SummaryEntry) GetPositive() int32 {
	if x != nil {
		return x.Positive
	}
	return 0
}

func (x *SummaryEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// Define the nested structures first
type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorId   string `protobuf:"bytes,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	AuthorName string `protobuf:"bytes,2,opt,name=author_name,json=authorName,proto3" json:"author_name,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{4}
}

func (x *Author) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Author) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryCategory   string `protobuf:"bytes,1,opt,name=primary_category,json=primaryCategory,proto3" json:"primary_category,omitempty"`
	SecondaryCategory string `protobuf:"bytes,2,opt,name=secondary_category,json=secondaryCategory,proto3" json:"secondary_category,omitempty"`
	TertiaryCategory  string `protobuf:"bytes,3,opt,name=tertiary_category,json=tertiaryCategory,proto3" json:"tertiary_category,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{5}
}

func (x *Category) GetPrimaryCategory() string {
	if x != nil {
		return x.PrimaryCategory
	}
	return ""
}

func (x *Category) GetSecondaryCategory() string {
	if x != nil {
		return x.SecondaryCategory
	}
	return ""
}

func (x *Category) GetTertiaryCategory() string {
	if x != nil {
		return x.TertiaryCategory
	}
	return ""
}

type CompanyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyCode   string `protobuf:"bytes,1,opt,name=company_code,json=companyCode,proto3" json:"company_code,omitempty"`
	CompanyNameEn string `protobuf:"bytes,2,opt,name=company_name_en,json=companyNameEn,proto3" json:"company_name_en,omitempty"`
	CompanyNameZh string `protobuf:"bytes,3,opt,name=company_name_zh,json=companyNameZh,proto3" json:"company_name_zh,omitempty"`
}

func (x *CompanyInfo) Reset() {
	*x = CompanyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyInfo) ProtoMessage() {}

func (x *CompanyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyInfo.ProtoReflect.Descriptor instead.
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{6}
}

func (x *CompanyInfo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyInfo) GetCompanyNameEn() string {
	if x != nil {
		return x.CompanyNameEn
	}
	return ""
}

func (x *CompanyInfo) GetCompanyNameZh() string {
	if x != nil {
		return x.CompanyNameZh
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgContext string `protobuf:"bytes,1,opt,name=img_context,json=imgContext,proto3" json:"img_context,omitempty"`
	ImgDesc    string `protobuf:"bytes,2,opt,name=img_desc,json=imgDesc,proto3" json:"img_desc,omitempty"`
	ImgId      string `protobuf:"bytes,3,opt,name=img_id,json=imgId,proto3" json:"img_id,omitempty"`
	ImgPath    string `protobuf:"bytes,4,opt,name=img_path,json=imgPath,proto3" json:"img_path,omitempty"`
	ImgUrl     string `protobuf:"bytes,5,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{7}
}

func (x *Image) GetImgContext() string {
	if x != nil {
		return x.ImgContext
	}
	return ""
}

func (x *Image) GetImgDesc() string {
	if x != nil {
		return x.ImgDesc
	}
	return ""
}

func (x *Image) GetImgId() string {
	if x != nil {
		return x.ImgId
	}
	return ""
}

func (x *Image) GetImgPath() string {
	if x != nil {
		return x.ImgPath
	}
	return ""
}

func (x *Image) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId           string           `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	VideoDescriptions []*TextEntry     `protobuf:"bytes,2,rep,name=video_descriptions,json=videoDescriptions,proto3" json:"video_descriptions,omitempty"`
	VideoDetails      string           `protobuf:"bytes,3,opt,name=video_details,json=videoDetails,proto3" json:"video_details,omitempty"`
	VideoUrl          string           `protobuf:"bytes,4,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	VideoSubtitles    []*SubtitleEntry `protobuf:"bytes,5,rep,name=video_subtitles,json=videoSubtitles,proto3" json:"video_subtitles,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{8}
}

func (x *Video) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *Video) GetVideoDescriptions() []*TextEntry {
	if x != nil {
		return x.VideoDescriptions
	}
	return nil
}

func (x *Video) GetVideoDetails() string {
	if x != nil {
		return x.VideoDetails
	}
	return ""
}

func (x *Video) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Video) GetVideoSubtitles() []*SubtitleEntry {
	if x != nil {
		return x.VideoSubtitles
	}
	return nil
}

type SubtitleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Text  string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Lang  string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"` // Optional, if you want to support multiple languages for subtitles
}

func (x *SubtitleEntry) Reset() {
	*x = SubtitleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtitleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtitleEntry) ProtoMessage() {}

func (x *SubtitleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtitleEntry.ProtoReflect.Descriptor instead.
func (*SubtitleEntry) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{9}
}

func (x *SubtitleEntry) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SubtitleEntry) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SubtitleEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SubtitleEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioDesc string `protobuf:"bytes,1,opt,name=audio_desc,json=audioDesc,proto3" json:"audio_desc,omitempty"`
	AudioId   string `protobuf:"bytes,2,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
	AudioPath string `protobuf:"bytes,3,opt,name=audio_path,json=audioPath,proto3" json:"audio_path,omitempty"`
	AudioUrl  string `protobuf:"bytes,4,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{10}
}

func (x *Audio) GetAudioDesc() string {
	if x != nil {
		return x.AudioDesc
	}
	return ""
}

func (x *Audio) GetAudioId() string {
	if x != nil {
		return x.AudioId
	}
	return ""
}

func (x *Audio) GetAudioPath() string {
	if x != nil {
		return x.AudioPath
	}
	return ""
}

func (x *Audio) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

type TextEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextEntry) Reset() {
	*x = TextEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEntry) ProtoMessage() {}

func (x *TextEntry) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEntry.ProtoReflect.Descriptor instead.
func (*TextEntry) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{11}
}

func (x *TextEntry) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *TextEntry) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Keywords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryKeywords   string `protobuf:"bytes,1,opt,name=primary_keywords,json=primaryKeywords,proto3" json:"primary_keywords,omitempty"`
	SecondaryKeywords string `protobuf:"bytes,2,opt,name=secondary_keywords,json=secondaryKeywords,proto3" json:"secondary_keywords,omitempty"`
}

func (x *Keywords) Reset() {
	*x = Keywords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keywords) ProtoMessage() {}

func (x *Keywords) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keywords.ProtoReflect.Descriptor instead.
func (*Keywords) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{12}
}

func (x *Keywords) GetPrimaryKeywords() string {
	if x != nil {
		return x.PrimaryKeywords
	}
	return ""
}

func (x *Keywords) GetSecondaryKeywords() string {
	if x != nil {
		return x.SecondaryKeywords
	}
	return ""
}

// Now, update the NewsArticle message
type NewsArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId         string          `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Title         []*TextEntry    `protobuf:"bytes,2,rep,name=title,proto3" json:"title,omitempty"`
	Summary       []*SummaryEntry `protobuf:"bytes,3,rep,name=summary,proto3" json:"summary,omitempty"`
	Url           string          `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	PublishedDate string          `protobuf:"bytes,5,opt,name=published_date,json=publishedDate,proto3" json:"published_date,omitempty"`
	AuthorInfo    []*Author       `protobuf:"bytes,6,rep,name=author_info,json=authorInfo,proto3" json:"author_info,omitempty"`
	CompanyInfo   []*CompanyInfo  `protobuf:"bytes,7,rep,name=company_info,json=companyInfo,proto3" json:"company_info,omitempty"`
	FileType      string          `protobuf:"bytes,8,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	CategoryInfo  *Category       `protobuf:"bytes,9,opt,name=category_info,json=categoryInfo,proto3" json:"category_info,omitempty"`
	Images        *Image          `protobuf:"bytes,10,opt,name=images,proto3" json:"images,omitempty"`
	Keywords      *Keywords       `protobuf:"bytes,11,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Region        string          `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	FullText      []*TextEntry    `protobuf:"bytes,13,rep,name=full_text,json=fullText,proto3" json:"full_text,omitempty"`
	Videos        *Video          `protobuf:"bytes,14,opt,name=videos,proto3" json:"videos,omitempty"`
	Audios        *Audio          `protobuf:"bytes,15,opt,name=audios,proto3" json:"audios,omitempty"` // Add other fields as required
}

func (x *NewsArticle) Reset() {
	*x = NewsArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsArticle) ProtoMessage() {}

func (x *NewsArticle) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsArticle.ProtoReflect.Descriptor instead.
func (*NewsArticle) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{13}
}

func (x *NewsArticle) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *NewsArticle) GetTitle() []*TextEntry {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *NewsArticle) GetSummary() []*SummaryEntry {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *NewsArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsArticle) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *NewsArticle) GetAuthorInfo() []*Author {
	if x != nil {
		return x.AuthorInfo
	}
	return nil
}

func (x *NewsArticle) GetCompanyInfo() []*CompanyInfo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *NewsArticle) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *NewsArticle) GetCategoryInfo() *Category {
	if x != nil {
		return x.CategoryInfo
	}
	return nil
}

func (x *NewsArticle) GetImages() *Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *NewsArticle) GetKeywords() *Keywords {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *NewsArticle) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NewsArticle) GetFullText() []*TextEntry {
	if x != nil {
		return x.FullText
	}
	return nil
}

func (x *NewsArticle) GetVideos() *Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *NewsArticle) GetAudios() *Audio {
	if x != nil {
		return x.Audios
	}
	return nil
}

// Request message for GetNewsInfo
type GetNewsInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"` // Unique identifier for the news article
}

func (x *GetNewsInfoReq) Reset() {
	*x = GetNewsInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsInfoReq) ProtoMessage() {}

func (x *GetNewsInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsInfoReq.ProtoReflect.Descriptor instead.
func (*GetNewsInfoReq) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{14}
}

func (x *GetNewsInfoReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

// Response message for GetNewsInfo
type GetNewsInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`        // Return code (0 for success, non-zero for errors)
	Msg     string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`         // Response message or error description
	Article *NewsArticle `protobuf:"bytes,3,opt,name=article,proto3" json:"article,omitempty"` // Detailed information about the news article
}

func (x *GetNewsInfoRsp) Reset() {
	*x = GetNewsInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_news_v1_news_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsInfoRsp) ProtoMessage() {}

func (x *GetNewsInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_news_v1_news_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsInfoRsp.ProtoReflect.Descriptor instead.
func (*GetNewsInfoRsp) Descriptor() ([]byte, []int) {
	return file_news_v1_news_proto_rawDescGZIP(), []int{15}
}

func (x *GetNewsInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetNewsInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNewsInfoRsp) GetArticle() *NewsArticle {
	if x != nil {
		return x.Article
	}
	return nil
}

var File_news_v1_news_proto protoreflect.FileDescriptor

var file_news_v1_news_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x71, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x22, 0x34, 0x0a, 0x0a, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x46, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x5a, 0x68, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x6d, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x67,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x0f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x7d, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x33, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x64, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xd6, 0x05, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x22, 0x27, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x77, 0x73, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0xe9, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_news_v1_news_proto_rawDescOnce sync.Once
	file_news_v1_news_proto_rawDescData = file_news_v1_news_proto_rawDesc
)

func file_news_v1_news_proto_rawDescGZIP() []byte {
	file_news_v1_news_proto_rawDescOnce.Do(func() {
		file_news_v1_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_news_v1_news_proto_rawDescData)
	})
	return file_news_v1_news_proto_rawDescData
}

var file_news_v1_news_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_news_v1_news_proto_goTypes = []interface{}{
	(*GetNewsListReq)(nil), // 0: chatfinbot.news.v1.GetNewsListReq
	(*GetNewsListRsp)(nil), // 1: chatfinbot.news.v1.GetNewsListRsp
	(*TitleEntry)(nil),     // 2: chatfinbot.news.v1.TitleEntry
	(*SummaryEntry)(nil),   // 3: chatfinbot.news.v1.SummaryEntry
	(*Author)(nil),         // 4: chatfinbot.news.v1.Author
	(*Category)(nil),       // 5: chatfinbot.news.v1.Category
	(*CompanyInfo)(nil),    // 6: chatfinbot.news.v1.CompanyInfo
	(*Image)(nil),          // 7: chatfinbot.news.v1.Image
	(*Video)(nil),          // 8: chatfinbot.news.v1.Video
	(*SubtitleEntry)(nil),  // 9: chatfinbot.news.v1.SubtitleEntry
	(*Audio)(nil),          // 10: chatfinbot.news.v1.Audio
	(*TextEntry)(nil),      // 11: chatfinbot.news.v1.TextEntry
	(*Keywords)(nil),       // 12: chatfinbot.news.v1.Keywords
	(*NewsArticle)(nil),    // 13: chatfinbot.news.v1.NewsArticle
	(*GetNewsInfoReq)(nil), // 14: chatfinbot.news.v1.GetNewsInfoReq
	(*GetNewsInfoRsp)(nil), // 15: chatfinbot.news.v1.GetNewsInfoRsp
}
var file_news_v1_news_proto_depIdxs = []int32{
	13, // 0: chatfinbot.news.v1.GetNewsListRsp.articles:type_name -> chatfinbot.news.v1.NewsArticle
	11, // 1: chatfinbot.news.v1.Video.video_descriptions:type_name -> chatfinbot.news.v1.TextEntry
	9,  // 2: chatfinbot.news.v1.Video.video_subtitles:type_name -> chatfinbot.news.v1.SubtitleEntry
	11, // 3: chatfinbot.news.v1.NewsArticle.title:type_name -> chatfinbot.news.v1.TextEntry
	3,  // 4: chatfinbot.news.v1.NewsArticle.summary:type_name -> chatfinbot.news.v1.SummaryEntry
	4,  // 5: chatfinbot.news.v1.NewsArticle.author_info:type_name -> chatfinbot.news.v1.Author
	6,  // 6: chatfinbot.news.v1.NewsArticle.company_info:type_name -> chatfinbot.news.v1.CompanyInfo
	5,  // 7: chatfinbot.news.v1.NewsArticle.category_info:type_name -> chatfinbot.news.v1.Category
	7,  // 8: chatfinbot.news.v1.NewsArticle.images:type_name -> chatfinbot.news.v1.Image
	12, // 9: chatfinbot.news.v1.NewsArticle.keywords:type_name -> chatfinbot.news.v1.Keywords
	11, // 10: chatfinbot.news.v1.NewsArticle.full_text:type_name -> chatfinbot.news.v1.TextEntry
	8,  // 11: chatfinbot.news.v1.NewsArticle.videos:type_name -> chatfinbot.news.v1.Video
	10, // 12: chatfinbot.news.v1.NewsArticle.audios:type_name -> chatfinbot.news.v1.Audio
	13, // 13: chatfinbot.news.v1.GetNewsInfoRsp.article:type_name -> chatfinbot.news.v1.NewsArticle
	0,  // 14: chatfinbot.news.v1.NewsService.GetNewsList:input_type -> chatfinbot.news.v1.GetNewsListReq
	14, // 15: chatfinbot.news.v1.NewsService.GetNewsInfo:input_type -> chatfinbot.news.v1.GetNewsInfoReq
	1,  // 16: chatfinbot.news.v1.NewsService.GetNewsList:output_type -> chatfinbot.news.v1.GetNewsListRsp
	15, // 17: chatfinbot.news.v1.NewsService.GetNewsInfo:output_type -> chatfinbot.news.v1.GetNewsInfoRsp
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_news_v1_news_proto_init() }
func file_news_v1_news_proto_init() {
	if File_news_v1_news_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_news_v1_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtitleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keywords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_news_v1_news_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_news_v1_news_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_news_v1_news_proto_goTypes,
		DependencyIndexes: file_news_v1_news_proto_depIdxs,
		MessageInfos:      file_news_v1_news_proto_msgTypes,
	}.Build()
	File_news_v1_news_proto = out.File
	file_news_v1_news_proto_rawDesc = nil
	file_news_v1_news_proto_goTypes = nil
	file_news_v1_news_proto_depIdxs = nil
}
