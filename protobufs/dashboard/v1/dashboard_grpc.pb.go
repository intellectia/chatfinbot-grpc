// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: dashboard/v1/dashboard.proto

package dashboardpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomActivityService_CreateCustomActivity_FullMethodName   = "/chatfinbot.dashboard.v1.CustomActivityService/CreateCustomActivity"
	CustomActivityService_GetAllCustomActivities_FullMethodName = "/chatfinbot.dashboard.v1.CustomActivityService/GetAllCustomActivities"
)

// CustomActivityServiceClient is the client API for CustomActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomActivityServiceClient interface {
	CreateCustomActivity(ctx context.Context, in *CreateCustomActivityRequest, opts ...grpc.CallOption) (*CustomActivityResponse, error)
	GetAllCustomActivities(ctx context.Context, in *GetAllCustomActivitiesRequest, opts ...grpc.CallOption) (*CustomActivitiesResponse, error)
}

type customActivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomActivityServiceClient(cc grpc.ClientConnInterface) CustomActivityServiceClient {
	return &customActivityServiceClient{cc}
}

func (c *customActivityServiceClient) CreateCustomActivity(ctx context.Context, in *CreateCustomActivityRequest, opts ...grpc.CallOption) (*CustomActivityResponse, error) {
	out := new(CustomActivityResponse)
	err := c.cc.Invoke(ctx, CustomActivityService_CreateCustomActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customActivityServiceClient) GetAllCustomActivities(ctx context.Context, in *GetAllCustomActivitiesRequest, opts ...grpc.CallOption) (*CustomActivitiesResponse, error) {
	out := new(CustomActivitiesResponse)
	err := c.cc.Invoke(ctx, CustomActivityService_GetAllCustomActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomActivityServiceServer is the server API for CustomActivityService service.
// All implementations must embed UnimplementedCustomActivityServiceServer
// for forward compatibility
type CustomActivityServiceServer interface {
	CreateCustomActivity(context.Context, *CreateCustomActivityRequest) (*CustomActivityResponse, error)
	GetAllCustomActivities(context.Context, *GetAllCustomActivitiesRequest) (*CustomActivitiesResponse, error)
	mustEmbedUnimplementedCustomActivityServiceServer()
}

// UnimplementedCustomActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomActivityServiceServer struct {
}

func (UnimplementedCustomActivityServiceServer) CreateCustomActivity(context.Context, *CreateCustomActivityRequest) (*CustomActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomActivity not implemented")
}
func (UnimplementedCustomActivityServiceServer) GetAllCustomActivities(context.Context, *GetAllCustomActivitiesRequest) (*CustomActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomActivities not implemented")
}
func (UnimplementedCustomActivityServiceServer) mustEmbedUnimplementedCustomActivityServiceServer() {}

// UnsafeCustomActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomActivityServiceServer will
// result in compilation errors.
type UnsafeCustomActivityServiceServer interface {
	mustEmbedUnimplementedCustomActivityServiceServer()
}

func RegisterCustomActivityServiceServer(s grpc.ServiceRegistrar, srv CustomActivityServiceServer) {
	s.RegisterService(&CustomActivityService_ServiceDesc, srv)
}

func _CustomActivityService_CreateCustomActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomActivityServiceServer).CreateCustomActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomActivityService_CreateCustomActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomActivityServiceServer).CreateCustomActivity(ctx, req.(*CreateCustomActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomActivityService_GetAllCustomActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCustomActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomActivityServiceServer).GetAllCustomActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomActivityService_GetAllCustomActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomActivityServiceServer).GetAllCustomActivities(ctx, req.(*GetAllCustomActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomActivityService_ServiceDesc is the grpc.ServiceDesc for CustomActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatfinbot.dashboard.v1.CustomActivityService",
	HandlerType: (*CustomActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomActivity",
			Handler:    _CustomActivityService_CreateCustomActivity_Handler,
		},
		{
			MethodName: "GetAllCustomActivities",
			Handler:    _CustomActivityService_GetAllCustomActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard/v1/dashboard.proto",
}
