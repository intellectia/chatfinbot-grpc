// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: dashboard/v1/dashboard.proto

package dashboardpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DashboardService_CreateCustomActivity_FullMethodName   = "/chatfinbot.dashboard.v1.DashboardService/CreateCustomActivity"
	DashboardService_GetAllCustomActivities_FullMethodName = "/chatfinbot.dashboard.v1.DashboardService/GetAllCustomActivities"
)

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	CreateCustomActivity(ctx context.Context, in *CreateCustomActivityRequest, opts ...grpc.CallOption) (*CreateCustomActivityResponse, error)
	GetAllCustomActivities(ctx context.Context, in *GetAllCustomActivitiesRequest, opts ...grpc.CallOption) (*GetAllCustomActivitiesResponse, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) CreateCustomActivity(ctx context.Context, in *CreateCustomActivityRequest, opts ...grpc.CallOption) (*CreateCustomActivityResponse, error) {
	out := new(CreateCustomActivityResponse)
	err := c.cc.Invoke(ctx, DashboardService_CreateCustomActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetAllCustomActivities(ctx context.Context, in *GetAllCustomActivitiesRequest, opts ...grpc.CallOption) (*GetAllCustomActivitiesResponse, error) {
	out := new(GetAllCustomActivitiesResponse)
	err := c.cc.Invoke(ctx, DashboardService_GetAllCustomActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility
type DashboardServiceServer interface {
	CreateCustomActivity(context.Context, *CreateCustomActivityRequest) (*CreateCustomActivityResponse, error)
	GetAllCustomActivities(context.Context, *GetAllCustomActivitiesRequest) (*GetAllCustomActivitiesResponse, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (UnimplementedDashboardServiceServer) CreateCustomActivity(context.Context, *CreateCustomActivityRequest) (*CreateCustomActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomActivity not implemented")
}
func (UnimplementedDashboardServiceServer) GetAllCustomActivities(context.Context, *GetAllCustomActivitiesRequest) (*GetAllCustomActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomActivities not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_CreateCustomActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CreateCustomActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_CreateCustomActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CreateCustomActivity(ctx, req.(*CreateCustomActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetAllCustomActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCustomActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetAllCustomActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetAllCustomActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetAllCustomActivities(ctx, req.(*GetAllCustomActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatfinbot.dashboard.v1.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomActivity",
			Handler:    _DashboardService_CreateCustomActivity_Handler,
		},
		{
			MethodName: "GetAllCustomActivities",
			Handler:    _DashboardService_GetAllCustomActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard/v1/dashboard.proto",
}
