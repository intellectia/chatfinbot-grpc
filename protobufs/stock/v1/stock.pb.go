// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: stock.proto

package stockpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimespanOpt int32

const (
	TimespanOpt_TimespanOptUnknown TimespanOpt = 0 // 未知（不要使用）
	TimespanOpt_TimespanOptSecond  TimespanOpt = 1 // 按秒
	TimespanOpt_TimespanOptMinute  TimespanOpt = 2 // 分钟
	TimespanOpt_TimespanOptHour    TimespanOpt = 3 // 按小时
	TimespanOpt_TimespanOptDay     TimespanOpt = 4 // 按天
	TimespanOpt_TimespanOptWeek    TimespanOpt = 5 // 星期
	TimespanOpt_TimespanOptMonth   TimespanOpt = 6 // 按月
	TimespanOpt_TimespanOptQuarter TimespanOpt = 7 // 按季度
	TimespanOpt_TimespanOptYear    TimespanOpt = 8 // 按年
)

// Enum value maps for TimespanOpt.
var (
	TimespanOpt_name = map[int32]string{
		0: "TimespanOptUnknown",
		1: "TimespanOptSecond",
		2: "TimespanOptMinute",
		3: "TimespanOptHour",
		4: "TimespanOptDay",
		5: "TimespanOptWeek",
		6: "TimespanOptMonth",
		7: "TimespanOptQuarter",
		8: "TimespanOptYear",
	}
	TimespanOpt_value = map[string]int32{
		"TimespanOptUnknown": 0,
		"TimespanOptSecond":  1,
		"TimespanOptMinute":  2,
		"TimespanOptHour":    3,
		"TimespanOptDay":     4,
		"TimespanOptWeek":    5,
		"TimespanOptMonth":   6,
		"TimespanOptQuarter": 7,
		"TimespanOptYear":    8,
	}
)

func (x TimespanOpt) Enum() *TimespanOpt {
	p := new(TimespanOpt)
	*p = x
	return p
}

func (x TimespanOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimespanOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_stock_proto_enumTypes[0].Descriptor()
}

func (TimespanOpt) Type() protoreflect.EnumType {
	return &file_stock_proto_enumTypes[0]
}

func (x TimespanOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimespanOpt.Descriptor instead.
func (TimespanOpt) EnumDescriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{0}
}

type QueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                               // 股票代码
	Multiplier int32       `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`                                  // 时间跨度
	Timespan   TimespanOpt `protobuf:"varint,3,opt,name=timespan,proto3,enum=chatfinbot.stock.v1.TimespanOpt" json:"timespan,omitempty"` // 时间的单位
	Timestamp  int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    // 时间戳，不传则截止到当前为止，传就截止到传的时间为止
	Count      int32       `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                            // 数量，最大传5000，建议传800
}

func (x *QueryReq) Reset() {
	*x = QueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReq) ProtoMessage() {}

func (x *QueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReq.ProtoReflect.Descriptor instead.
func (*QueryReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{0}
}

func (x *QueryReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryReq) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *QueryReq) GetTimespan() TimespanOpt {
	if x != nil {
		return x.Timespan
	}
	return TimespanOpt_TimespanOptUnknown
}

func (x *QueryReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QueryReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QueryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32      `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	Data *QueryData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 数据
}

func (x *QueryRsp) Reset() {
	*x = QueryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRsp) ProtoMessage() {}

func (x *QueryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRsp.ProtoReflect.Descriptor instead.
func (*QueryRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *QueryRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryRsp) GetData() *QueryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*StockData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                          // 股票数据
	LastTime int64        `protobuf:"varint,2,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"` // 截止时间
}

func (x *QueryData) Reset() {
	*x = QueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryData) ProtoMessage() {}

func (x *QueryData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryData.ProtoReflect.Descriptor instead.
func (*QueryData) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{2}
}

func (x *QueryData) GetList() []*StockData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryData) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

type StockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Close        float32 `protobuf:"fixed32,2,opt,name=close,proto3" json:"close,omitempty"`              // 收盘价
	High         float32 `protobuf:"fixed32,3,opt,name=high,proto3" json:"high,omitempty"`                // 最高价
	Low          float32 `protobuf:"fixed32,4,opt,name=low,proto3" json:"low,omitempty"`                  // 最低价
	Transactions int64   `protobuf:"varint,5,opt,name=transactions,proto3" json:"transactions,omitempty"` // 交易量
	Open         float32 `protobuf:"fixed32,6,opt,name=open,proto3" json:"open,omitempty"`                // 开盘价
	Timestamp    int64   `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`       // 时间戳
	Volume       float32 `protobuf:"fixed32,8,opt,name=volume,proto3" json:"volume,omitempty"`            // 成交额
	Vwap         float32 `protobuf:"fixed32,9,opt,name=vwap,proto3" json:"vwap,omitempty"`                // 。VWAP 是一种衡量某个证券在一定时间段内的平均价格的方法，这个价格是根据成交量加权计算的
	OTC          bool    `protobuf:"varint,10,opt,name=OTC,proto3" json:"OTC,omitempty"`                  // 场外交易
}

func (x *StockData) Reset() {
	*x = StockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockData) ProtoMessage() {}

func (x *StockData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockData.ProtoReflect.Descriptor instead.
func (*StockData) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{3}
}

func (x *StockData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockData) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockData) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockData) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockData) GetTransactions() int64 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *StockData) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockData) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockData) GetVwap() float32 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *StockData) GetOTC() bool {
	if x != nil {
		return x.OTC
	}
	return false
}

var File_stock_proto protoreflect.FileDescriptor

var file_stock_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb0, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x54, 0x43, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x4f, 0x54, 0x43, 0x2a, 0xd4, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x44, 0x61, 0x79, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x59, 0x65, 0x61, 0x72, 0x10, 0x08, 0x32, 0x6e,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x73, 0x70, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0b,
	0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_stock_proto_rawDescOnce sync.Once
	file_stock_proto_rawDescData = file_stock_proto_rawDesc
)

func file_stock_proto_rawDescGZIP() []byte {
	file_stock_proto_rawDescOnce.Do(func() {
		file_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_proto_rawDescData)
	})
	return file_stock_proto_rawDescData
}

var file_stock_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_stock_proto_goTypes = []interface{}{
	(TimespanOpt)(0),  // 0: chatfinbot.stock.v1.TimespanOpt
	(*QueryReq)(nil),  // 1: chatfinbot.stock.v1.QueryReq
	(*QueryRsp)(nil),  // 2: chatfinbot.stock.v1.QueryRsp
	(*QueryData)(nil), // 3: chatfinbot.stock.v1.QueryData
	(*StockData)(nil), // 4: chatfinbot.stock.v1.StockData
}
var file_stock_proto_depIdxs = []int32{
	0, // 0: chatfinbot.stock.v1.QueryReq.timespan:type_name -> chatfinbot.stock.v1.TimespanOpt
	3, // 1: chatfinbot.stock.v1.QueryRsp.data:type_name -> chatfinbot.stock.v1.QueryData
	4, // 2: chatfinbot.stock.v1.QueryData.list:type_name -> chatfinbot.stock.v1.StockData
	1, // 3: chatfinbot.stock.v1.StockService.Query:input_type -> chatfinbot.stock.v1.QueryReq
	2, // 4: chatfinbot.stock.v1.StockService.Query:output_type -> chatfinbot.stock.v1.QueryRsp
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_stock_proto_init() }
func file_stock_proto_init() {
	if File_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stock_proto_goTypes,
		DependencyIndexes: file_stock_proto_depIdxs,
		EnumInfos:         file_stock_proto_enumTypes,
		MessageInfos:      file_stock_proto_msgTypes,
	}.Build()
	File_stock_proto = out.File
	file_stock_proto_rawDesc = nil
	file_stock_proto_goTypes = nil
	file_stock_proto_depIdxs = nil
}
