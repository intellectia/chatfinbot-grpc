// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: stock.proto

package stockpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimespanOpt int32

const (
	TimespanOpt_TimespanOptUnknown TimespanOpt = 0 // 未知（不要使用）
	TimespanOpt_TimespanOptSecond  TimespanOpt = 1 // 按秒
	TimespanOpt_TimespanOptMinute  TimespanOpt = 2 // 分钟
	TimespanOpt_TimespanOptHour    TimespanOpt = 3 // 按小时
	TimespanOpt_TimespanOptDay     TimespanOpt = 4 // 按天
	TimespanOpt_TimespanOptWeek    TimespanOpt = 5 // 星期
	TimespanOpt_TimespanOptMonth   TimespanOpt = 6 // 按月
	TimespanOpt_TimespanOptQuarter TimespanOpt = 7 // 按季度
	TimespanOpt_TimespanOptYear    TimespanOpt = 8 // 按年
)

// Enum value maps for TimespanOpt.
var (
	TimespanOpt_name = map[int32]string{
		0: "TimespanOptUnknown",
		1: "TimespanOptSecond",
		2: "TimespanOptMinute",
		3: "TimespanOptHour",
		4: "TimespanOptDay",
		5: "TimespanOptWeek",
		6: "TimespanOptMonth",
		7: "TimespanOptQuarter",
		8: "TimespanOptYear",
	}
	TimespanOpt_value = map[string]int32{
		"TimespanOptUnknown": 0,
		"TimespanOptSecond":  1,
		"TimespanOptMinute":  2,
		"TimespanOptHour":    3,
		"TimespanOptDay":     4,
		"TimespanOptWeek":    5,
		"TimespanOptMonth":   6,
		"TimespanOptQuarter": 7,
		"TimespanOptYear":    8,
	}
)

func (x TimespanOpt) Enum() *TimespanOpt {
	p := new(TimespanOpt)
	*p = x
	return p
}

func (x TimespanOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimespanOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_stock_proto_enumTypes[0].Descriptor()
}

func (TimespanOpt) Type() protoreflect.EnumType {
	return &file_stock_proto_enumTypes[0]
}

func (x TimespanOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimespanOpt.Descriptor instead.
func (TimespanOpt) EnumDescriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{0}
}

type IndicatorsOpt int32

const (
	IndicatorsOpt_IndicatorsOptUnknown IndicatorsOpt = 0 // 未知（不要使用）
	IndicatorsOpt_IndicatorsOptSMA     IndicatorsOpt = 1 // sma
	IndicatorsOpt_IndicatorsOptEMA     IndicatorsOpt = 2 // ema
	IndicatorsOpt_IndicatorsOptMACD    IndicatorsOpt = 3 // macd
	IndicatorsOpt_IndicatorsOptRSI     IndicatorsOpt = 4 // rsi
)

// Enum value maps for IndicatorsOpt.
var (
	IndicatorsOpt_name = map[int32]string{
		0: "IndicatorsOptUnknown",
		1: "IndicatorsOptSMA",
		2: "IndicatorsOptEMA",
		3: "IndicatorsOptMACD",
		4: "IndicatorsOptRSI",
	}
	IndicatorsOpt_value = map[string]int32{
		"IndicatorsOptUnknown": 0,
		"IndicatorsOptSMA":     1,
		"IndicatorsOptEMA":     2,
		"IndicatorsOptMACD":    3,
		"IndicatorsOptRSI":     4,
	}
)

func (x IndicatorsOpt) Enum() *IndicatorsOpt {
	p := new(IndicatorsOpt)
	*p = x
	return p
}

func (x IndicatorsOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndicatorsOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_stock_proto_enumTypes[1].Descriptor()
}

func (IndicatorsOpt) Type() protoreflect.EnumType {
	return &file_stock_proto_enumTypes[1]
}

func (x IndicatorsOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndicatorsOpt.Descriptor instead.
func (IndicatorsOpt) EnumDescriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{1}
}

type QueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                               // 股票代码
	Multiplier int32       `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`                                  // 时间跨度
	Timespan   TimespanOpt `protobuf:"varint,3,opt,name=timespan,proto3,enum=chatfinbot.stock.v1.TimespanOpt" json:"timespan,omitempty"` // 时间的单位
	Timestamp  int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    // 时间戳，不传则截止到当前为止，传就截止到传的时间为止
	Count      int32       `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                            // 数量，最大传5000，建议传800
}

func (x *QueryReq) Reset() {
	*x = QueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReq) ProtoMessage() {}

func (x *QueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReq.ProtoReflect.Descriptor instead.
func (*QueryReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{0}
}

func (x *QueryReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *QueryReq) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *QueryReq) GetTimespan() TimespanOpt {
	if x != nil {
		return x.Timespan
	}
	return TimespanOpt_TimespanOptUnknown
}

func (x *QueryReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QueryReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type QueryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32      `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	Data *QueryData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 数据
}

func (x *QueryRsp) Reset() {
	*x = QueryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRsp) ProtoMessage() {}

func (x *QueryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRsp.ProtoReflect.Descriptor instead.
func (*QueryRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *QueryRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryRsp) GetData() *QueryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*StockData `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                          // 股票数据
	LastTime int64        `protobuf:"varint,2,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"` // 截止时间
}

func (x *QueryData) Reset() {
	*x = QueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryData) ProtoMessage() {}

func (x *QueryData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryData.ProtoReflect.Descriptor instead.
func (*QueryData) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{2}
}

func (x *QueryData) GetList() []*StockData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryData) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

type StockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Close        float64 `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`              // 收盘价
	High         float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`                // 最高价
	Low          float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`                  // 最低价
	Transactions int64   `protobuf:"varint,5,opt,name=transactions,proto3" json:"transactions,omitempty"` // 交易量
	Open         float64 `protobuf:"fixed64,6,opt,name=open,proto3" json:"open,omitempty"`                // 开盘价
	Timestamp    int64   `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`       // 时间戳
	Volume       float64 `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`            // 成交额
	Vwap         float64 `protobuf:"fixed64,9,opt,name=vwap,proto3" json:"vwap,omitempty"`                // 。VWAP 是一种衡量某个证券在一定时间段内的平均价格的方法，这个价格是根据成交量加权计算的
	Otc          bool    `protobuf:"varint,10,opt,name=otc,proto3" json:"otc,omitempty"`                  // 场外交易
}

func (x *StockData) Reset() {
	*x = StockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockData) ProtoMessage() {}

func (x *StockData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockData.ProtoReflect.Descriptor instead.
func (*StockData) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{3}
}

func (x *StockData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockData) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockData) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockData) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockData) GetTransactions() int64 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *StockData) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockData) GetVwap() float64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *StockData) GetOtc() bool {
	if x != nil {
		return x.Otc
	}
	return false
}

type IndicatorsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt       IndicatorsOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.stock.v1.IndicatorsOpt" json:"opt,omitempty"`         // 技术指标类型
	Code      string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                                               // 股票代码
	Timespan  TimespanOpt   `protobuf:"varint,3,opt,name=timespan,proto3,enum=chatfinbot.stock.v1.TimespanOpt" json:"timespan,omitempty"` // 时间的单位
	Timestamp int64         `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    // 时间戳，不传则截止到当前为止，传就截止到传的时间为止
	Count     int32         `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                            // 数量，最大传5000，建议传800
}

func (x *IndicatorsReq) Reset() {
	*x = IndicatorsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorsReq) ProtoMessage() {}

func (x *IndicatorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorsReq.ProtoReflect.Descriptor instead.
func (*IndicatorsReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{4}
}

func (x *IndicatorsReq) GetOpt() IndicatorsOpt {
	if x != nil {
		return x.Opt
	}
	return IndicatorsOpt_IndicatorsOptUnknown
}

func (x *IndicatorsReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *IndicatorsReq) GetTimespan() TimespanOpt {
	if x != nil {
		return x.Timespan
	}
	return TimespanOpt_TimespanOptUnknown
}

func (x *IndicatorsReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IndicatorsReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type IndicatorsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32           `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	Data *IndicatorsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // 数据
}

func (x *IndicatorsRsp) Reset() {
	*x = IndicatorsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorsRsp) ProtoMessage() {}

func (x *IndicatorsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorsRsp.ProtoReflect.Descriptor instead.
func (*IndicatorsRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{5}
}

func (x *IndicatorsRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *IndicatorsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *IndicatorsRsp) GetData() *IndicatorsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type IndicatorsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*IndicatorInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                          // 股票数据
	LastTime int64            `protobuf:"varint,2,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"` // 截止时间
}

func (x *IndicatorsData) Reset() {
	*x = IndicatorsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorsData) ProtoMessage() {}

func (x *IndicatorsData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorsData.ProtoReflect.Descriptor instead.
func (*IndicatorsData) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{6}
}

func (x *IndicatorsData) GetList() []*IndicatorInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *IndicatorsData) GetLastTime() int64 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

type IndicatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  // 时间戳
	Value     float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`         // 时间戳
	Histogram float64 `protobuf:"fixed64,3,opt,name=histogram,proto3" json:"histogram,omitempty"` //
	Signal    float64 `protobuf:"fixed64,4,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *IndicatorInfo) Reset() {
	*x = IndicatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorInfo) ProtoMessage() {}

func (x *IndicatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorInfo.ProtoReflect.Descriptor instead.
func (*IndicatorInfo) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{7}
}

func (x *IndicatorInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IndicatorInfo) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *IndicatorInfo) GetHistogram() float64 {
	if x != nil {
		return x.Histogram
	}
	return 0
}

func (x *IndicatorInfo) GetSignal() float64 {
	if x != nil {
		return x.Signal
	}
	return 0
}

type WatchlistsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchlistsReq) Reset() {
	*x = WatchlistsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchlistsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchlistsReq) ProtoMessage() {}

func (x *WatchlistsReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchlistsReq.ProtoReflect.Descriptor instead.
func (*WatchlistsReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{8}
}

type WatchlistsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32             `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*WatchlistsData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *WatchlistsRsp) Reset() {
	*x = WatchlistsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchlistsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchlistsRsp) ProtoMessage() {}

func (x *WatchlistsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchlistsRsp.ProtoReflect.Descriptor instead.
func (*WatchlistsRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{9}
}

func (x *WatchlistsRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *WatchlistsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *WatchlistsRsp) GetList() []*WatchlistsData {
	if x != nil {
		return x.List
	}
	return nil
}

type WatchlistsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid        int64              `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`                                 // pid
	Id         int64              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                   // id
	Name       string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                // 名称
	Sort       float64            `protobuf:"fixed64,4,opt,name=sort,proto3" json:"sort,omitempty"`                              // 排序
	List       []*StockWatchlists `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`                                // 收藏的股票
	CreateTime int64              `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime int64              `protobuf:"varint,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间fi
}

func (x *WatchlistsData) Reset() {
	*x = WatchlistsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchlistsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchlistsData) ProtoMessage() {}

func (x *WatchlistsData) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchlistsData.ProtoReflect.Descriptor instead.
func (*WatchlistsData) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{10}
}

func (x *WatchlistsData) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *WatchlistsData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WatchlistsData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WatchlistsData) GetSort() float64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *WatchlistsData) GetList() []*StockWatchlists {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WatchlistsData) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *WatchlistsData) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type StockWatchlists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                // 代码
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                // 公司
	Symbol     string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                            // 代码
	Sort       float64 `protobuf:"fixed64,4,opt,name=sort,proto3" json:"sort,omitempty"`                              // 排序
	CreateTime int64   `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	Pid        int64   `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`                                 // 分类id
}

func (x *StockWatchlists) Reset() {
	*x = StockWatchlists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockWatchlists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockWatchlists) ProtoMessage() {}

func (x *StockWatchlists) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockWatchlists.ProtoReflect.Descriptor instead.
func (*StockWatchlists) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{11}
}

func (x *StockWatchlists) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockWatchlists) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockWatchlists) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockWatchlists) GetSort() float64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *StockWatchlists) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *StockWatchlists) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type CreateWatchlistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 创建名称
}

func (x *CreateWatchlistReq) Reset() {
	*x = CreateWatchlistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWatchlistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWatchlistReq) ProtoMessage() {}

func (x *CreateWatchlistReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWatchlistReq.ProtoReflect.Descriptor instead.
func (*CreateWatchlistReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{12}
}

func (x *CreateWatchlistReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateWatchlistRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
	Id  int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`   // 返回id
}

func (x *CreateWatchlistRsp) Reset() {
	*x = CreateWatchlistRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWatchlistRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWatchlistRsp) ProtoMessage() {}

func (x *CreateWatchlistRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWatchlistRsp.ProtoReflect.Descriptor instead.
func (*CreateWatchlistRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{13}
}

func (x *CreateWatchlistRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CreateWatchlistRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateWatchlistRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelWatchlistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id
}

func (x *DelWatchlistReq) Reset() {
	*x = DelWatchlistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelWatchlistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelWatchlistReq) ProtoMessage() {}

func (x *DelWatchlistReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelWatchlistReq.ProtoReflect.Descriptor instead.
func (*DelWatchlistReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{14}
}

func (x *DelWatchlistReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelWatchlistRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *DelWatchlistRsp) Reset() {
	*x = DelWatchlistRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelWatchlistRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelWatchlistRsp) ProtoMessage() {}

func (x *DelWatchlistRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelWatchlistRsp.ProtoReflect.Descriptor instead.
func (*DelWatchlistRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{15}
}

func (x *DelWatchlistRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *DelWatchlistRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type AddToWatchlistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid  int64  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`  // id
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` // code
}

func (x *AddToWatchlistReq) Reset() {
	*x = AddToWatchlistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToWatchlistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToWatchlistReq) ProtoMessage() {}

func (x *AddToWatchlistReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToWatchlistReq.ProtoReflect.Descriptor instead.
func (*AddToWatchlistReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{16}
}

func (x *AddToWatchlistReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AddToWatchlistReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AddToWatchlistRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *AddToWatchlistRsp) Reset() {
	*x = AddToWatchlistRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddToWatchlistRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToWatchlistRsp) ProtoMessage() {}

func (x *AddToWatchlistRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToWatchlistRsp.ProtoReflect.Descriptor instead.
func (*AddToWatchlistRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{17}
}

func (x *AddToWatchlistRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *AddToWatchlistRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DelFromWatchlistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid  int64  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`  // id
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` // code
}

func (x *DelFromWatchlistReq) Reset() {
	*x = DelFromWatchlistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFromWatchlistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFromWatchlistReq) ProtoMessage() {}

func (x *DelFromWatchlistReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFromWatchlistReq.ProtoReflect.Descriptor instead.
func (*DelFromWatchlistReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{18}
}

func (x *DelFromWatchlistReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DelFromWatchlistReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type DelFromWatchlistRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *DelFromWatchlistRsp) Reset() {
	*x = DelFromWatchlistRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelFromWatchlistRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFromWatchlistRsp) ProtoMessage() {}

func (x *DelFromWatchlistRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFromWatchlistRsp.ProtoReflect.Descriptor instead.
func (*DelFromWatchlistRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{19}
}

func (x *DelFromWatchlistRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *DelFromWatchlistRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MoveFromWatchlistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPid    int64  `protobuf:"varint,1,opt,name=src_pid,json=srcPid,proto3" json:"src_pid,omitempty"`          // 原id
	TargetPid int64  `protobuf:"varint,2,opt,name=target_pid,json=targetPid,proto3" json:"target_pid,omitempty"` // 目标id
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                             // code
}

func (x *MoveFromWatchlistReq) Reset() {
	*x = MoveFromWatchlistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFromWatchlistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFromWatchlistReq) ProtoMessage() {}

func (x *MoveFromWatchlistReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFromWatchlistReq.ProtoReflect.Descriptor instead.
func (*MoveFromWatchlistReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{20}
}

func (x *MoveFromWatchlistReq) GetSrcPid() int64 {
	if x != nil {
		return x.SrcPid
	}
	return 0
}

func (x *MoveFromWatchlistReq) GetTargetPid() int64 {
	if x != nil {
		return x.TargetPid
	}
	return 0
}

func (x *MoveFromWatchlistReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type MoveFromWatchlistRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *MoveFromWatchlistRsp) Reset() {
	*x = MoveFromWatchlistRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFromWatchlistRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFromWatchlistRsp) ProtoMessage() {}

func (x *MoveFromWatchlistRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFromWatchlistRsp.ProtoReflect.Descriptor instead.
func (*MoveFromWatchlistRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{21}
}

func (x *MoveFromWatchlistRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *MoveFromWatchlistRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SortFromWatchlistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid        int64  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`                                // id
	TargetCode string `protobuf:"bytes,2,opt,name=target_code,json=targetCode,proto3" json:"target_code,omitempty"` // 目标code
	Code       string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                               // code
	Type       int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`                              // 类型  0=排在前面 1=排在后面
}

func (x *SortFromWatchlistReq) Reset() {
	*x = SortFromWatchlistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortFromWatchlistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortFromWatchlistReq) ProtoMessage() {}

func (x *SortFromWatchlistReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortFromWatchlistReq.ProtoReflect.Descriptor instead.
func (*SortFromWatchlistReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{22}
}

func (x *SortFromWatchlistReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SortFromWatchlistReq) GetTargetCode() string {
	if x != nil {
		return x.TargetCode
	}
	return ""
}

func (x *SortFromWatchlistReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SortFromWatchlistReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type SortFromWatchlistRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *SortFromWatchlistRsp) Reset() {
	*x = SortFromWatchlistRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortFromWatchlistRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortFromWatchlistRsp) ProtoMessage() {}

func (x *SortFromWatchlistRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortFromWatchlistRsp.ProtoReflect.Descriptor instead.
func (*SortFromWatchlistRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{23}
}

func (x *SortFromWatchlistRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SortFromWatchlistRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RealtimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes string `protobuf:"bytes,1,opt,name=codes,proto3" json:"codes,omitempty"` // 公司代码。逗号分隔
}

func (x *RealtimeReq) Reset() {
	*x = RealtimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealtimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealtimeReq) ProtoMessage() {}

func (x *RealtimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealtimeReq.ProtoReflect.Descriptor instead.
func (*RealtimeReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{24}
}

func (x *RealtimeReq) GetCodes() string {
	if x != nil {
		return x.Codes
	}
	return ""
}

type RealtimeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32            `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*StockRealTime `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 列表数据
}

func (x *RealtimeRsp) Reset() {
	*x = RealtimeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealtimeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealtimeRsp) ProtoMessage() {}

func (x *RealtimeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealtimeRsp.ProtoReflect.Descriptor instead.
func (*RealtimeRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{25}
}

func (x *RealtimeRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *RealtimeRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RealtimeRsp) GetList() []*StockRealTime {
	if x != nil {
		return x.List
	}
	return nil
}

type StockRealTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Close        float64 `protobuf:"fixed64,2,opt,name=close,proto3" json:"close,omitempty"`                                   // 收盘价
	High         float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`                                     // 最高价
	Low          float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`                                       // 最低价
	Transactions int64   `protobuf:"varint,5,opt,name=transactions,proto3" json:"transactions,omitempty"`                      // 交易量
	Open         float64 `protobuf:"fixed64,6,opt,name=open,proto3" json:"open,omitempty"`                                     // 开盘价
	Timestamp    int64   `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                            // 时间戳
	Volume       float64 `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`                                 // 成交额
	Vwap         float64 `protobuf:"fixed64,9,opt,name=vwap,proto3" json:"vwap,omitempty"`                                     // 。VWAP 是一种衡量某个证券在一定时间段内的平均价格的方法，这个价格是根据成交量加权计算的
	Otc          bool    `protobuf:"varint,10,opt,name=otc,proto3" json:"otc,omitempty"`                                       // 场外交易
	PreClose     float64 `protobuf:"fixed64,11,opt,name=pre_close,json=preClose,proto3" json:"pre_close,omitempty"`            // 前一个收盘价
	PreHigh      float64 `protobuf:"fixed64,12,opt,name=pre_high,json=preHigh,proto3" json:"pre_high,omitempty"`               // 前一个最高价
	PreLow       float64 `protobuf:"fixed64,13,opt,name=pre_low,json=preLow,proto3" json:"pre_low,omitempty"`                  // 前一个最低价
	PreOpen      float64 `protobuf:"fixed64,15,opt,name=pre_open,json=preOpen,proto3" json:"pre_open,omitempty"`               // 前一个开盘价
	PreTimestamp int64   `protobuf:"varint,16,opt,name=pre_timestamp,json=preTimestamp,proto3" json:"pre_timestamp,omitempty"` // 前一个时间戳
	PreVolume    float64 `protobuf:"fixed64,17,opt,name=pre_volume,json=preVolume,proto3" json:"pre_volume,omitempty"`         // 前一个成交额
	PreVwap      float64 `protobuf:"fixed64,18,opt,name=pre_vwap,json=preVwap,proto3" json:"pre_vwap,omitempty"`               // 前一个VWAP
	Change       float64 `protobuf:"fixed64,19,opt,name=change,proto3" json:"change,omitempty"`                                // 改变
	ChangeRatio  float64 `protobuf:"fixed64,20,opt,name=change_ratio,json=changeRatio,proto3" json:"change_ratio,omitempty"`   // 比例
}

func (x *StockRealTime) Reset() {
	*x = StockRealTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockRealTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockRealTime) ProtoMessage() {}

func (x *StockRealTime) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockRealTime.ProtoReflect.Descriptor instead.
func (*StockRealTime) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{26}
}

func (x *StockRealTime) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockRealTime) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *StockRealTime) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *StockRealTime) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *StockRealTime) GetTransactions() int64 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *StockRealTime) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockRealTime) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StockRealTime) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *StockRealTime) GetVwap() float64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *StockRealTime) GetOtc() bool {
	if x != nil {
		return x.Otc
	}
	return false
}

func (x *StockRealTime) GetPreClose() float64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *StockRealTime) GetPreHigh() float64 {
	if x != nil {
		return x.PreHigh
	}
	return 0
}

func (x *StockRealTime) GetPreLow() float64 {
	if x != nil {
		return x.PreLow
	}
	return 0
}

func (x *StockRealTime) GetPreOpen() float64 {
	if x != nil {
		return x.PreOpen
	}
	return 0
}

func (x *StockRealTime) GetPreTimestamp() int64 {
	if x != nil {
		return x.PreTimestamp
	}
	return 0
}

func (x *StockRealTime) GetPreVolume() float64 {
	if x != nil {
		return x.PreVolume
	}
	return 0
}

func (x *StockRealTime) GetPreVwap() float64 {
	if x != nil {
		return x.PreVwap
	}
	return 0
}

func (x *StockRealTime) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *StockRealTime) GetChangeRatio() float64 {
	if x != nil {
		return x.ChangeRatio
	}
	return 0
}

type GetEventTimelineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       string      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                               // 股票代码
	Multiplier int32       `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`                                  // 时间跨度
	Timespan   TimespanOpt `protobuf:"varint,3,opt,name=timespan,proto3,enum=chatfinbot.stock.v1.TimespanOpt" json:"timespan,omitempty"` // 时间的单位
	Timestamp  int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    // 时间戳，不传则截止到当前为止，传就截止到传的时间为止
	Count      int32       `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                            // 数量，最大传5000，建议传800
}

func (x *GetEventTimelineReq) Reset() {
	*x = GetEventTimelineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventTimelineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventTimelineReq) ProtoMessage() {}

func (x *GetEventTimelineReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventTimelineReq.ProtoReflect.Descriptor instead.
func (*GetEventTimelineReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{27}
}

func (x *GetEventTimelineReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetEventTimelineReq) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *GetEventTimelineReq) GetTimespan() TimespanOpt {
	if x != nil {
		return x.Timespan
	}
	return TimespanOpt_TimespanOptUnknown
}

func (x *GetEventTimelineReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetEventTimelineReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetEventTimelineRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32            `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*EventTimeline `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 列表数据
}

func (x *GetEventTimelineRsp) Reset() {
	*x = GetEventTimelineRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventTimelineRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventTimelineRsp) ProtoMessage() {}

func (x *GetEventTimelineRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventTimelineRsp.ProtoReflect.Descriptor instead.
func (*GetEventTimelineRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{28}
}

func (x *GetEventTimelineRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetEventTimelineRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetEventTimelineRsp) GetList() []*EventTimeline {
	if x != nil {
		return x.List
	}
	return nil
}

type EventTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
	Count     int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`         //
}

func (x *EventTimeline) Reset() {
	*x = EventTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimeline) ProtoMessage() {}

func (x *EventTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimeline.ProtoReflect.Descriptor instead.
func (*EventTimeline) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{29}
}

func (x *EventTimeline) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventTimeline) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetEventListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`            // 股票代码
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
}

func (x *GetEventListReq) Reset() {
	*x = GetEventListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventListReq) ProtoMessage() {}

func (x *GetEventListReq) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventListReq.ProtoReflect.Descriptor instead.
func (*GetEventListReq) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{30}
}

func (x *GetEventListReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetEventListReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetEventListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*EventList `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 列表数据
}

func (x *GetEventListRsp) Reset() {
	*x = GetEventListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventListRsp) ProtoMessage() {}

func (x *GetEventListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventListRsp.ProtoReflect.Descriptor instead.
func (*GetEventListRsp) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{31}
}

func (x *GetEventListRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetEventListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetEventListRsp) GetList() []*EventList {
	if x != nil {
		return x.List
	}
	return nil
}

type EventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId     string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"` // doc id
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`              // 标题
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`     // 时间戳
	Category  string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`        // 分类
	Region    string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`            // 的确
}

func (x *EventList) Reset() {
	*x = EventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventList) ProtoMessage() {}

func (x *EventList) ProtoReflect() protoreflect.Message {
	mi := &file_stock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventList.ProtoReflect.Descriptor instead.
func (*EventList) Descriptor() ([]byte, []int) {
	return file_stock_proto_rawDescGZIP(), []int{32}
}

func (x *EventList) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *EventList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EventList) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventList) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EventList) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_stock_proto protoreflect.FileDescriptor

var file_stock_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb0, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6f, 0x74, 0x63, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x03, 0x6f, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x0d, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x22, 0x6c, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x35, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x39, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x37, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3b, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x62, 0x0a, 0x14, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x50, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x71, 0x0a, 0x14, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x23, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xf9, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x76, 0x77, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6f, 0x74, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x76,
	0x77, 0x61, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x56, 0x77,
	0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xbb, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x69, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2a, 0xd4, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x44, 0x61, 0x79, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x57, 0x65,
	0x65, 0x6b, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x59, 0x65, 0x61, 0x72, 0x10, 0x08, 0x2a, 0x82, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x4f, 0x70, 0x74, 0x53, 0x4d, 0x41, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x45, 0x4d, 0x41, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74,
	0x4d, 0x41, 0x43, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x74, 0x52, 0x53, 0x49, 0x10, 0x04, 0x32, 0xa8, 0x0c, 0x0a,
	0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x73, 0x70, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x72, 0x0a,
	0x0a, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x72, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x2f, 0x64, 0x65, 0x6c, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x2d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x95,
	0x01, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x73, 0x6f, 0x72, 0x74,
	0x2d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x6a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x73, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x78, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stock_proto_rawDescOnce sync.Once
	file_stock_proto_rawDescData = file_stock_proto_rawDesc
)

func file_stock_proto_rawDescGZIP() []byte {
	file_stock_proto_rawDescOnce.Do(func() {
		file_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_stock_proto_rawDescData)
	})
	return file_stock_proto_rawDescData
}

var file_stock_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_stock_proto_goTypes = []interface{}{
	(TimespanOpt)(0),             // 0: chatfinbot.stock.v1.TimespanOpt
	(IndicatorsOpt)(0),           // 1: chatfinbot.stock.v1.IndicatorsOpt
	(*QueryReq)(nil),             // 2: chatfinbot.stock.v1.QueryReq
	(*QueryRsp)(nil),             // 3: chatfinbot.stock.v1.QueryRsp
	(*QueryData)(nil),            // 4: chatfinbot.stock.v1.QueryData
	(*StockData)(nil),            // 5: chatfinbot.stock.v1.StockData
	(*IndicatorsReq)(nil),        // 6: chatfinbot.stock.v1.IndicatorsReq
	(*IndicatorsRsp)(nil),        // 7: chatfinbot.stock.v1.IndicatorsRsp
	(*IndicatorsData)(nil),       // 8: chatfinbot.stock.v1.IndicatorsData
	(*IndicatorInfo)(nil),        // 9: chatfinbot.stock.v1.IndicatorInfo
	(*WatchlistsReq)(nil),        // 10: chatfinbot.stock.v1.WatchlistsReq
	(*WatchlistsRsp)(nil),        // 11: chatfinbot.stock.v1.WatchlistsRsp
	(*WatchlistsData)(nil),       // 12: chatfinbot.stock.v1.WatchlistsData
	(*StockWatchlists)(nil),      // 13: chatfinbot.stock.v1.StockWatchlists
	(*CreateWatchlistReq)(nil),   // 14: chatfinbot.stock.v1.CreateWatchlistReq
	(*CreateWatchlistRsp)(nil),   // 15: chatfinbot.stock.v1.CreateWatchlistRsp
	(*DelWatchlistReq)(nil),      // 16: chatfinbot.stock.v1.DelWatchlistReq
	(*DelWatchlistRsp)(nil),      // 17: chatfinbot.stock.v1.DelWatchlistRsp
	(*AddToWatchlistReq)(nil),    // 18: chatfinbot.stock.v1.AddToWatchlistReq
	(*AddToWatchlistRsp)(nil),    // 19: chatfinbot.stock.v1.AddToWatchlistRsp
	(*DelFromWatchlistReq)(nil),  // 20: chatfinbot.stock.v1.DelFromWatchlistReq
	(*DelFromWatchlistRsp)(nil),  // 21: chatfinbot.stock.v1.DelFromWatchlistRsp
	(*MoveFromWatchlistReq)(nil), // 22: chatfinbot.stock.v1.MoveFromWatchlistReq
	(*MoveFromWatchlistRsp)(nil), // 23: chatfinbot.stock.v1.MoveFromWatchlistRsp
	(*SortFromWatchlistReq)(nil), // 24: chatfinbot.stock.v1.SortFromWatchlistReq
	(*SortFromWatchlistRsp)(nil), // 25: chatfinbot.stock.v1.SortFromWatchlistRsp
	(*RealtimeReq)(nil),          // 26: chatfinbot.stock.v1.RealtimeReq
	(*RealtimeRsp)(nil),          // 27: chatfinbot.stock.v1.RealtimeRsp
	(*StockRealTime)(nil),        // 28: chatfinbot.stock.v1.StockRealTime
	(*GetEventTimelineReq)(nil),  // 29: chatfinbot.stock.v1.GetEventTimelineReq
	(*GetEventTimelineRsp)(nil),  // 30: chatfinbot.stock.v1.GetEventTimelineRsp
	(*EventTimeline)(nil),        // 31: chatfinbot.stock.v1.EventTimeline
	(*GetEventListReq)(nil),      // 32: chatfinbot.stock.v1.GetEventListReq
	(*GetEventListRsp)(nil),      // 33: chatfinbot.stock.v1.GetEventListRsp
	(*EventList)(nil),            // 34: chatfinbot.stock.v1.EventList
}
var file_stock_proto_depIdxs = []int32{
	0,  // 0: chatfinbot.stock.v1.QueryReq.timespan:type_name -> chatfinbot.stock.v1.TimespanOpt
	4,  // 1: chatfinbot.stock.v1.QueryRsp.data:type_name -> chatfinbot.stock.v1.QueryData
	5,  // 2: chatfinbot.stock.v1.QueryData.list:type_name -> chatfinbot.stock.v1.StockData
	1,  // 3: chatfinbot.stock.v1.IndicatorsReq.opt:type_name -> chatfinbot.stock.v1.IndicatorsOpt
	0,  // 4: chatfinbot.stock.v1.IndicatorsReq.timespan:type_name -> chatfinbot.stock.v1.TimespanOpt
	8,  // 5: chatfinbot.stock.v1.IndicatorsRsp.data:type_name -> chatfinbot.stock.v1.IndicatorsData
	9,  // 6: chatfinbot.stock.v1.IndicatorsData.list:type_name -> chatfinbot.stock.v1.IndicatorInfo
	12, // 7: chatfinbot.stock.v1.WatchlistsRsp.list:type_name -> chatfinbot.stock.v1.WatchlistsData
	13, // 8: chatfinbot.stock.v1.WatchlistsData.list:type_name -> chatfinbot.stock.v1.StockWatchlists
	28, // 9: chatfinbot.stock.v1.RealtimeRsp.list:type_name -> chatfinbot.stock.v1.StockRealTime
	0,  // 10: chatfinbot.stock.v1.GetEventTimelineReq.timespan:type_name -> chatfinbot.stock.v1.TimespanOpt
	31, // 11: chatfinbot.stock.v1.GetEventTimelineRsp.list:type_name -> chatfinbot.stock.v1.EventTimeline
	34, // 12: chatfinbot.stock.v1.GetEventListRsp.list:type_name -> chatfinbot.stock.v1.EventList
	2,  // 13: chatfinbot.stock.v1.StockService.Query:input_type -> chatfinbot.stock.v1.QueryReq
	6,  // 14: chatfinbot.stock.v1.StockService.Indicators:input_type -> chatfinbot.stock.v1.IndicatorsReq
	10, // 15: chatfinbot.stock.v1.StockService.Watchlists:input_type -> chatfinbot.stock.v1.WatchlistsReq
	14, // 16: chatfinbot.stock.v1.StockService.CreateWatchlist:input_type -> chatfinbot.stock.v1.CreateWatchlistReq
	16, // 17: chatfinbot.stock.v1.StockService.DelWatchlist:input_type -> chatfinbot.stock.v1.DelWatchlistReq
	18, // 18: chatfinbot.stock.v1.StockService.AddToWatchlist:input_type -> chatfinbot.stock.v1.AddToWatchlistReq
	20, // 19: chatfinbot.stock.v1.StockService.DelFromWatchlist:input_type -> chatfinbot.stock.v1.DelFromWatchlistReq
	22, // 20: chatfinbot.stock.v1.StockService.MoveFromWatchlist:input_type -> chatfinbot.stock.v1.MoveFromWatchlistReq
	24, // 21: chatfinbot.stock.v1.StockService.SortFromWatchlist:input_type -> chatfinbot.stock.v1.SortFromWatchlistReq
	26, // 22: chatfinbot.stock.v1.StockService.Realtime:input_type -> chatfinbot.stock.v1.RealtimeReq
	29, // 23: chatfinbot.stock.v1.StockService.GetEventTimeline:input_type -> chatfinbot.stock.v1.GetEventTimelineReq
	32, // 24: chatfinbot.stock.v1.StockService.GetEventList:input_type -> chatfinbot.stock.v1.GetEventListReq
	3,  // 25: chatfinbot.stock.v1.StockService.Query:output_type -> chatfinbot.stock.v1.QueryRsp
	7,  // 26: chatfinbot.stock.v1.StockService.Indicators:output_type -> chatfinbot.stock.v1.IndicatorsRsp
	11, // 27: chatfinbot.stock.v1.StockService.Watchlists:output_type -> chatfinbot.stock.v1.WatchlistsRsp
	15, // 28: chatfinbot.stock.v1.StockService.CreateWatchlist:output_type -> chatfinbot.stock.v1.CreateWatchlistRsp
	17, // 29: chatfinbot.stock.v1.StockService.DelWatchlist:output_type -> chatfinbot.stock.v1.DelWatchlistRsp
	19, // 30: chatfinbot.stock.v1.StockService.AddToWatchlist:output_type -> chatfinbot.stock.v1.AddToWatchlistRsp
	21, // 31: chatfinbot.stock.v1.StockService.DelFromWatchlist:output_type -> chatfinbot.stock.v1.DelFromWatchlistRsp
	23, // 32: chatfinbot.stock.v1.StockService.MoveFromWatchlist:output_type -> chatfinbot.stock.v1.MoveFromWatchlistRsp
	25, // 33: chatfinbot.stock.v1.StockService.SortFromWatchlist:output_type -> chatfinbot.stock.v1.SortFromWatchlistRsp
	27, // 34: chatfinbot.stock.v1.StockService.Realtime:output_type -> chatfinbot.stock.v1.RealtimeRsp
	30, // 35: chatfinbot.stock.v1.StockService.GetEventTimeline:output_type -> chatfinbot.stock.v1.GetEventTimelineRsp
	33, // 36: chatfinbot.stock.v1.StockService.GetEventList:output_type -> chatfinbot.stock.v1.GetEventListRsp
	25, // [25:37] is the sub-list for method output_type
	13, // [13:25] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_stock_proto_init() }
func file_stock_proto_init() {
	if File_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchlistsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchlistsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchlistsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockWatchlists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWatchlistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWatchlistRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelWatchlistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelWatchlistRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToWatchlistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddToWatchlistRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFromWatchlistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelFromWatchlistRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFromWatchlistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFromWatchlistRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortFromWatchlistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortFromWatchlistRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealtimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealtimeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockRealTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventTimelineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventTimelineRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stock_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stock_proto_goTypes,
		DependencyIndexes: file_stock_proto_depIdxs,
		EnumInfos:         file_stock_proto_enumTypes,
		MessageInfos:      file_stock_proto_msgTypes,
	}.Build()
	File_stock_proto = out.File
	file_stock_proto_rawDesc = nil
	file_stock_proto_goTypes = nil
	file_stock_proto_depIdxs = nil
}
