syntax = "proto3";

package chatfinbot.stock.v1;

option go_package = ".;stockpb";
import "google/api/annotations.proto";

service StockService {
    // 查询数据
    rpc Query(QueryReq) returns (QueryRsp) {
        option (google.api.http) = {
			get: "/v1/stock/query",
		};
    };

    // 技术指标
    rpc Indicators(IndicatorsReq) returns (IndicatorsRsp) {
        option (google.api.http) = {
			get: "/v1/stock/indicators",
		};
    };

    // 监视列表
    rpc Watchlists(WatchlistsReq) returns (WatchlistsRsp) {
        option (google.api.http) = {
			get: "/v1/stock/watchlists",
		};
    };

    // 创建
    rpc CreateWatchlist(CreateWatchlistReq) returns (CreateWatchlistRsp) {
        option (google.api.http) = {
			post: "/v1/stock/watchlists/create",
            body: "*",
		};
    };

    // 删除
    rpc DelWatchlist(DelWatchlistReq) returns (DelWatchlistRsp) {
        option (google.api.http) = {
			post: "/v1/stock/watchlists/del",
            body: "*",
		};
    };

    // 添加
    rpc AddToWatchlist(AddToWatchlistReq) returns (AddToWatchlistRsp) {
        option (google.api.http) = {
			post: "/v1/stock/watchlists/add-stock",
            body: "*",
		};
    };

    // 删除
    rpc DelFromWatchlist(DelFromWatchlistReq) returns (DelFromWatchlistRsp) {
        option (google.api.http) = {
			post: "/v1/stock/watchlists/del-stock",
            body: "*",
		};
    };

    // 移动
    rpc MoveFromWatchlist(MoveFromWatchlistReq) returns (MoveFromWatchlistRsp) {
        option (google.api.http) = {
			post: "/v1/stock/watchlists/move-stock",
            body: "*",
		};
    };

    // 排序
    rpc SortFromWatchlist(SortFromWatchlistReq) returns (SortFromWatchlistRsp) {
        option (google.api.http) = {
			post: "/v1/stock/watchlists/sort-stock",
            body: "*",
		};
    };

    // 实时数据
    rpc Realtime(RealtimeReq) returns (RealtimeRsp) {
        option (google.api.http) = {
			get: "/v1/stock/realtime",
		};
    };

}


enum TimespanOpt {
    TimespanOptUnknown = 0; // 未知（不要使用）
    TimespanOptSecond = 1; // 按秒
    TimespanOptMinute = 2; // 分钟
    TimespanOptHour = 3; // 按小时
    TimespanOptDay = 4; // 按天
    TimespanOptWeek = 5; // 星期
    TimespanOptMonth = 6; // 按月
    TimespanOptQuarter = 7; // 按季度
    TimespanOptYear = 8; // 按年
}

message QueryReq {
    string code = 1; // 股票代码
    int32 multiplier = 2; // 时间跨度
    TimespanOpt timespan = 3; // 时间的单位
    int64 timestamp = 4; // 时间戳，不传则截止到当前为止，传就截止到传的时间为止
    int32 count = 5; // 数量，最大传5000，建议传800
}

message QueryRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
    QueryData data = 3; // 数据
}

message QueryData {
    repeated StockData list = 1; // 股票数据
    int64 last_time = 2; // 截止时间
}

message StockData {
    string code = 1;
    double close  = 2; // 收盘价
    double high  = 3; // 最高价
	double low  = 4; // 最低价
    int64 transactions  = 5; // 交易量
    double open  = 6; // 开盘价
	int64 timestamp = 7; // 时间戳
	double volume = 8; // 成交额
    double vwap = 9; // 。VWAP 是一种衡量某个证券在一定时间段内的平均价格的方法，这个价格是根据成交量加权计算的
	bool otc  = 10; // 场外交易
}

enum IndicatorsOpt {
    IndicatorsOptUnknown = 0; // 未知（不要使用）
    IndicatorsOptSMA = 1; // sma
    IndicatorsOptEMA = 2; // ema
    IndicatorsOptMACD = 3; // macd
    IndicatorsOptRSI = 4; // rsi
}


message IndicatorsReq {
    IndicatorsOpt opt = 1; // 技术指标类型
    string code = 2; // 股票代码
    TimespanOpt timespan = 3; // 时间的单位
    int64 timestamp = 4; // 时间戳，不传则截止到当前为止，传就截止到传的时间为止
    int32 count = 5; // 数量，最大传5000，建议传800
}

message IndicatorsRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
    IndicatorsData data = 3; // 数据
}

message IndicatorsData {
    repeated IndicatorInfo list = 1; // 股票数据
    int64 last_time = 2; // 截止时间
}

message IndicatorInfo {
    int64 timestamp = 1; // 时间戳
    double value = 2; // 时间戳
    double histogram = 3; //
    double signal = 4;
}

message WatchlistsReq {
   
}

message WatchlistsRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
    repeated WatchlistsData list = 3; // 数据
}

message WatchlistsData {
    int64 pid = 1; // pid
    int64 id = 2; // id
    string name = 3; // 名称 
    double sort = 4; // 排序
    repeated StockWatchlists list = 5; // 收藏的股票
    int64 create_time = 6; // 创建时间
    int64 update_time = 7; // 更新时间fi
}

message StockWatchlists {
    string code = 1;   // 代码
    string name = 2; // 公司
    string symbol = 3; // 代码
    double sort = 4;   // 排序
    int64 create_time =5; // 创建时间
    int64 pid = 6; // 分类id
}

message CreateWatchlistReq {
    string name = 1; // 创建名称
}

message CreateWatchlistRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
    int64 id = 3; // 返回id
}

message DelWatchlistReq {
    int64 id = 1; // id
}

message DelWatchlistRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
}

message AddToWatchlistReq {
    int64 pid = 1; // id
    string code = 2; // code
}

message AddToWatchlistRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
}

message DelFromWatchlistReq {
    int64 pid = 1; // id
    string code = 2; // code
}

message DelFromWatchlistRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
}

message MoveFromWatchlistReq {
    int64 src_pid = 1; // 原id
    int64 target_pid = 2; // 目标id
    string code = 3; // code
}

message MoveFromWatchlistRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
}

message SortFromWatchlistReq {
    int64 pid = 1; // id
    int64 target_id = 2; // 目标id
    string code = 3; // code
}

message SortFromWatchlistRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
}

message RealtimeReq {
    string codes = 1; // 公司代码。逗号分隔
}

message RealtimeRsp {
    int32 ret = 1; // 错误码
    string msg = 2; // msg
    repeated StockRealTime list = 3; // 列表数据
}

message StockRealTime {
    string code = 1;
    double close  = 2; // 收盘价
    double high  = 3; // 最高价
	double low  = 4; // 最低价
    int64 transactions  = 5; // 交易量
    double open  = 6; // 开盘价
	int64 timestamp = 7; // 时间戳
	double volume = 8; // 成交额
    double vwap = 9; // 。VWAP 是一种衡量某个证券在一定时间段内的平均价格的方法，这个价格是根据成交量加权计算的
	bool otc  = 10; // 场外交易
    double pre_close  = 11; // 前一个收盘价
    double pre_high  = 12; // 前一个最高价
    double pre_low  = 13; // 前一个最低价
    double pre_open  = 15; // 前一个开盘价
    double pre_timestamp  = 16; // 前一个时间戳
    double pre_volume  = 17; // 前一个成交额
    double pre_vwap  = 18; // 前一个VWAP
    double change = 19; // 改变
    double change_ratio =20; // 比例
}
