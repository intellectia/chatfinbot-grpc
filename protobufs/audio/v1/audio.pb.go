// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: audio.proto

package audiopb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatMediaStatus int32

const (
	ChatMediaStatus_ChatMediaStatusPending    ChatMediaStatus = 0 // 待开始
	ChatMediaStatus_ChatMediaStatusDownload   ChatMediaStatus = 1 // 下载
	ChatMediaStatus_ChatMediaStatusSplitMedia ChatMediaStatus = 2 // 拆分音频
	ChatMediaStatus_ChatMediaStatusToText     ChatMediaStatus = 3 // 转文字中
	ChatMediaStatus_ChatMediaStatusSummary    ChatMediaStatus = 4 // 总结中
	ChatMediaStatus_ChatMediaStatusSuccess    ChatMediaStatus = 5 // 成功
	ChatMediaStatus_ChatMediaStatusFail       ChatMediaStatus = 6 // 失败
	ChatMediaStatus_ChatMediaStatusTrans      ChatMediaStatus = 7 // 录制中
	ChatMediaStatus_ChatMediaStatusTransEnd   ChatMediaStatus = 8 // 结束录制
)

// Enum value maps for ChatMediaStatus.
var (
	ChatMediaStatus_name = map[int32]string{
		0: "ChatMediaStatusPending",
		1: "ChatMediaStatusDownload",
		2: "ChatMediaStatusSplitMedia",
		3: "ChatMediaStatusToText",
		4: "ChatMediaStatusSummary",
		5: "ChatMediaStatusSuccess",
		6: "ChatMediaStatusFail",
		7: "ChatMediaStatusTrans",
		8: "ChatMediaStatusTransEnd",
	}
	ChatMediaStatus_value = map[string]int32{
		"ChatMediaStatusPending":    0,
		"ChatMediaStatusDownload":   1,
		"ChatMediaStatusSplitMedia": 2,
		"ChatMediaStatusToText":     3,
		"ChatMediaStatusSummary":    4,
		"ChatMediaStatusSuccess":    5,
		"ChatMediaStatusFail":       6,
		"ChatMediaStatusTrans":      7,
		"ChatMediaStatusTransEnd":   8,
	}
)

func (x ChatMediaStatus) Enum() *ChatMediaStatus {
	p := new(ChatMediaStatus)
	*p = x
	return p
}

func (x ChatMediaStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMediaStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[0].Descriptor()
}

func (ChatMediaStatus) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[0]
}

func (x ChatMediaStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMediaStatus.Descriptor instead.
func (ChatMediaStatus) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

type AudioSummaryType int32

const (
	AudioSummaryType_AudioSummaryTypeUnknown        AudioSummaryType = 0 // 未知（不要使用）
	AudioSummaryType_AudioSummaryTypePartialSummary AudioSummaryType = 1 // 部分总结
	AudioSummaryType_AudioSummaryTypeCommSummary    AudioSummaryType = 2 // 普通总结
	AudioSummaryType_AudioSummaryTypeDepthSummary   AudioSummaryType = 3 // 深度总结
	AudioSummaryType_AudioSummaryTypeToDo           AudioSummaryType = 4 // 待办事项
)

// Enum value maps for AudioSummaryType.
var (
	AudioSummaryType_name = map[int32]string{
		0: "AudioSummaryTypeUnknown",
		1: "AudioSummaryTypePartialSummary",
		2: "AudioSummaryTypeCommSummary",
		3: "AudioSummaryTypeDepthSummary",
		4: "AudioSummaryTypeToDo",
	}
	AudioSummaryType_value = map[string]int32{
		"AudioSummaryTypeUnknown":        0,
		"AudioSummaryTypePartialSummary": 1,
		"AudioSummaryTypeCommSummary":    2,
		"AudioSummaryTypeDepthSummary":   3,
		"AudioSummaryTypeToDo":           4,
	}
)

func (x AudioSummaryType) Enum() *AudioSummaryType {
	p := new(AudioSummaryType)
	*p = x
	return p
}

func (x AudioSummaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioSummaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[1].Descriptor()
}

func (AudioSummaryType) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[1]
}

func (x AudioSummaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioSummaryType.Descriptor instead.
func (AudioSummaryType) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

type MediaType int32

const (
	MediaType_MediaTypeUnknown      MediaType = 0 // 未知（不要使用）
	MediaType_MediaTypeRecordAudio  MediaType = 1 // 录音文件
	MediaType_MediaTypeLiveAudio    MediaType = 2 // 实时语音
	MediaType_MediaTypeMeetingAudio MediaType = 3 // 会议音频
	MediaType_MediaTypeMeetingVideo MediaType = 4 // 会议视频
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MediaTypeUnknown",
		1: "MediaTypeRecordAudio",
		2: "MediaTypeLiveAudio",
		3: "MediaTypeMeetingAudio",
		4: "MediaTypeMeetingVideo",
	}
	MediaType_value = map[string]int32{
		"MediaTypeUnknown":      0,
		"MediaTypeRecordAudio":  1,
		"MediaTypeLiveAudio":    2,
		"MediaTypeMeetingAudio": 3,
		"MediaTypeMeetingVideo": 4,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[2].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[2]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{2}
}

type CheckTransType int32

const (
	CheckTransType_CheckTransTypeUnknown CheckTransType = 0 // 未知（不要使用）
	CheckTransType_CheckTransTypeStart   CheckTransType = 1 // 开始检测
	CheckTransType_CheckTransTypeCost    CheckTransType = 2 // 耗时
)

// Enum value maps for CheckTransType.
var (
	CheckTransType_name = map[int32]string{
		0: "CheckTransTypeUnknown",
		1: "CheckTransTypeStart",
		2: "CheckTransTypeCost",
	}
	CheckTransType_value = map[string]int32{
		"CheckTransTypeUnknown": 0,
		"CheckTransTypeStart":   1,
		"CheckTransTypeCost":    2,
	}
)

func (x CheckTransType) Enum() *CheckTransType {
	p := new(CheckTransType)
	*p = x
	return p
}

func (x CheckTransType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckTransType) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[3].Descriptor()
}

func (CheckTransType) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[3]
}

func (x CheckTransType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckTransType.Descriptor instead.
func (CheckTransType) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{3}
}

type UpdateRecordType int32

const (
	UpdateRecordType_UpdateRecordTypeUnknown        UpdateRecordType = 0 // 未知（不要使用）
	UpdateRecordType_UpdateRecordTypeContent        UpdateRecordType = 1 // 更新字幕
	UpdateRecordType_UpdateRecordTypePartialSummary UpdateRecordType = 2 // 更新分段总结
	UpdateRecordType_UpdateRecordTypeSummary        UpdateRecordType = 3 // 更新概要总结
	UpdateRecordType_UpdateRecordTypeDepthSummary   UpdateRecordType = 4 // 更新深度总结
	UpdateRecordType_UpdateRecordTypeDepthTodo      UpdateRecordType = 5 // 更新TODO
	UpdateRecordType_UpdateRecordTypeAllContent     UpdateRecordType = 6 // 更新全文字幕
)

// Enum value maps for UpdateRecordType.
var (
	UpdateRecordType_name = map[int32]string{
		0: "UpdateRecordTypeUnknown",
		1: "UpdateRecordTypeContent",
		2: "UpdateRecordTypePartialSummary",
		3: "UpdateRecordTypeSummary",
		4: "UpdateRecordTypeDepthSummary",
		5: "UpdateRecordTypeDepthTodo",
		6: "UpdateRecordTypeAllContent",
	}
	UpdateRecordType_value = map[string]int32{
		"UpdateRecordTypeUnknown":        0,
		"UpdateRecordTypeContent":        1,
		"UpdateRecordTypePartialSummary": 2,
		"UpdateRecordTypeSummary":        3,
		"UpdateRecordTypeDepthSummary":   4,
		"UpdateRecordTypeDepthTodo":      5,
		"UpdateRecordTypeAllContent":     6,
	}
)

func (x UpdateRecordType) Enum() *UpdateRecordType {
	p := new(UpdateRecordType)
	*p = x
	return p
}

func (x UpdateRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[4].Descriptor()
}

func (UpdateRecordType) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[4]
}

func (x UpdateRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateRecordType.Descriptor instead.
func (UpdateRecordType) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{4}
}

type ScheduleStatus int32

const (
	ScheduleStatus_ScheduleStatusUnknown  ScheduleStatus = 0 // 未知（不要使用）
	ScheduleStatus_ScheduleStatusProccess ScheduleStatus = 1 // 处理中
	ScheduleStatus_ScheduleStatusSuccess  ScheduleStatus = 2 // 成功
	ScheduleStatus_ScheduleStatusFail     ScheduleStatus = 3 // 失败
	ScheduleStatus_ScheduleStatusNotStart ScheduleStatus = 4 // 没有开始
)

// Enum value maps for ScheduleStatus.
var (
	ScheduleStatus_name = map[int32]string{
		0: "ScheduleStatusUnknown",
		1: "ScheduleStatusProccess",
		2: "ScheduleStatusSuccess",
		3: "ScheduleStatusFail",
		4: "ScheduleStatusNotStart",
	}
	ScheduleStatus_value = map[string]int32{
		"ScheduleStatusUnknown":  0,
		"ScheduleStatusProccess": 1,
		"ScheduleStatusSuccess":  2,
		"ScheduleStatusFail":     3,
		"ScheduleStatusNotStart": 4,
	}
)

func (x ScheduleStatus) Enum() *ScheduleStatus {
	p := new(ScheduleStatus)
	*p = x
	return p
}

func (x ScheduleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_proto_enumTypes[5].Descriptor()
}

func (ScheduleStatus) Type() protoreflect.EnumType {
	return &file_audio_proto_enumTypes[5]
}

func (x ScheduleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleStatus.Descriptor instead.
func (ScheduleStatus) EnumDescriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{5}
}

type CreateRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
	DocId     string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`             // 文件id
	Lang      string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`                            // 传语言
}

func (x *CreateRecordReq) Reset() {
	*x = CreateRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordReq) ProtoMessage() {}

func (x *CreateRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordReq.ProtoReflect.Descriptor instead.
func (*CreateRecordReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRecordReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateRecordReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *CreateRecordReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type CreateRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	JobId string `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // 获取任务id
}

func (x *CreateRecordRsp) Reset() {
	*x = CreateRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordRsp) ProtoMessage() {}

func (x *CreateRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordRsp.ProtoReflect.Descriptor instead.
func (*CreateRecordRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRecordRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CreateRecordRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateRecordRsp) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
	Page      uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                           // 页码
	PageSize  uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   // 页数
}

func (x *GetRecordListReq) Reset() {
	*x = GetRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordListReq) ProtoMessage() {}

func (x *GetRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordListReq.ProtoReflect.Descriptor instead.
func (*GetRecordListReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecordListReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetRecordListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRecordListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetRecordListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	List []*MediaRecord `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetRecordListRsp) Reset() {
	*x = GetRecordListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordListRsp) ProtoMessage() {}

func (x *GetRecordListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordListRsp.ProtoReflect.Descriptor instead.
func (*GetRecordListRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecordListRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetRecordListRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRecordListRsp) GetList() []*MediaRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type MediaRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId                  string          `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`                                                                                          // 文件id
	Content                []*MediaContent `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`                                                                                                   // 内容
	SessionId              string          `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                                              // session id
	Summary                string          `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`                                                                                                   // 总结
	CreateAt               string          `protobuf:"bytes,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                                                                                 // 创建时间
	UpdateAt               string          `protobuf:"bytes,6,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`                                                                                 // 更新时间
	Status                 uint32          `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                                                                    //进度
	Schedule               string          `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`                                                                                                 // 进度
	Url                    string          `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`                                                                                                           // 视频链接地址
	MediaType              uint32          `protobuf:"varint,10,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`                                                                            // 媒体类型
	PartialSummary         []*MediaSummary `protobuf:"bytes,11,rep,name=partial_summary,json=partialSummary,proto3" json:"partial_summary,omitempty"`                                                              // 部分内容
	Todo                   []string        `protobuf:"bytes,12,rep,name=todo,proto3" json:"todo,omitempty"`                                                                                                        // 待办事项
	IsDepthSummary         bool            `protobuf:"varint,13,opt,name=is_depth_summary,json=isDepthSummary,proto3" json:"is_depth_summary,omitempty"`                                                           // 是否有深度总结
	DepthSummary           string          `protobuf:"bytes,14,opt,name=depth_summary,json=depthSummary,proto3" json:"depth_summary,omitempty"`                                                                    // 深度总结
	DepthSummaryStatus     ScheduleStatus  `protobuf:"varint,15,opt,name=depth_summary_status,json=depthSummaryStatus,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"depth_summary_status,omitempty"`       // 深度总结状态
	DepthSummarySchedule   string          `protobuf:"bytes,16,opt,name=depth_summary_schedule,json=depthSummarySchedule,proto3" json:"depth_summary_schedule,omitempty"`                                          // 深度总结进度
	SummaryStatus          ScheduleStatus  `protobuf:"varint,17,opt,name=summary_status,json=summaryStatus,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"summary_status,omitempty"`                        // 概要总结状态
	SummarySchedule        string          `protobuf:"bytes,18,opt,name=summary_schedule,json=summarySchedule,proto3" json:"summary_schedule,omitempty"`                                                           // 概要总结进度
	TodoStatus             ScheduleStatus  `protobuf:"varint,19,opt,name=todo_status,json=todoStatus,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"todo_status,omitempty"`                                 // 待办事项状态
	TodoSchedule           string          `protobuf:"bytes,20,opt,name=todo_schedule,json=todoSchedule,proto3" json:"todo_schedule,omitempty"`                                                                    // 待办事项进度
	PartialSummaryStatus   ScheduleStatus  `protobuf:"varint,21,opt,name=partial_summary_status,json=partialSummaryStatus,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"partial_summary_status,omitempty"` // 分段总结状态
	PartialSummarySchedule string          `protobuf:"bytes,22,opt,name=partial_summary_schedule,json=partialSummarySchedule,proto3" json:"partial_summary_schedule,omitempty"`                                    // 分段总结进度
	ContentStatus          ScheduleStatus  `protobuf:"varint,23,opt,name=content_status,json=contentStatus,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"content_status,omitempty"`                        // 字幕状态
	ContentSchedule        string          `protobuf:"bytes,24,opt,name=content_schedule,json=contentSchedule,proto3" json:"content_schedule,omitempty"`                                                           // 字幕进度
}

func (x *MediaRecord) Reset() {
	*x = MediaRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaRecord) ProtoMessage() {}

func (x *MediaRecord) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaRecord.ProtoReflect.Descriptor instead.
func (*MediaRecord) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{4}
}

func (x *MediaRecord) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *MediaRecord) GetContent() []*MediaContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MediaRecord) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MediaRecord) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *MediaRecord) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *MediaRecord) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *MediaRecord) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MediaRecord) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *MediaRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaRecord) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *MediaRecord) GetPartialSummary() []*MediaSummary {
	if x != nil {
		return x.PartialSummary
	}
	return nil
}

func (x *MediaRecord) GetTodo() []string {
	if x != nil {
		return x.Todo
	}
	return nil
}

func (x *MediaRecord) GetIsDepthSummary() bool {
	if x != nil {
		return x.IsDepthSummary
	}
	return false
}

func (x *MediaRecord) GetDepthSummary() string {
	if x != nil {
		return x.DepthSummary
	}
	return ""
}

func (x *MediaRecord) GetDepthSummaryStatus() ScheduleStatus {
	if x != nil {
		return x.DepthSummaryStatus
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *MediaRecord) GetDepthSummarySchedule() string {
	if x != nil {
		return x.DepthSummarySchedule
	}
	return ""
}

func (x *MediaRecord) GetSummaryStatus() ScheduleStatus {
	if x != nil {
		return x.SummaryStatus
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *MediaRecord) GetSummarySchedule() string {
	if x != nil {
		return x.SummarySchedule
	}
	return ""
}

func (x *MediaRecord) GetTodoStatus() ScheduleStatus {
	if x != nil {
		return x.TodoStatus
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *MediaRecord) GetTodoSchedule() string {
	if x != nil {
		return x.TodoSchedule
	}
	return ""
}

func (x *MediaRecord) GetPartialSummaryStatus() ScheduleStatus {
	if x != nil {
		return x.PartialSummaryStatus
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *MediaRecord) GetPartialSummarySchedule() string {
	if x != nil {
		return x.PartialSummarySchedule
	}
	return ""
}

func (x *MediaRecord) GetContentStatus() ScheduleStatus {
	if x != nil {
		return x.ContentStatus
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *MediaRecord) GetContentSchedule() string {
	if x != nil {
		return x.ContentSchedule
	}
	return ""
}

type GetRecordStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // 任务id
}

func (x *GetRecordStatusReq) Reset() {
	*x = GetRecordStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordStatusReq) ProtoMessage() {}

func (x *GetRecordStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordStatusReq.ProtoReflect.Descriptor instead.
func (*GetRecordStatusReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{5}
}

func (x *GetRecordStatusReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetRecordStatusRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MediaRecord `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRecordStatusRsp) Reset() {
	*x = GetRecordStatusRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordStatusRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordStatusRsp) ProtoMessage() {}

func (x *GetRecordStatusRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordStatusRsp.ProtoReflect.Descriptor instead.
func (*GetRecordStatusRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{6}
}

func (x *GetRecordStatusRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetRecordStatusRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRecordStatusRsp) GetData() *MediaRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type TranscriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId     string          `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`             // 音频id
	SessionId string          `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
	Content   []*MediaContent `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`                      // 追加内容
	Stype     uint32          `protobuf:"varint,4,opt,name=stype,proto3" json:"stype,omitempty"`                         // 状态 1=追加 2=覆盖 3=结束录制   2=后面会去掉
	Mtid      int64           `protobuf:"varint,5,opt,name=mtid,proto3" json:"mtid,omitempty"`                           // 重要领域
	Keyword   string          `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword,omitempty"`                      // 关键词
	Lang      string          `protobuf:"bytes,7,opt,name=lang,proto3" json:"lang,omitempty"`                            // 语言
}

func (x *TranscriptionReq) Reset() {
	*x = TranscriptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionReq) ProtoMessage() {}

func (x *TranscriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionReq.ProtoReflect.Descriptor instead.
func (*TranscriptionReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{7}
}

func (x *TranscriptionReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *TranscriptionReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TranscriptionReq) GetContent() []*MediaContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *TranscriptionReq) GetStype() uint32 {
	if x != nil {
		return x.Stype
	}
	return 0
}

func (x *TranscriptionReq) GetMtid() int64 {
	if x != nil {
		return x.Mtid
	}
	return 0
}

func (x *TranscriptionReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *TranscriptionReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type MediaContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    string  `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Text     string  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Duration float64 `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Role     string  `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *MediaContent) Reset() {
	*x = MediaContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaContent) ProtoMessage() {}

func (x *MediaContent) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaContent.ProtoReflect.Descriptor instead.
func (*MediaContent) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{8}
}

func (x *MediaContent) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *MediaContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MediaContent) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MediaContent) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type MediaSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MediaSummary) Reset() {
	*x = MediaSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaSummary) ProtoMessage() {}

func (x *MediaSummary) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaSummary.ProtoReflect.Descriptor instead.
func (*MediaSummary) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{9}
}

func (x *MediaSummary) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *MediaSummary) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TranscriptionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *TranscriptionRsp) Reset() {
	*x = TranscriptionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionRsp) ProtoMessage() {}

func (x *TranscriptionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionRsp.ProtoReflect.Descriptor instead.
func (*TranscriptionRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{10}
}

func (x *TranscriptionRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *TranscriptionRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetTransDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
}

func (x *GetTransDataReq) Reset() {
	*x = GetTransDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransDataReq) ProtoMessage() {}

func (x *GetTransDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransDataReq.ProtoReflect.Descriptor instead.
func (*GetTransDataReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransDataReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetTransDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MediaRecord `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTransDataRsp) Reset() {
	*x = GetTransDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransDataRsp) ProtoMessage() {}

func (x *GetTransDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransDataRsp.ProtoReflect.Descriptor instead.
func (*GetTransDataRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{12}
}

func (x *GetTransDataRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetTransDataRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetTransDataRsp) GetData() *MediaRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type AudioSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryType AudioSummaryType         `protobuf:"varint,1,opt,name=summary_type,json=summaryType,proto3,enum=chatfinbot.audio.v1.AudioSummaryType" json:"summary_type,omitempty"`
	DocId       string                   `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	SessionId   string                   `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId      string                   `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content     string                   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Start       string                   `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	MediaType   MediaType                `protobuf:"varint,7,opt,name=media_type,json=mediaType,proto3,enum=chatfinbot.audio.v1.MediaType" json:"media_type,omitempty"`
	PartialData *AudioSummaryPartialData `protobuf:"bytes,8,opt,name=partial_data,json=partialData,proto3" json:"partial_data,omitempty"`
}

func (x *AudioSummary) Reset() {
	*x = AudioSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSummary) ProtoMessage() {}

func (x *AudioSummary) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSummary.ProtoReflect.Descriptor instead.
func (*AudioSummary) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{13}
}

func (x *AudioSummary) GetSummaryType() AudioSummaryType {
	if x != nil {
		return x.SummaryType
	}
	return AudioSummaryType_AudioSummaryTypeUnknown
}

func (x *AudioSummary) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *AudioSummary) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AudioSummary) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AudioSummary) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AudioSummary) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AudioSummary) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MediaTypeUnknown
}

func (x *AudioSummary) GetPartialData() *AudioSummaryPartialData {
	if x != nil {
		return x.PartialData
	}
	return nil
}

type AudioSummaryPartialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurPos int32                     `protobuf:"varint,1,opt,name=cur_pos,json=curPos,proto3" json:"cur_pos,omitempty"`
	List   []*AudioSummaryPartialPos `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AudioSummaryPartialData) Reset() {
	*x = AudioSummaryPartialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSummaryPartialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSummaryPartialData) ProtoMessage() {}

func (x *AudioSummaryPartialData) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSummaryPartialData.ProtoReflect.Descriptor instead.
func (*AudioSummaryPartialData) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{14}
}

func (x *AudioSummaryPartialData) GetCurPos() int32 {
	if x != nil {
		return x.CurPos
	}
	return 0
}

func (x *AudioSummaryPartialData) GetList() []*AudioSummaryPartialPos {
	if x != nil {
		return x.List
	}
	return nil
}

type AudioSummaryPartialPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin int32 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *AudioSummaryPartialPos) Reset() {
	*x = AudioSummaryPartialPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSummaryPartialPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSummaryPartialPos) ProtoMessage() {}

func (x *AudioSummaryPartialPos) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSummaryPartialPos.ProtoReflect.Descriptor instead.
func (*AudioSummaryPartialPos) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{15}
}

func (x *AudioSummaryPartialPos) GetBegin() int32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *AudioSummaryPartialPos) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type AudioSummaryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       *AudioSummary `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	JobId      string        `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	SubmitTime int64         `protobuf:"varint,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
}

func (x *AudioSummaryStatus) Reset() {
	*x = AudioSummaryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSummaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSummaryStatus) ProtoMessage() {}

func (x *AudioSummaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSummaryStatus.ProtoReflect.Descriptor instead.
func (*AudioSummaryStatus) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{16}
}

func (x *AudioSummaryStatus) GetData() *AudioSummary {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AudioSummaryStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *AudioSummaryStatus) GetSubmitTime() int64 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

type SummaryDepthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DocId     string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *SummaryDepthReq) Reset() {
	*x = SummaryDepthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryDepthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryDepthReq) ProtoMessage() {}

func (x *SummaryDepthReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryDepthReq.ProtoReflect.Descriptor instead.
func (*SummaryDepthReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{17}
}

func (x *SummaryDepthReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SummaryDepthReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

type SummaryDepthRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SummaryDepthRsp) Reset() {
	*x = SummaryDepthRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryDepthRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryDepthRsp) ProtoMessage() {}

func (x *SummaryDepthRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryDepthRsp.ProtoReflect.Descriptor instead.
func (*SummaryDepthRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{18}
}

func (x *SummaryDepthRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SummaryDepthRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UpdateSummaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DocId       string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	ContentType uint32 `protobuf:"varint,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // 总结类型 1=普通总结 2=深度总结
}

func (x *UpdateSummaryReq) Reset() {
	*x = UpdateSummaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSummaryReq) ProtoMessage() {}

func (x *UpdateSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSummaryReq.ProtoReflect.Descriptor instead.
func (*UpdateSummaryReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateSummaryReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateSummaryReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UpdateSummaryReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateSummaryReq) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

type UpdateSummaryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UpdateSummaryRsp) Reset() {
	*x = UpdateSummaryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSummaryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSummaryRsp) ProtoMessage() {}

func (x *UpdateSummaryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSummaryRsp.ProtoReflect.Descriptor instead.
func (*UpdateSummaryRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateSummaryRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *UpdateSummaryRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetSummaryDepthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DocId     string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *GetSummaryDepthReq) Reset() {
	*x = GetSummaryDepthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummaryDepthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryDepthReq) ProtoMessage() {}

func (x *GetSummaryDepthReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryDepthReq.ProtoReflect.Descriptor instead.
func (*GetSummaryDepthReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{21}
}

func (x *GetSummaryDepthReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetSummaryDepthReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

type GetSummaryDepthRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GetSummaryDepthRsp) Reset() {
	*x = GetSummaryDepthRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummaryDepthRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryDepthRsp) ProtoMessage() {}

func (x *GetSummaryDepthRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryDepthRsp.ProtoReflect.Descriptor instead.
func (*GetSummaryDepthRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{22}
}

func (x *GetSummaryDepthRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetSummaryDepthRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetSummaryDepthRsp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CheckTransReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stype CheckTransType `protobuf:"varint,1,opt,name=stype,proto3,enum=chatfinbot.audio.v1.CheckTransType" json:"stype,omitempty"` // 类型
	Cost  uint32         `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`                                           // 耗时
}

func (x *CheckTransReq) Reset() {
	*x = CheckTransReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTransReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTransReq) ProtoMessage() {}

func (x *CheckTransReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTransReq.ProtoReflect.Descriptor instead.
func (*CheckTransReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{23}
}

func (x *CheckTransReq) GetStype() CheckTransType {
	if x != nil {
		return x.Stype
	}
	return CheckTransType_CheckTransTypeUnknown
}

func (x *CheckTransReq) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type CheckTransRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CheckTransRsp) Reset() {
	*x = CheckTransRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTransRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTransRsp) ProtoMessage() {}

func (x *CheckTransRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTransRsp.ProtoReflect.Descriptor instead.
func (*CheckTransRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{24}
}

func (x *CheckTransRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckTransRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UpdateRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                   // session的id
	DocId          string           `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`                               // 文档id
	Stype          UpdateRecordType `protobuf:"varint,3,opt,name=stype,proto3,enum=chatfinbot.audio.v1.UpdateRecordType" json:"stype,omitempty"` // 更新类型
	Content        *MediaContent    `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                        // 更新字幕内容
	PartialSummary *MediaSummary    `protobuf:"bytes,5,opt,name=partial_summary,json=partialSummary,proto3" json:"partial_summary,omitempty"`    // 分段总结
	Summary        string           `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`                                        // 概要总结和深度总结
	Todo           []string         `protobuf:"bytes,7,rep,name=todo,proto3" json:"todo,omitempty"`                                              // 编辑todo
	Contents       []*MediaContent  `protobuf:"bytes,8,rep,name=contents,proto3" json:"contents,omitempty"`                                      // 更新全部字幕内容
}

func (x *UpdateRecordReq) Reset() {
	*x = UpdateRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordReq) ProtoMessage() {}

func (x *UpdateRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordReq.ProtoReflect.Descriptor instead.
func (*UpdateRecordReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateRecordReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateRecordReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *UpdateRecordReq) GetStype() UpdateRecordType {
	if x != nil {
		return x.Stype
	}
	return UpdateRecordType_UpdateRecordTypeUnknown
}

func (x *UpdateRecordReq) GetContent() *MediaContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UpdateRecordReq) GetPartialSummary() *MediaSummary {
	if x != nil {
		return x.PartialSummary
	}
	return nil
}

func (x *UpdateRecordReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *UpdateRecordReq) GetTodo() []string {
	if x != nil {
		return x.Todo
	}
	return nil
}

func (x *UpdateRecordReq) GetContents() []*MediaContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

type UpdateRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UpdateRecordRsp) Reset() {
	*x = UpdateRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordRsp) ProtoMessage() {}

func (x *UpdateRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordRsp.ProtoReflect.Descriptor instead.
func (*UpdateRecordRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateRecordRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *UpdateRecordRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetScheduleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId          string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                               // session的id
	DocId              string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`                                           // 文档id
	ShowContent        bool   `protobuf:"varint,3,opt,name=show_content,json=showContent,proto3" json:"show_content,omitempty"`                        // 是否返回字幕
	ShowPartialSummary bool   `protobuf:"varint,4,opt,name=show_partial_summary,json=showPartialSummary,proto3" json:"show_partial_summary,omitempty"` // 是否返回章节信息
	ShowSummary        bool   `protobuf:"varint,5,opt,name=show_summary,json=showSummary,proto3" json:"show_summary,omitempty"`                        // 是否返回概要总结
	ShowDepthSummary   bool   `protobuf:"varint,6,opt,name=show_depth_summary,json=showDepthSummary,proto3" json:"show_depth_summary,omitempty"`       // 是否返回深度总结
	ShowTodo           bool   `protobuf:"varint,7,opt,name=show_todo,json=showTodo,proto3" json:"show_todo,omitempty"`                                 // 是否返回todo
}

func (x *GetScheduleReq) Reset() {
	*x = GetScheduleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleReq) ProtoMessage() {}

func (x *GetScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleReq.ProtoReflect.Descriptor instead.
func (*GetScheduleReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{27}
}

func (x *GetScheduleReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetScheduleReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *GetScheduleReq) GetShowContent() bool {
	if x != nil {
		return x.ShowContent
	}
	return false
}

func (x *GetScheduleReq) GetShowPartialSummary() bool {
	if x != nil {
		return x.ShowPartialSummary
	}
	return false
}

func (x *GetScheduleReq) GetShowSummary() bool {
	if x != nil {
		return x.ShowSummary
	}
	return false
}

func (x *GetScheduleReq) GetShowDepthSummary() bool {
	if x != nil {
		return x.ShowDepthSummary
	}
	return false
}

func (x *GetScheduleReq) GetShowTodo() bool {
	if x != nil {
		return x.ShowTodo
	}
	return false
}

type GetScheduleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32           `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg  string          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	List []*ScheduleInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetScheduleRsp) Reset() {
	*x = GetScheduleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScheduleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduleRsp) ProtoMessage() {}

func (x *GetScheduleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduleRsp.ProtoReflect.Descriptor instead.
func (*GetScheduleRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{28}
}

func (x *GetScheduleRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetScheduleRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetScheduleRsp) GetList() []*ScheduleInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ScheduleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentInfo        *ScheduleInfoSubtitles    `protobuf:"bytes,1,opt,name=content_info,json=contentInfo,proto3" json:"content_info,omitempty"`                        // 字幕数据
	PartialSummaryInfo *ScheduleInfoChapter      `protobuf:"bytes,2,opt,name=partial_summary_info,json=partialSummaryInfo,proto3" json:"partial_summary_info,omitempty"` // 章节总结
	SummaryInfo        *ScheduleInfoSummary      `protobuf:"bytes,3,opt,name=summary_info,json=summaryInfo,proto3" json:"summary_info,omitempty"`                        // 概要总结信息
	DepthSummaryInfo   *ScheduleInfoDepthSummary `protobuf:"bytes,4,opt,name=depth_summary_info,json=depthSummaryInfo,proto3" json:"depth_summary_info,omitempty"`       // 深度总结信息
	TodoInfo           *ScheduleInfoTodo         `protobuf:"bytes,5,opt,name=todo_info,json=todoInfo,proto3" json:"todo_info,omitempty"`                                 // todo
}

func (x *ScheduleInfo) Reset() {
	*x = ScheduleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfo) ProtoMessage() {}

func (x *ScheduleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfo.ProtoReflect.Descriptor instead.
func (*ScheduleInfo) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{29}
}

func (x *ScheduleInfo) GetContentInfo() *ScheduleInfoSubtitles {
	if x != nil {
		return x.ContentInfo
	}
	return nil
}

func (x *ScheduleInfo) GetPartialSummaryInfo() *ScheduleInfoChapter {
	if x != nil {
		return x.PartialSummaryInfo
	}
	return nil
}

func (x *ScheduleInfo) GetSummaryInfo() *ScheduleInfoSummary {
	if x != nil {
		return x.SummaryInfo
	}
	return nil
}

func (x *ScheduleInfo) GetDepthSummaryInfo() *ScheduleInfoDepthSummary {
	if x != nil {
		return x.DepthSummaryInfo
	}
	return nil
}

func (x *ScheduleInfo) GetTodoInfo() *ScheduleInfoTodo {
	if x != nil {
		return x.TodoInfo
	}
	return nil
}

type ScheduleInfoSubtitles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   ScheduleStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"status,omitempty"`
	Content  []*MediaContent `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	Schedule string          `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ScheduleInfoSubtitles) Reset() {
	*x = ScheduleInfoSubtitles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInfoSubtitles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfoSubtitles) ProtoMessage() {}

func (x *ScheduleInfoSubtitles) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfoSubtitles.ProtoReflect.Descriptor instead.
func (*ScheduleInfoSubtitles) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{30}
}

func (x *ScheduleInfoSubtitles) GetStatus() ScheduleStatus {
	if x != nil {
		return x.Status
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *ScheduleInfoSubtitles) GetContent() []*MediaContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ScheduleInfoSubtitles) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type ScheduleInfoChapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         ScheduleStatus  `protobuf:"varint,1,opt,name=status,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"status,omitempty"`
	PartialSummary []*MediaSummary `protobuf:"bytes,2,rep,name=partial_summary,json=partialSummary,proto3" json:"partial_summary,omitempty"`
	Schedule       string          `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ScheduleInfoChapter) Reset() {
	*x = ScheduleInfoChapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInfoChapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfoChapter) ProtoMessage() {}

func (x *ScheduleInfoChapter) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfoChapter.ProtoReflect.Descriptor instead.
func (*ScheduleInfoChapter) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{31}
}

func (x *ScheduleInfoChapter) GetStatus() ScheduleStatus {
	if x != nil {
		return x.Status
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *ScheduleInfoChapter) GetPartialSummary() []*MediaSummary {
	if x != nil {
		return x.PartialSummary
	}
	return nil
}

func (x *ScheduleInfoChapter) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type ScheduleInfoSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   ScheduleStatus `protobuf:"varint,1,opt,name=status,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"status,omitempty"`
	Summary  string         `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Schedule string         `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ScheduleInfoSummary) Reset() {
	*x = ScheduleInfoSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInfoSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfoSummary) ProtoMessage() {}

func (x *ScheduleInfoSummary) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfoSummary.ProtoReflect.Descriptor instead.
func (*ScheduleInfoSummary) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{32}
}

func (x *ScheduleInfoSummary) GetStatus() ScheduleStatus {
	if x != nil {
		return x.Status
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *ScheduleInfoSummary) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ScheduleInfoSummary) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type ScheduleInfoDepthSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       ScheduleStatus `protobuf:"varint,1,opt,name=status,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"status,omitempty"`
	SummaryDepth string         `protobuf:"bytes,2,opt,name=summary_depth,json=summaryDepth,proto3" json:"summary_depth,omitempty"`
	Schedule     string         `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ScheduleInfoDepthSummary) Reset() {
	*x = ScheduleInfoDepthSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInfoDepthSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfoDepthSummary) ProtoMessage() {}

func (x *ScheduleInfoDepthSummary) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfoDepthSummary.ProtoReflect.Descriptor instead.
func (*ScheduleInfoDepthSummary) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{33}
}

func (x *ScheduleInfoDepthSummary) GetStatus() ScheduleStatus {
	if x != nil {
		return x.Status
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *ScheduleInfoDepthSummary) GetSummaryDepth() string {
	if x != nil {
		return x.SummaryDepth
	}
	return ""
}

func (x *ScheduleInfoDepthSummary) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type ScheduleInfoTodo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   ScheduleStatus `protobuf:"varint,1,opt,name=status,proto3,enum=chatfinbot.audio.v1.ScheduleStatus" json:"status,omitempty"`
	Todo     []string       `protobuf:"bytes,2,rep,name=todo,proto3" json:"todo,omitempty"`
	Schedule string         `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ScheduleInfoTodo) Reset() {
	*x = ScheduleInfoTodo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleInfoTodo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleInfoTodo) ProtoMessage() {}

func (x *ScheduleInfoTodo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleInfoTodo.ProtoReflect.Descriptor instead.
func (*ScheduleInfoTodo) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{34}
}

func (x *ScheduleInfoTodo) GetStatus() ScheduleStatus {
	if x != nil {
		return x.Status
	}
	return ScheduleStatus_ScheduleStatusUnknown
}

func (x *ScheduleInfoTodo) GetTodo() []string {
	if x != nil {
		return x.Todo
	}
	return nil
}

func (x *ScheduleInfoTodo) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

type GetRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
}

func (x *GetRecordReq) Reset() {
	*x = GetRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordReq) ProtoMessage() {}

func (x *GetRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordReq.ProtoReflect.Descriptor instead.
func (*GetRecordReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{35}
}

func (x *GetRecordReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32        `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *MediaRecord `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRecordRsp) Reset() {
	*x = GetRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRsp) ProtoMessage() {}

func (x *GetRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRsp.ProtoReflect.Descriptor instead.
func (*GetRecordRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{36}
}

func (x *GetRecordRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetRecordRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetRecordRsp) GetData() *MediaRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetMeetingTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"` // 语言
}

func (x *GetMeetingTypeReq) Reset() {
	*x = GetMeetingTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingTypeReq) ProtoMessage() {}

func (x *GetMeetingTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingTypeReq.ProtoReflect.Descriptor instead.
func (*GetMeetingTypeReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{37}
}

func (x *GetMeetingTypeReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type GetMeetingTypeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32              `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Msg  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	List []*MeetingTypeData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetMeetingTypeRsp) Reset() {
	*x = GetMeetingTypeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeetingTypeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeetingTypeRsp) ProtoMessage() {}

func (x *GetMeetingTypeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeetingTypeRsp.ProtoReflect.Descriptor instead.
func (*GetMeetingTypeRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{38}
}

func (x *GetMeetingTypeRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetMeetingTypeRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetMeetingTypeRsp) GetList() []*MeetingTypeData {
	if x != nil {
		return x.List
	}
	return nil
}

type MeetingTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`     // id
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`  // 名称
	Sort int64  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"` // 排序
}

func (x *MeetingTypeData) Reset() {
	*x = MeetingTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetingTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingTypeData) ProtoMessage() {}

func (x *MeetingTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingTypeData.ProtoReflect.Descriptor instead.
func (*MeetingTypeData) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{39}
}

func (x *MeetingTypeData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MeetingTypeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeetingTypeData) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

var File_audio_proto protoreflect.FileDescriptor

var file_audio_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x5b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x4c, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe3, 0x08,
	0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x64, 0x6f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0x2b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x22, 0x6e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xdd, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x74,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x22, 0x68, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x36, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x02, 0x0a, 0x0c,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x63, 0x75, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x16, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x83, 0x01, 0x0a,
	0x12, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x52,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x22, 0x33, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xfa, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x6f, 0x64, 0x6f, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x89, 0x02, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x64, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x54, 0x6f, 0x64, 0x6f, 0x22, 0x6b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xa7, 0x03, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a,
	0x12, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x6f,
	0x64, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x6f, 0x64, 0x6f, 0x52, 0x08, 0x74, 0x6f, 0x64, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xad,
	0x01, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xba,
	0x01, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x7f, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x68, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x22, 0x71, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x38, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x0f, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x2a, 0x8c, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x10,
	0x08, 0x2a, 0xb0, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f,
	0x44, 0x6f, 0x10, 0x04, 0x2a, 0x89, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x04,
	0x2a, 0x5c, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x02, 0x2a, 0xee,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x6f, 0x64, 0x6f, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x2a,
	0x96, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x6f, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x04, 0x32, 0xd0, 0x0c, 0x0a, 0x0c, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x7c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x79, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01,
	0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7e, 0x0a, 0x0c,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x84, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52,
	0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2d, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x76, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x73, 0x70, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x12, 0x7e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x73, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e,
	0x3b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData = file_audio_proto_rawDesc
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_proto_rawDescData)
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_audio_proto_goTypes = []interface{}{
	(ChatMediaStatus)(0),             // 0: chatfinbot.audio.v1.ChatMediaStatus
	(AudioSummaryType)(0),            // 1: chatfinbot.audio.v1.AudioSummaryType
	(MediaType)(0),                   // 2: chatfinbot.audio.v1.MediaType
	(CheckTransType)(0),              // 3: chatfinbot.audio.v1.CheckTransType
	(UpdateRecordType)(0),            // 4: chatfinbot.audio.v1.UpdateRecordType
	(ScheduleStatus)(0),              // 5: chatfinbot.audio.v1.ScheduleStatus
	(*CreateRecordReq)(nil),          // 6: chatfinbot.audio.v1.CreateRecordReq
	(*CreateRecordRsp)(nil),          // 7: chatfinbot.audio.v1.CreateRecordRsp
	(*GetRecordListReq)(nil),         // 8: chatfinbot.audio.v1.GetRecordListReq
	(*GetRecordListRsp)(nil),         // 9: chatfinbot.audio.v1.GetRecordListRsp
	(*MediaRecord)(nil),              // 10: chatfinbot.audio.v1.MediaRecord
	(*GetRecordStatusReq)(nil),       // 11: chatfinbot.audio.v1.GetRecordStatusReq
	(*GetRecordStatusRsp)(nil),       // 12: chatfinbot.audio.v1.GetRecordStatusRsp
	(*TranscriptionReq)(nil),         // 13: chatfinbot.audio.v1.TranscriptionReq
	(*MediaContent)(nil),             // 14: chatfinbot.audio.v1.MediaContent
	(*MediaSummary)(nil),             // 15: chatfinbot.audio.v1.MediaSummary
	(*TranscriptionRsp)(nil),         // 16: chatfinbot.audio.v1.TranscriptionRsp
	(*GetTransDataReq)(nil),          // 17: chatfinbot.audio.v1.GetTransDataReq
	(*GetTransDataRsp)(nil),          // 18: chatfinbot.audio.v1.GetTransDataRsp
	(*AudioSummary)(nil),             // 19: chatfinbot.audio.v1.AudioSummary
	(*AudioSummaryPartialData)(nil),  // 20: chatfinbot.audio.v1.AudioSummaryPartialData
	(*AudioSummaryPartialPos)(nil),   // 21: chatfinbot.audio.v1.AudioSummaryPartialPos
	(*AudioSummaryStatus)(nil),       // 22: chatfinbot.audio.v1.AudioSummaryStatus
	(*SummaryDepthReq)(nil),          // 23: chatfinbot.audio.v1.SummaryDepthReq
	(*SummaryDepthRsp)(nil),          // 24: chatfinbot.audio.v1.SummaryDepthRsp
	(*UpdateSummaryReq)(nil),         // 25: chatfinbot.audio.v1.UpdateSummaryReq
	(*UpdateSummaryRsp)(nil),         // 26: chatfinbot.audio.v1.UpdateSummaryRsp
	(*GetSummaryDepthReq)(nil),       // 27: chatfinbot.audio.v1.GetSummaryDepthReq
	(*GetSummaryDepthRsp)(nil),       // 28: chatfinbot.audio.v1.GetSummaryDepthRsp
	(*CheckTransReq)(nil),            // 29: chatfinbot.audio.v1.CheckTransReq
	(*CheckTransRsp)(nil),            // 30: chatfinbot.audio.v1.CheckTransRsp
	(*UpdateRecordReq)(nil),          // 31: chatfinbot.audio.v1.UpdateRecordReq
	(*UpdateRecordRsp)(nil),          // 32: chatfinbot.audio.v1.UpdateRecordRsp
	(*GetScheduleReq)(nil),           // 33: chatfinbot.audio.v1.GetScheduleReq
	(*GetScheduleRsp)(nil),           // 34: chatfinbot.audio.v1.GetScheduleRsp
	(*ScheduleInfo)(nil),             // 35: chatfinbot.audio.v1.ScheduleInfo
	(*ScheduleInfoSubtitles)(nil),    // 36: chatfinbot.audio.v1.ScheduleInfoSubtitles
	(*ScheduleInfoChapter)(nil),      // 37: chatfinbot.audio.v1.ScheduleInfoChapter
	(*ScheduleInfoSummary)(nil),      // 38: chatfinbot.audio.v1.ScheduleInfoSummary
	(*ScheduleInfoDepthSummary)(nil), // 39: chatfinbot.audio.v1.ScheduleInfoDepthSummary
	(*ScheduleInfoTodo)(nil),         // 40: chatfinbot.audio.v1.ScheduleInfoTodo
	(*GetRecordReq)(nil),             // 41: chatfinbot.audio.v1.GetRecordReq
	(*GetRecordRsp)(nil),             // 42: chatfinbot.audio.v1.GetRecordRsp
	(*GetMeetingTypeReq)(nil),        // 43: chatfinbot.audio.v1.GetMeetingTypeReq
	(*GetMeetingTypeRsp)(nil),        // 44: chatfinbot.audio.v1.GetMeetingTypeRsp
	(*MeetingTypeData)(nil),          // 45: chatfinbot.audio.v1.MeetingTypeData
}
var file_audio_proto_depIdxs = []int32{
	10, // 0: chatfinbot.audio.v1.GetRecordListRsp.list:type_name -> chatfinbot.audio.v1.MediaRecord
	14, // 1: chatfinbot.audio.v1.MediaRecord.content:type_name -> chatfinbot.audio.v1.MediaContent
	15, // 2: chatfinbot.audio.v1.MediaRecord.partial_summary:type_name -> chatfinbot.audio.v1.MediaSummary
	5,  // 3: chatfinbot.audio.v1.MediaRecord.depth_summary_status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	5,  // 4: chatfinbot.audio.v1.MediaRecord.summary_status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	5,  // 5: chatfinbot.audio.v1.MediaRecord.todo_status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	5,  // 6: chatfinbot.audio.v1.MediaRecord.partial_summary_status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	5,  // 7: chatfinbot.audio.v1.MediaRecord.content_status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	10, // 8: chatfinbot.audio.v1.GetRecordStatusRsp.data:type_name -> chatfinbot.audio.v1.MediaRecord
	14, // 9: chatfinbot.audio.v1.TranscriptionReq.content:type_name -> chatfinbot.audio.v1.MediaContent
	10, // 10: chatfinbot.audio.v1.GetTransDataRsp.data:type_name -> chatfinbot.audio.v1.MediaRecord
	1,  // 11: chatfinbot.audio.v1.AudioSummary.summary_type:type_name -> chatfinbot.audio.v1.AudioSummaryType
	2,  // 12: chatfinbot.audio.v1.AudioSummary.media_type:type_name -> chatfinbot.audio.v1.MediaType
	20, // 13: chatfinbot.audio.v1.AudioSummary.partial_data:type_name -> chatfinbot.audio.v1.AudioSummaryPartialData
	21, // 14: chatfinbot.audio.v1.AudioSummaryPartialData.list:type_name -> chatfinbot.audio.v1.AudioSummaryPartialPos
	19, // 15: chatfinbot.audio.v1.AudioSummaryStatus.data:type_name -> chatfinbot.audio.v1.AudioSummary
	3,  // 16: chatfinbot.audio.v1.CheckTransReq.stype:type_name -> chatfinbot.audio.v1.CheckTransType
	4,  // 17: chatfinbot.audio.v1.UpdateRecordReq.stype:type_name -> chatfinbot.audio.v1.UpdateRecordType
	14, // 18: chatfinbot.audio.v1.UpdateRecordReq.content:type_name -> chatfinbot.audio.v1.MediaContent
	15, // 19: chatfinbot.audio.v1.UpdateRecordReq.partial_summary:type_name -> chatfinbot.audio.v1.MediaSummary
	14, // 20: chatfinbot.audio.v1.UpdateRecordReq.contents:type_name -> chatfinbot.audio.v1.MediaContent
	35, // 21: chatfinbot.audio.v1.GetScheduleRsp.list:type_name -> chatfinbot.audio.v1.ScheduleInfo
	36, // 22: chatfinbot.audio.v1.ScheduleInfo.content_info:type_name -> chatfinbot.audio.v1.ScheduleInfoSubtitles
	37, // 23: chatfinbot.audio.v1.ScheduleInfo.partial_summary_info:type_name -> chatfinbot.audio.v1.ScheduleInfoChapter
	38, // 24: chatfinbot.audio.v1.ScheduleInfo.summary_info:type_name -> chatfinbot.audio.v1.ScheduleInfoSummary
	39, // 25: chatfinbot.audio.v1.ScheduleInfo.depth_summary_info:type_name -> chatfinbot.audio.v1.ScheduleInfoDepthSummary
	40, // 26: chatfinbot.audio.v1.ScheduleInfo.todo_info:type_name -> chatfinbot.audio.v1.ScheduleInfoTodo
	5,  // 27: chatfinbot.audio.v1.ScheduleInfoSubtitles.status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	14, // 28: chatfinbot.audio.v1.ScheduleInfoSubtitles.content:type_name -> chatfinbot.audio.v1.MediaContent
	5,  // 29: chatfinbot.audio.v1.ScheduleInfoChapter.status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	15, // 30: chatfinbot.audio.v1.ScheduleInfoChapter.partial_summary:type_name -> chatfinbot.audio.v1.MediaSummary
	5,  // 31: chatfinbot.audio.v1.ScheduleInfoSummary.status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	5,  // 32: chatfinbot.audio.v1.ScheduleInfoDepthSummary.status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	5,  // 33: chatfinbot.audio.v1.ScheduleInfoTodo.status:type_name -> chatfinbot.audio.v1.ScheduleStatus
	10, // 34: chatfinbot.audio.v1.GetRecordRsp.data:type_name -> chatfinbot.audio.v1.MediaRecord
	45, // 35: chatfinbot.audio.v1.GetMeetingTypeRsp.list:type_name -> chatfinbot.audio.v1.MeetingTypeData
	6,  // 36: chatfinbot.audio.v1.AudioService.CreateRecord:input_type -> chatfinbot.audio.v1.CreateRecordReq
	8,  // 37: chatfinbot.audio.v1.AudioService.GetRecordList:input_type -> chatfinbot.audio.v1.GetRecordListReq
	11, // 38: chatfinbot.audio.v1.AudioService.GetRecordStatus:input_type -> chatfinbot.audio.v1.GetRecordStatusReq
	13, // 39: chatfinbot.audio.v1.AudioService.Transcription:input_type -> chatfinbot.audio.v1.TranscriptionReq
	17, // 40: chatfinbot.audio.v1.AudioService.GetTransData:input_type -> chatfinbot.audio.v1.GetTransDataReq
	23, // 41: chatfinbot.audio.v1.AudioService.SummaryDepth:input_type -> chatfinbot.audio.v1.SummaryDepthReq
	27, // 42: chatfinbot.audio.v1.AudioService.GetSummaryDepth:input_type -> chatfinbot.audio.v1.GetSummaryDepthReq
	25, // 43: chatfinbot.audio.v1.AudioService.UpdateSummary:input_type -> chatfinbot.audio.v1.UpdateSummaryReq
	29, // 44: chatfinbot.audio.v1.AudioService.CheckTrans:input_type -> chatfinbot.audio.v1.CheckTransReq
	31, // 45: chatfinbot.audio.v1.AudioService.UpdateRecord:input_type -> chatfinbot.audio.v1.UpdateRecordReq
	33, // 46: chatfinbot.audio.v1.AudioService.GetSchedule:input_type -> chatfinbot.audio.v1.GetScheduleReq
	41, // 47: chatfinbot.audio.v1.AudioService.GetRecord:input_type -> chatfinbot.audio.v1.GetRecordReq
	43, // 48: chatfinbot.audio.v1.AudioService.GetMeetingType:input_type -> chatfinbot.audio.v1.GetMeetingTypeReq
	7,  // 49: chatfinbot.audio.v1.AudioService.CreateRecord:output_type -> chatfinbot.audio.v1.CreateRecordRsp
	9,  // 50: chatfinbot.audio.v1.AudioService.GetRecordList:output_type -> chatfinbot.audio.v1.GetRecordListRsp
	12, // 51: chatfinbot.audio.v1.AudioService.GetRecordStatus:output_type -> chatfinbot.audio.v1.GetRecordStatusRsp
	16, // 52: chatfinbot.audio.v1.AudioService.Transcription:output_type -> chatfinbot.audio.v1.TranscriptionRsp
	18, // 53: chatfinbot.audio.v1.AudioService.GetTransData:output_type -> chatfinbot.audio.v1.GetTransDataRsp
	24, // 54: chatfinbot.audio.v1.AudioService.SummaryDepth:output_type -> chatfinbot.audio.v1.SummaryDepthRsp
	28, // 55: chatfinbot.audio.v1.AudioService.GetSummaryDepth:output_type -> chatfinbot.audio.v1.GetSummaryDepthRsp
	26, // 56: chatfinbot.audio.v1.AudioService.UpdateSummary:output_type -> chatfinbot.audio.v1.UpdateSummaryRsp
	30, // 57: chatfinbot.audio.v1.AudioService.CheckTrans:output_type -> chatfinbot.audio.v1.CheckTransRsp
	32, // 58: chatfinbot.audio.v1.AudioService.UpdateRecord:output_type -> chatfinbot.audio.v1.UpdateRecordRsp
	34, // 59: chatfinbot.audio.v1.AudioService.GetSchedule:output_type -> chatfinbot.audio.v1.GetScheduleRsp
	42, // 60: chatfinbot.audio.v1.AudioService.GetRecord:output_type -> chatfinbot.audio.v1.GetRecordRsp
	44, // 61: chatfinbot.audio.v1.AudioService.GetMeetingType:output_type -> chatfinbot.audio.v1.GetMeetingTypeRsp
	49, // [49:62] is the sub-list for method output_type
	36, // [36:49] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordStatusRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSummaryPartialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSummaryPartialPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSummaryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryDepthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryDepthRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSummaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSummaryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummaryDepthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummaryDepthRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTransReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTransRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScheduleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInfoSubtitles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInfoChapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInfoSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInfoDepthSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleInfoTodo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeetingTypeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetingTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		EnumInfos:         file_audio_proto_enumTypes,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_rawDesc = nil
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
