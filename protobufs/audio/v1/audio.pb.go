// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: audio.proto

package audiopb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
	DocId     string `protobuf:"bytes,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`             // 文件id
}

func (x *CreateRecordReq) Reset() {
	*x = CreateRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordReq) ProtoMessage() {}

func (x *CreateRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordReq.ProtoReflect.Descriptor instead.
func (*CreateRecordReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRecordReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateRecordReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

type CreateRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // 获取任务id
}

func (x *CreateRecordRsp) Reset() {
	*x = CreateRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecordRsp) ProtoMessage() {}

func (x *CreateRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecordRsp.ProtoReflect.Descriptor instead.
func (*CreateRecordRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRecordRsp) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
	Page      uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                           // 页码
	PageSize  uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`   // 页数
}

func (x *GetRecordListReq) Reset() {
	*x = GetRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordListReq) ProtoMessage() {}

func (x *GetRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordListReq.ProtoReflect.Descriptor instead.
func (*GetRecordListReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecordListReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetRecordListReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRecordListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetRecordListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MediaRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetRecordListRsp) Reset() {
	*x = GetRecordListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordListRsp) ProtoMessage() {}

func (x *GetRecordListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordListRsp.ProtoReflect.Descriptor instead.
func (*GetRecordListRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecordListRsp) GetList() []*MediaRecord {
	if x != nil {
		return x.List
	}
	return nil
}

type MediaRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId     string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`               // 文件id
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                        // 内容
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`   // session id
	Summary   string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`                        // 总结
	CreateAt  string `protobuf:"bytes,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`      // 创建时间
	UpdateAt  string `protobuf:"bytes,6,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`      // 更新时间
	Status    uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                         //进度
	Schedule  string `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`                      // 进度
	Url       string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`                                // 视频链接地址
	MediaType uint32 `protobuf:"varint,10,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"` // 媒体类型
}

func (x *MediaRecord) Reset() {
	*x = MediaRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaRecord) ProtoMessage() {}

func (x *MediaRecord) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaRecord.ProtoReflect.Descriptor instead.
func (*MediaRecord) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{4}
}

func (x *MediaRecord) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *MediaRecord) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MediaRecord) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MediaRecord) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *MediaRecord) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *MediaRecord) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

func (x *MediaRecord) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MediaRecord) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *MediaRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaRecord) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

type GetRecordStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // 任务id
}

func (x *GetRecordStatusReq) Reset() {
	*x = GetRecordStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordStatusReq) ProtoMessage() {}

func (x *GetRecordStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordStatusReq.ProtoReflect.Descriptor instead.
func (*GetRecordStatusReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{5}
}

func (x *GetRecordStatusReq) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetRecordStatusRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MediaRecord `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRecordStatusRsp) Reset() {
	*x = GetRecordStatusRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordStatusRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordStatusRsp) ProtoMessage() {}

func (x *GetRecordStatusRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordStatusRsp.ProtoReflect.Descriptor instead.
func (*GetRecordStatusRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{6}
}

func (x *GetRecordStatusRsp) GetData() *MediaRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type TranscriptionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // session id
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                      // 内容
	Status    uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                       // 状态 1=保存 2=保存并生成总结
}

func (x *TranscriptionReq) Reset() {
	*x = TranscriptionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionReq) ProtoMessage() {}

func (x *TranscriptionReq) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionReq.ProtoReflect.Descriptor instead.
func (*TranscriptionReq) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{7}
}

func (x *TranscriptionReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TranscriptionReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TranscriptionReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TranscriptionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // 任务id
}

func (x *TranscriptionRsp) Reset() {
	*x = TranscriptionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionRsp) ProtoMessage() {}

func (x *TranscriptionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionRsp.ProtoReflect.Descriptor instead.
func (*TranscriptionRsp) Descriptor() ([]byte, []int) {
	return file_audio_proto_rawDescGZIP(), []int{8}
}

func (x *TranscriptionRsp) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

var File_audio_proto protoreflect.FileDescriptor

var file_audio_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x32, 0x8d, 0x03, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x63, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_proto_rawDescOnce sync.Once
	file_audio_proto_rawDescData = file_audio_proto_rawDesc
)

func file_audio_proto_rawDescGZIP() []byte {
	file_audio_proto_rawDescOnce.Do(func() {
		file_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_proto_rawDescData)
	})
	return file_audio_proto_rawDescData
}

var file_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_audio_proto_goTypes = []interface{}{
	(*CreateRecordReq)(nil),    // 0: chatfinbot.audio.v1.CreateRecordReq
	(*CreateRecordRsp)(nil),    // 1: chatfinbot.audio.v1.CreateRecordRsp
	(*GetRecordListReq)(nil),   // 2: chatfinbot.audio.v1.GetRecordListReq
	(*GetRecordListRsp)(nil),   // 3: chatfinbot.audio.v1.GetRecordListRsp
	(*MediaRecord)(nil),        // 4: chatfinbot.audio.v1.MediaRecord
	(*GetRecordStatusReq)(nil), // 5: chatfinbot.audio.v1.GetRecordStatusReq
	(*GetRecordStatusRsp)(nil), // 6: chatfinbot.audio.v1.GetRecordStatusRsp
	(*TranscriptionReq)(nil),   // 7: chatfinbot.audio.v1.TranscriptionReq
	(*TranscriptionRsp)(nil),   // 8: chatfinbot.audio.v1.TranscriptionRsp
}
var file_audio_proto_depIdxs = []int32{
	4, // 0: chatfinbot.audio.v1.GetRecordListRsp.list:type_name -> chatfinbot.audio.v1.MediaRecord
	4, // 1: chatfinbot.audio.v1.GetRecordStatusRsp.data:type_name -> chatfinbot.audio.v1.MediaRecord
	0, // 2: chatfinbot.audio.v1.AudioService.CreateRecord:input_type -> chatfinbot.audio.v1.CreateRecordReq
	2, // 3: chatfinbot.audio.v1.AudioService.GetRecordList:input_type -> chatfinbot.audio.v1.GetRecordListReq
	5, // 4: chatfinbot.audio.v1.AudioService.GetRecordStatus:input_type -> chatfinbot.audio.v1.GetRecordStatusReq
	7, // 5: chatfinbot.audio.v1.AudioService.Transcription:input_type -> chatfinbot.audio.v1.TranscriptionReq
	1, // 6: chatfinbot.audio.v1.AudioService.CreateRecord:output_type -> chatfinbot.audio.v1.CreateRecordRsp
	3, // 7: chatfinbot.audio.v1.AudioService.GetRecordList:output_type -> chatfinbot.audio.v1.GetRecordListRsp
	6, // 8: chatfinbot.audio.v1.AudioService.GetRecordStatus:output_type -> chatfinbot.audio.v1.GetRecordStatusRsp
	8, // 9: chatfinbot.audio.v1.AudioService.Transcription:output_type -> chatfinbot.audio.v1.TranscriptionRsp
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_audio_proto_init() }
func file_audio_proto_init() {
	if File_audio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordStatusRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proto_goTypes,
		DependencyIndexes: file_audio_proto_depIdxs,
		MessageInfos:      file_audio_proto_msgTypes,
	}.Build()
	File_audio_proto = out.File
	file_audio_proto_rawDesc = nil
	file_audio_proto_goTypes = nil
	file_audio_proto_depIdxs = nil
}
