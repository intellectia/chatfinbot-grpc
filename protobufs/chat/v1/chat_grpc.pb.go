// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: chat/v1/chat.proto

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	RateMessage(ctx context.Context, in *RateMessageReq, opts ...grpc.CallOption) (*RateMessageRsp, error)
	// New RPC methods for managing sessions
	CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error)
	UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error)
	DeleteSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Empty, error)
	GetSessionBySessionID(ctx context.Context, in *GetSessionBySessionIDReq, opts ...grpc.CallOption) (*GetSessionBySessionIDRsp, error)
	GetSessionList(ctx context.Context, in *GetSessionListReq, opts ...grpc.CallOption) (*GetSessionListResponse, error)
	// New RPC methods for managing chat
	GetChatHistory(ctx context.Context, in *GetChatHistoryReq, opts ...grpc.CallOption) (*GetChatHistoryRsp, error)
	IntelChat(ctx context.Context, in *IntelChatReq, opts ...grpc.CallOption) (*IntelChatRsp, error)
	CheckUserSessionInner(ctx context.Context, in *CheckUserSessionReq, opts ...grpc.CallOption) (*CheckUserSessionRsp, error)
	GetAudioWsURL(ctx context.Context, in *GetAudioWsURLReq, opts ...grpc.CallOption) (*GetAudioWsURLRsp, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) RateMessage(ctx context.Context, in *RateMessageReq, opts ...grpc.CallOption) (*RateMessageRsp, error) {
	out := new(RateMessageRsp)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/RateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSessionBySessionID(ctx context.Context, in *GetSessionBySessionIDReq, opts ...grpc.CallOption) (*GetSessionBySessionIDRsp, error) {
	out := new(GetSessionBySessionIDRsp)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/GetSessionBySessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSessionList(ctx context.Context, in *GetSessionListReq, opts ...grpc.CallOption) (*GetSessionListResponse, error) {
	out := new(GetSessionListResponse)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/GetSessionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatHistory(ctx context.Context, in *GetChatHistoryReq, opts ...grpc.CallOption) (*GetChatHistoryRsp, error) {
	out := new(GetChatHistoryRsp)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/GetChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) IntelChat(ctx context.Context, in *IntelChatReq, opts ...grpc.CallOption) (*IntelChatRsp, error) {
	out := new(IntelChatRsp)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/IntelChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CheckUserSessionInner(ctx context.Context, in *CheckUserSessionReq, opts ...grpc.CallOption) (*CheckUserSessionRsp, error) {
	out := new(CheckUserSessionRsp)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/CheckUserSessionInner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAudioWsURL(ctx context.Context, in *GetAudioWsURLReq, opts ...grpc.CallOption) (*GetAudioWsURLRsp, error) {
	out := new(GetAudioWsURLRsp)
	err := c.cc.Invoke(ctx, "/chatfinbot.chat.v1.ChatService/GetAudioWsURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	RateMessage(context.Context, *RateMessageReq) (*RateMessageRsp, error)
	// New RPC methods for managing sessions
	CreateSession(context.Context, *Session) (*SessionResponse, error)
	UpdateSession(context.Context, *Session) (*SessionResponse, error)
	DeleteSession(context.Context, *Session) (*Empty, error)
	GetSessionBySessionID(context.Context, *GetSessionBySessionIDReq) (*GetSessionBySessionIDRsp, error)
	GetSessionList(context.Context, *GetSessionListReq) (*GetSessionListResponse, error)
	// New RPC methods for managing chat
	GetChatHistory(context.Context, *GetChatHistoryReq) (*GetChatHistoryRsp, error)
	IntelChat(context.Context, *IntelChatReq) (*IntelChatRsp, error)
	CheckUserSessionInner(context.Context, *CheckUserSessionReq) (*CheckUserSessionRsp, error)
	GetAudioWsURL(context.Context, *GetAudioWsURLReq) (*GetAudioWsURLRsp, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) RateMessage(context.Context, *RateMessageReq) (*RateMessageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateMessage not implemented")
}
func (UnimplementedChatServiceServer) CreateSession(context.Context, *Session) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedChatServiceServer) UpdateSession(context.Context, *Session) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedChatServiceServer) DeleteSession(context.Context, *Session) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedChatServiceServer) GetSessionBySessionID(context.Context, *GetSessionBySessionIDReq) (*GetSessionBySessionIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionBySessionID not implemented")
}
func (UnimplementedChatServiceServer) GetSessionList(context.Context, *GetSessionListReq) (*GetSessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionList not implemented")
}
func (UnimplementedChatServiceServer) GetChatHistory(context.Context, *GetChatHistoryReq) (*GetChatHistoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistory not implemented")
}
func (UnimplementedChatServiceServer) IntelChat(context.Context, *IntelChatReq) (*IntelChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntelChat not implemented")
}
func (UnimplementedChatServiceServer) CheckUserSessionInner(context.Context, *CheckUserSessionReq) (*CheckUserSessionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserSessionInner not implemented")
}
func (UnimplementedChatServiceServer) GetAudioWsURL(context.Context, *GetAudioWsURLReq) (*GetAudioWsURLRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioWsURL not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_RateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/RateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RateMessage(ctx, req.(*RateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSessionBySessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionBySessionIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSessionBySessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/GetSessionBySessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSessionBySessionID(ctx, req.(*GetSessionBySessionIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/GetSessionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSessionList(ctx, req.(*GetSessionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/GetChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatHistory(ctx, req.(*GetChatHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_IntelChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntelChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).IntelChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/IntelChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).IntelChat(ctx, req.(*IntelChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CheckUserSessionInner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckUserSessionInner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/CheckUserSessionInner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckUserSessionInner(ctx, req.(*CheckUserSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAudioWsURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioWsURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAudioWsURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatfinbot.chat.v1.ChatService/GetAudioWsURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAudioWsURL(ctx, req.(*GetAudioWsURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatfinbot.chat.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RateMessage",
			Handler:    _ChatService_RateMessage_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _ChatService_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _ChatService_UpdateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _ChatService_DeleteSession_Handler,
		},
		{
			MethodName: "GetSessionBySessionID",
			Handler:    _ChatService_GetSessionBySessionID_Handler,
		},
		{
			MethodName: "GetSessionList",
			Handler:    _ChatService_GetSessionList_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _ChatService_GetChatHistory_Handler,
		},
		{
			MethodName: "IntelChat",
			Handler:    _ChatService_IntelChat_Handler,
		},
		{
			MethodName: "CheckUserSessionInner",
			Handler:    _ChatService_CheckUserSessionInner_Handler,
		},
		{
			MethodName: "GetAudioWsURL",
			Handler:    _ChatService_GetAudioWsURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/v1/chat.proto",
}
