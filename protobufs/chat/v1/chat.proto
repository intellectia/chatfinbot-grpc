syntax = "proto3";

package chatfinbot.chat.v1;

option go_package = ".;chatpb";

message Message {
  // int64 id = 1;
  string sender_id = 2;
  string content = 3;
}

message Feedback {
  int64 message_id = 1;
  int32 rate_score = 3;
  bool is_rated = 4;
}

message Attachment {
  string name = 1;
  string type = 2;
  string doc_id = 3;
}

message SessionData {
  repeated Attachment attachments = 1;
}

message Session {
  int64 id = 1;
  string user_id = 2;
  string title = 3;
  int64  created_at = 4;
  int64  updated_at = 5;
  string session_id = 6;
  int32  model_type = 7;
  SessionData session_data = 8;
  bool is_collected = 9;
  int64 collection_id = 10;
  string session_type = 11;
}


message Empty {}

message FeedbackResponse {
  Feedback feedback = 1;
}

message GetFeedbackListResponse {
  repeated Feedback feedbacks = 1;
}

message SessionResponse {
  Session session = 1;
}

message GetSessionListResponse {
  repeated Session sessions = 1;
}

message GetChatHistoryReq {
    string session_id = 1;
    uint32 limit = 2;
}

message GetChatHistoryRsp {
    repeated ChatHistory history = 1;
}

message ChatHistory {
    string role = 1;
    string name = 2;
    string message = 3;
    int64 message_id = 4;
    bool is_rated = 5;
    int32 rate_score = 6;
    ChatHistoryAdditionalData additional_data = 7;
    uint32 chat_type = 8; // 消息类型 0=普通消息 1=公司简介 2=行情指标 3=股东信息 4=高管 5=财务指标 6主营业务 7=员工构成
    string params = 9;
    string context = 10;
    string images = 11;
}

message ChatHistoryAdditionalData {
    string references = 1;
    string plotly_graph = 2;
    repeated ChatHistoryDocuments documents = 3;
}

message ChatHistoryDocuments {
    string title = 1;   // 标题
    string name = 2; // 文件名
    string doc_id = 3; // doc id
    string type = 4;    // 文件类型
    string s3_bucket = 5; // bucket
    string s3_path = 6;  // s3路径
    string language = 7; // 语言
    int32 total_pages = 8;  // 总的页数
}

message ChatHistoryReferences {
    string doc_id = 1; 
    repeated string val = 2;
}

message IntelChatReq {
    string session_id = 1;
    string message = 2;
    uint32 chat_type = 3;
    string params = 4;
}

message GetSessionListReq {
    string session_type = 1;
}

message IntelChatRsp {
    
}

message CheckUserSessionReq {
    string session_id = 1;
    string user_id = 2;
}

message CheckUserSessionRsp {
    bool match= 1;
}

message GetAudioWsURLReq {
}

message GetAudioWsURLRsp {
    string url = 1; 
}


service ChatService {
  rpc GiveFeedback(Feedback) returns (Empty);
  rpc GetFeedbackList(Empty) returns (GetFeedbackListResponse);


  // New RPC methods for managing sessions
  rpc CreateSession(Session) returns (SessionResponse);
  rpc UpdateSession(Session) returns (SessionResponse);
  rpc DeleteSession(Session) returns (Empty);
  rpc GetSessionByID(Session) returns (SessionResponse);
  rpc GetSessionList(GetSessionListReq) returns (GetSessionListResponse);
  
  // New RPC methods for managing chat
  rpc GetChatHistory (GetChatHistoryReq) returns (GetChatHistoryRsp);
  rpc IntelChat(IntelChatReq) returns (IntelChatRsp);

  rpc CheckUserSessionInner(CheckUserSessionReq) returns (CheckUserSessionRsp);

  rpc GetAudioWsURL(GetAudioWsURLReq) returns (GetAudioWsURLRsp);
}

