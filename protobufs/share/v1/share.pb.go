// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: share.proto

package sharepb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChatInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Mid int32  `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (x *GetChatInfoReq) Reset() {
	*x = GetChatInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoReq) ProtoMessage() {}

func (x *GetChatInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoReq.ProtoReflect.Descriptor instead.
func (*GetChatInfoReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{0}
}

func (x *GetChatInfoReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *GetChatInfoReq) GetMid() int32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

type GetChatInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
	List []*ChatHistory `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetChatInfoRsp) Reset() {
	*x = GetChatInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatInfoRsp) ProtoMessage() {}

func (x *GetChatInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatInfoRsp.ProtoReflect.Descriptor instead.
func (*GetChatInfoRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{1}
}

func (x *GetChatInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetChatInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetChatInfoRsp) GetList() []*ChatHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type ChatHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role           string                     `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Name           string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Message        string                     `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	MessageId      int64                      `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	IsRated        bool                       `protobuf:"varint,5,opt,name=is_rated,json=isRated,proto3" json:"is_rated,omitempty"`
	RateScore      int32                      `protobuf:"varint,6,opt,name=rate_score,json=rateScore,proto3" json:"rate_score,omitempty"`
	AdditionalData *ChatHistoryAdditionalData `protobuf:"bytes,7,opt,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	ChatType       uint32                     `protobuf:"varint,8,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"` // 消息类型 0=普通消息 1=公司简介 2=行情指标 3=股东信息 4=高管 5=财务指标 6主营业务 7=员工构成
	Params         string                     `protobuf:"bytes,9,opt,name=params,proto3" json:"params,omitempty"`
	Context        string                     `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
	Images         string                     `protobuf:"bytes,11,opt,name=images,proto3" json:"images,omitempty"`
	ChatId         string                     `protobuf:"bytes,12,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *ChatHistory) Reset() {
	*x = ChatHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistory) ProtoMessage() {}

func (x *ChatHistory) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistory.ProtoReflect.Descriptor instead.
func (*ChatHistory) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{2}
}

func (x *ChatHistory) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatHistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatHistory) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatHistory) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ChatHistory) GetIsRated() bool {
	if x != nil {
		return x.IsRated
	}
	return false
}

func (x *ChatHistory) GetRateScore() int32 {
	if x != nil {
		return x.RateScore
	}
	return 0
}

func (x *ChatHistory) GetAdditionalData() *ChatHistoryAdditionalData {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *ChatHistory) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *ChatHistory) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ChatHistory) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ChatHistory) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *ChatHistory) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

type ChatHistoryAdditionalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References  string                  `protobuf:"bytes,1,opt,name=references,proto3" json:"references,omitempty"`
	PlotlyGraph string                  `protobuf:"bytes,2,opt,name=plotly_graph,json=plotlyGraph,proto3" json:"plotly_graph,omitempty"`
	Documents   []*ChatHistoryDocuments `protobuf:"bytes,3,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *ChatHistoryAdditionalData) Reset() {
	*x = ChatHistoryAdditionalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryAdditionalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryAdditionalData) ProtoMessage() {}

func (x *ChatHistoryAdditionalData) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryAdditionalData.ProtoReflect.Descriptor instead.
func (*ChatHistoryAdditionalData) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{3}
}

func (x *ChatHistoryAdditionalData) GetReferences() string {
	if x != nil {
		return x.References
	}
	return ""
}

func (x *ChatHistoryAdditionalData) GetPlotlyGraph() string {
	if x != nil {
		return x.PlotlyGraph
	}
	return ""
}

func (x *ChatHistoryAdditionalData) GetDocuments() []*ChatHistoryDocuments {
	if x != nil {
		return x.Documents
	}
	return nil
}

type ChatHistoryDocuments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                              // 标题
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                // 文件名
	DocId      string `protobuf:"bytes,3,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`                 // doc id
	Type       string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                                // 文件类型
	S3Bucket   string `protobuf:"bytes,5,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`        // bucket
	S3Path     string `protobuf:"bytes,6,opt,name=s3_path,json=s3Path,proto3" json:"s3_path,omitempty"`              // s3路径
	Language   string `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`                        // 语言
	TotalPages int32  `protobuf:"varint,8,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"` // 总的页数
	Url        string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`                                  // url
}

func (x *ChatHistoryDocuments) Reset() {
	*x = ChatHistoryDocuments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHistoryDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHistoryDocuments) ProtoMessage() {}

func (x *ChatHistoryDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHistoryDocuments.ProtoReflect.Descriptor instead.
func (*ChatHistoryDocuments) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{4}
}

func (x *ChatHistoryDocuments) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatHistoryDocuments) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatHistoryDocuments) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *ChatHistoryDocuments) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatHistoryDocuments) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *ChatHistoryDocuments) GetS3Path() string {
	if x != nil {
		return x.S3Path
	}
	return ""
}

func (x *ChatHistoryDocuments) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ChatHistoryDocuments) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *ChatHistoryDocuments) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetDocInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Mid int32  `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (x *GetDocInfoReq) Reset() {
	*x = GetDocInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocInfoReq) ProtoMessage() {}

func (x *GetDocInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocInfoReq.ProtoReflect.Descriptor instead.
func (*GetDocInfoReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{5}
}

func (x *GetDocInfoReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *GetDocInfoReq) GetMid() int32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

type GetDocInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32          `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
	List []*ChatHistory `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetDocInfoRsp) Reset() {
	*x = GetDocInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocInfoRsp) ProtoMessage() {}

func (x *GetDocInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocInfoRsp.ProtoReflect.Descriptor instead.
func (*GetDocInfoRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{6}
}

func (x *GetDocInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetDocInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDocInfoRsp) GetList() []*ChatHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type GetAudioInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *GetAudioInfoReq) Reset() {
	*x = GetAudioInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioInfoReq) ProtoMessage() {}

func (x *GetAudioInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioInfoReq.ProtoReflect.Descriptor instead.
func (*GetAudioInfoReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{7}
}

func (x *GetAudioInfoReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type GetAudioInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *GetAudioInfoRsp) Reset() {
	*x = GetAudioInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioInfoRsp) ProtoMessage() {}

func (x *GetAudioInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioInfoRsp.ProtoReflect.Descriptor instead.
func (*GetAudioInfoRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{8}
}

func (x *GetAudioInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetAudioInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetVideoInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *GetVideoInfoReq) Reset() {
	*x = GetVideoInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoInfoReq) ProtoMessage() {}

func (x *GetVideoInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoInfoReq.ProtoReflect.Descriptor instead.
func (*GetVideoInfoReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{9}
}

func (x *GetVideoInfoReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type GetVideoInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *GetVideoInfoRsp) Reset() {
	*x = GetVideoInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoInfoRsp) ProtoMessage() {}

func (x *GetVideoInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoInfoRsp.ProtoReflect.Descriptor instead.
func (*GetVideoInfoRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{10}
}

func (x *GetVideoInfoRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetVideoInfoRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ShareChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *ShareChatReq) Reset() {
	*x = ShareChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareChatReq) ProtoMessage() {}

func (x *ShareChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareChatReq.ProtoReflect.Descriptor instead.
func (*ShareChatReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{11}
}

func (x *ShareChatReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type ShareChatRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *ShareChatRsp) Reset() {
	*x = ShareChatRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareChatRsp) ProtoMessage() {}

func (x *ShareChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareChatRsp.ProtoReflect.Descriptor instead.
func (*ShareChatRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{12}
}

func (x *ShareChatRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *ShareChatRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UnshareChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *UnshareChatReq) Reset() {
	*x = UnshareChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareChatReq) ProtoMessage() {}

func (x *UnshareChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareChatReq.ProtoReflect.Descriptor instead.
func (*UnshareChatReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{13}
}

func (x *UnshareChatReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type UnshareChatRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *UnshareChatRsp) Reset() {
	*x = UnshareChatRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareChatRsp) ProtoMessage() {}

func (x *UnshareChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareChatRsp.ProtoReflect.Descriptor instead.
func (*UnshareChatRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{14}
}

func (x *UnshareChatRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *UnshareChatRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ShareDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *ShareDocReq) Reset() {
	*x = ShareDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareDocReq) ProtoMessage() {}

func (x *ShareDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareDocReq.ProtoReflect.Descriptor instead.
func (*ShareDocReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{15}
}

func (x *ShareDocReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type ShareDocRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *ShareDocRsp) Reset() {
	*x = ShareDocRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareDocRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareDocRsp) ProtoMessage() {}

func (x *ShareDocRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareDocRsp.ProtoReflect.Descriptor instead.
func (*ShareDocRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{16}
}

func (x *ShareDocRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *ShareDocRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UnshareDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *UnshareDocReq) Reset() {
	*x = UnshareDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareDocReq) ProtoMessage() {}

func (x *UnshareDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareDocReq.ProtoReflect.Descriptor instead.
func (*UnshareDocReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{17}
}

func (x *UnshareDocReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type UnshareDocRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *UnshareDocRsp) Reset() {
	*x = UnshareDocRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareDocRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareDocRsp) ProtoMessage() {}

func (x *UnshareDocRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareDocRsp.ProtoReflect.Descriptor instead.
func (*UnshareDocRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{18}
}

func (x *UnshareDocRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *UnshareDocRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CheckShareChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *CheckShareChatReq) Reset() {
	*x = CheckShareChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckShareChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckShareChatReq) ProtoMessage() {}

func (x *CheckShareChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckShareChatReq.ProtoReflect.Descriptor instead.
func (*CheckShareChatReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{19}
}

func (x *CheckShareChatReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type CheckShareChatRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`                        // 错误码
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // msg
	IsShare bool   `protobuf:"varint,3,opt,name=is_share,json=isShare,proto3" json:"is_share,omitempty"` //
}

func (x *CheckShareChatRsp) Reset() {
	*x = CheckShareChatRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckShareChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckShareChatRsp) ProtoMessage() {}

func (x *CheckShareChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckShareChatRsp.ProtoReflect.Descriptor instead.
func (*CheckShareChatRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{20}
}

func (x *CheckShareChatRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckShareChatRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckShareChatRsp) GetIsShare() bool {
	if x != nil {
		return x.IsShare
	}
	return false
}

type CheckShareDocReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *CheckShareDocReq) Reset() {
	*x = CheckShareDocReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckShareDocReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckShareDocReq) ProtoMessage() {}

func (x *CheckShareDocReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckShareDocReq.ProtoReflect.Descriptor instead.
func (*CheckShareDocReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{21}
}

func (x *CheckShareDocReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type CheckShareDocRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`                        // 错误码
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // msg
	IsShare bool   `protobuf:"varint,3,opt,name=is_share,json=isShare,proto3" json:"is_share,omitempty"` //
}

func (x *CheckShareDocRsp) Reset() {
	*x = CheckShareDocRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckShareDocRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckShareDocRsp) ProtoMessage() {}

func (x *CheckShareDocRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckShareDocRsp.ProtoReflect.Descriptor instead.
func (*CheckShareDocRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{22}
}

func (x *CheckShareDocRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckShareDocRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckShareDocRsp) GetIsShare() bool {
	if x != nil {
		return x.IsShare
	}
	return false
}

type ShareAudioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *ShareAudioReq) Reset() {
	*x = ShareAudioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareAudioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareAudioReq) ProtoMessage() {}

func (x *ShareAudioReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareAudioReq.ProtoReflect.Descriptor instead.
func (*ShareAudioReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{23}
}

func (x *ShareAudioReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type ShareAudioRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *ShareAudioRsp) Reset() {
	*x = ShareAudioRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareAudioRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareAudioRsp) ProtoMessage() {}

func (x *ShareAudioRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareAudioRsp.ProtoReflect.Descriptor instead.
func (*ShareAudioRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{24}
}

func (x *ShareAudioRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *ShareAudioRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UnshareAudioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *UnshareAudioReq) Reset() {
	*x = UnshareAudioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareAudioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareAudioReq) ProtoMessage() {}

func (x *UnshareAudioReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareAudioReq.ProtoReflect.Descriptor instead.
func (*UnshareAudioReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{25}
}

func (x *UnshareAudioReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type UnshareAudioRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *UnshareAudioRsp) Reset() {
	*x = UnshareAudioRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareAudioRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareAudioRsp) ProtoMessage() {}

func (x *UnshareAudioRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareAudioRsp.ProtoReflect.Descriptor instead.
func (*UnshareAudioRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{26}
}

func (x *UnshareAudioRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *UnshareAudioRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CheckAudioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *CheckAudioReq) Reset() {
	*x = CheckAudioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAudioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAudioReq) ProtoMessage() {}

func (x *CheckAudioReq) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAudioReq.ProtoReflect.Descriptor instead.
func (*CheckAudioReq) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{27}
}

func (x *CheckAudioReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type CheckAudioRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret     int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`                        // 错误码
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         // msg
	IsShare bool   `protobuf:"varint,3,opt,name=is_share,json=isShare,proto3" json:"is_share,omitempty"` //
}

func (x *CheckAudioRsp) Reset() {
	*x = CheckAudioRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_share_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAudioRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAudioRsp) ProtoMessage() {}

func (x *CheckAudioRsp) ProtoReflect() protoreflect.Message {
	mi := &file_share_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAudioRsp.ProtoReflect.Descriptor instead.
func (*CheckAudioRsp) Descriptor() ([]byte, []int) {
	return file_share_proto_rawDescGZIP(), []int{28}
}

func (x *CheckAudioRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckAudioRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckAudioRsp) GetIsShare() bool {
	if x != nil {
		return x.IsShare
	}
	return false
}

var File_share_proto protoreflect.FileDescriptor

var file_share_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x34, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x57, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x6f, 0x74, 0x6c, 0x79, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x6f, 0x74,
	0x6c, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xf0, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x33, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x33,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x33, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x23, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x20, 0x0a, 0x0c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x32, 0x0a,
	0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x22, 0x0a, 0x0e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1f, 0x0a, 0x0b, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x21, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x22, 0x33, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x25, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x33,
	0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x23, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x21, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x32, 0xab, 0x0c, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x12, 0x7e, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x2d, 0x63, 0x68, 0x61, 0x74, 0x12, 0x7a, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x63,
	0x68, 0x61, 0x74, 0x12, 0x74, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x6e, 0x0a, 0x08, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x44, 0x6f, 0x63, 0x12, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x12, 0x76, 0x0a, 0x0a, 0x55, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x73, 0x70, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x64, 0x6f,
	0x63, 0x12, 0x70, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x2d, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x6f, 0x63, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x52,
	0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x64, 0x6f, 0x63, 0x12,
	0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x76, 0x0a, 0x0a, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x73, 0x70, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x7e, 0x0a, 0x0c, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2f, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x73, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2d, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_share_proto_rawDescOnce sync.Once
	file_share_proto_rawDescData = file_share_proto_rawDesc
)

func file_share_proto_rawDescGZIP() []byte {
	file_share_proto_rawDescOnce.Do(func() {
		file_share_proto_rawDescData = protoimpl.X.CompressGZIP(file_share_proto_rawDescData)
	})
	return file_share_proto_rawDescData
}

var file_share_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_share_proto_goTypes = []interface{}{
	(*GetChatInfoReq)(nil),            // 0: chatfinbot.share.v1.GetChatInfoReq
	(*GetChatInfoRsp)(nil),            // 1: chatfinbot.share.v1.GetChatInfoRsp
	(*ChatHistory)(nil),               // 2: chatfinbot.share.v1.ChatHistory
	(*ChatHistoryAdditionalData)(nil), // 3: chatfinbot.share.v1.ChatHistoryAdditionalData
	(*ChatHistoryDocuments)(nil),      // 4: chatfinbot.share.v1.ChatHistoryDocuments
	(*GetDocInfoReq)(nil),             // 5: chatfinbot.share.v1.GetDocInfoReq
	(*GetDocInfoRsp)(nil),             // 6: chatfinbot.share.v1.GetDocInfoRsp
	(*GetAudioInfoReq)(nil),           // 7: chatfinbot.share.v1.GetAudioInfoReq
	(*GetAudioInfoRsp)(nil),           // 8: chatfinbot.share.v1.GetAudioInfoRsp
	(*GetVideoInfoReq)(nil),           // 9: chatfinbot.share.v1.GetVideoInfoReq
	(*GetVideoInfoRsp)(nil),           // 10: chatfinbot.share.v1.GetVideoInfoRsp
	(*ShareChatReq)(nil),              // 11: chatfinbot.share.v1.ShareChatReq
	(*ShareChatRsp)(nil),              // 12: chatfinbot.share.v1.ShareChatRsp
	(*UnshareChatReq)(nil),            // 13: chatfinbot.share.v1.UnshareChatReq
	(*UnshareChatRsp)(nil),            // 14: chatfinbot.share.v1.UnshareChatRsp
	(*ShareDocReq)(nil),               // 15: chatfinbot.share.v1.ShareDocReq
	(*ShareDocRsp)(nil),               // 16: chatfinbot.share.v1.ShareDocRsp
	(*UnshareDocReq)(nil),             // 17: chatfinbot.share.v1.UnshareDocReq
	(*UnshareDocRsp)(nil),             // 18: chatfinbot.share.v1.UnshareDocRsp
	(*CheckShareChatReq)(nil),         // 19: chatfinbot.share.v1.CheckShareChatReq
	(*CheckShareChatRsp)(nil),         // 20: chatfinbot.share.v1.CheckShareChatRsp
	(*CheckShareDocReq)(nil),          // 21: chatfinbot.share.v1.CheckShareDocReq
	(*CheckShareDocRsp)(nil),          // 22: chatfinbot.share.v1.CheckShareDocRsp
	(*ShareAudioReq)(nil),             // 23: chatfinbot.share.v1.ShareAudioReq
	(*ShareAudioRsp)(nil),             // 24: chatfinbot.share.v1.ShareAudioRsp
	(*UnshareAudioReq)(nil),           // 25: chatfinbot.share.v1.UnshareAudioReq
	(*UnshareAudioRsp)(nil),           // 26: chatfinbot.share.v1.UnshareAudioRsp
	(*CheckAudioReq)(nil),             // 27: chatfinbot.share.v1.CheckAudioReq
	(*CheckAudioRsp)(nil),             // 28: chatfinbot.share.v1.CheckAudioRsp
}
var file_share_proto_depIdxs = []int32{
	2,  // 0: chatfinbot.share.v1.GetChatInfoRsp.list:type_name -> chatfinbot.share.v1.ChatHistory
	3,  // 1: chatfinbot.share.v1.ChatHistory.additional_data:type_name -> chatfinbot.share.v1.ChatHistoryAdditionalData
	4,  // 2: chatfinbot.share.v1.ChatHistoryAdditionalData.documents:type_name -> chatfinbot.share.v1.ChatHistoryDocuments
	2,  // 3: chatfinbot.share.v1.GetDocInfoRsp.list:type_name -> chatfinbot.share.v1.ChatHistory
	11, // 4: chatfinbot.share.v1.ShareService.ShareChat:input_type -> chatfinbot.share.v1.ShareChatReq
	19, // 5: chatfinbot.share.v1.ShareService.CheckShareChat:input_type -> chatfinbot.share.v1.CheckShareChatReq
	13, // 6: chatfinbot.share.v1.ShareService.UnshareChat:input_type -> chatfinbot.share.v1.UnshareChatReq
	0,  // 7: chatfinbot.share.v1.ShareService.GetChatInfo:input_type -> chatfinbot.share.v1.GetChatInfoReq
	15, // 8: chatfinbot.share.v1.ShareService.ShareDoc:input_type -> chatfinbot.share.v1.ShareDocReq
	17, // 9: chatfinbot.share.v1.ShareService.UnshareDoc:input_type -> chatfinbot.share.v1.UnshareDocReq
	5,  // 10: chatfinbot.share.v1.ShareService.GetDocInfo:input_type -> chatfinbot.share.v1.GetDocInfoReq
	21, // 11: chatfinbot.share.v1.ShareService.CheckShareDoc:input_type -> chatfinbot.share.v1.CheckShareDocReq
	7,  // 12: chatfinbot.share.v1.ShareService.GetAudioInfo:input_type -> chatfinbot.share.v1.GetAudioInfoReq
	23, // 13: chatfinbot.share.v1.ShareService.ShareAudio:input_type -> chatfinbot.share.v1.ShareAudioReq
	25, // 14: chatfinbot.share.v1.ShareService.UnshareAudio:input_type -> chatfinbot.share.v1.UnshareAudioReq
	27, // 15: chatfinbot.share.v1.ShareService.CheckAudio:input_type -> chatfinbot.share.v1.CheckAudioReq
	9,  // 16: chatfinbot.share.v1.ShareService.GetVideoInfo:input_type -> chatfinbot.share.v1.GetVideoInfoReq
	12, // 17: chatfinbot.share.v1.ShareService.ShareChat:output_type -> chatfinbot.share.v1.ShareChatRsp
	20, // 18: chatfinbot.share.v1.ShareService.CheckShareChat:output_type -> chatfinbot.share.v1.CheckShareChatRsp
	14, // 19: chatfinbot.share.v1.ShareService.UnshareChat:output_type -> chatfinbot.share.v1.UnshareChatRsp
	1,  // 20: chatfinbot.share.v1.ShareService.GetChatInfo:output_type -> chatfinbot.share.v1.GetChatInfoRsp
	16, // 21: chatfinbot.share.v1.ShareService.ShareDoc:output_type -> chatfinbot.share.v1.ShareDocRsp
	18, // 22: chatfinbot.share.v1.ShareService.UnshareDoc:output_type -> chatfinbot.share.v1.UnshareDocRsp
	6,  // 23: chatfinbot.share.v1.ShareService.GetDocInfo:output_type -> chatfinbot.share.v1.GetDocInfoRsp
	22, // 24: chatfinbot.share.v1.ShareService.CheckShareDoc:output_type -> chatfinbot.share.v1.CheckShareDocRsp
	8,  // 25: chatfinbot.share.v1.ShareService.GetAudioInfo:output_type -> chatfinbot.share.v1.GetAudioInfoRsp
	24, // 26: chatfinbot.share.v1.ShareService.ShareAudio:output_type -> chatfinbot.share.v1.ShareAudioRsp
	26, // 27: chatfinbot.share.v1.ShareService.UnshareAudio:output_type -> chatfinbot.share.v1.UnshareAudioRsp
	28, // 28: chatfinbot.share.v1.ShareService.CheckAudio:output_type -> chatfinbot.share.v1.CheckAudioRsp
	10, // 29: chatfinbot.share.v1.ShareService.GetVideoInfo:output_type -> chatfinbot.share.v1.GetVideoInfoRsp
	17, // [17:30] is the sub-list for method output_type
	4,  // [4:17] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_share_proto_init() }
func file_share_proto_init() {
	if File_share_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_share_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryAdditionalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHistoryDocuments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareChatRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareChatRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareDocRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareDocRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckShareChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckShareChatRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckShareDocReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckShareDocRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareAudioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareAudioRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareAudioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareAudioRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAudioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_share_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAudioRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_share_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_share_proto_goTypes,
		DependencyIndexes: file_share_proto_depIdxs,
		MessageInfos:      file_share_proto_msgTypes,
	}.Build()
	File_share_proto = out.File
	file_share_proto_rawDesc = nil
	file_share_proto_goTypes = nil
	file_share_proto_depIdxs = nil
}
