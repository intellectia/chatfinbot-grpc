// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: share.proto

package sharepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShareService_ShareChat_FullMethodName      = "/chatfinbot.share.v1.ShareService/ShareChat"
	ShareService_CheckShareChat_FullMethodName = "/chatfinbot.share.v1.ShareService/CheckShareChat"
	ShareService_UnshareChat_FullMethodName    = "/chatfinbot.share.v1.ShareService/UnshareChat"
	ShareService_GetChatInfo_FullMethodName    = "/chatfinbot.share.v1.ShareService/GetChatInfo"
	ShareService_ShareDoc_FullMethodName       = "/chatfinbot.share.v1.ShareService/ShareDoc"
	ShareService_UnshareDoc_FullMethodName     = "/chatfinbot.share.v1.ShareService/UnshareDoc"
	ShareService_GetDocInfo_FullMethodName     = "/chatfinbot.share.v1.ShareService/GetDocInfo"
	ShareService_CheckShareDoc_FullMethodName  = "/chatfinbot.share.v1.ShareService/CheckShareDoc"
	ShareService_GetAudioInfo_FullMethodName   = "/chatfinbot.share.v1.ShareService/GetAudioInfo"
	ShareService_ShareAudio_FullMethodName     = "/chatfinbot.share.v1.ShareService/ShareAudio"
	ShareService_UnshareAudio_FullMethodName   = "/chatfinbot.share.v1.ShareService/UnshareAudio"
	ShareService_CheckAudio_FullMethodName     = "/chatfinbot.share.v1.ShareService/CheckAudio"
	ShareService_GetVideoInfo_FullMethodName   = "/chatfinbot.share.v1.ShareService/GetVideoInfo"
)

// ShareServiceClient is the client API for ShareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareServiceClient interface {
	ShareChat(ctx context.Context, in *ShareChatReq, opts ...grpc.CallOption) (*ShareChatRsp, error)
	CheckShareChat(ctx context.Context, in *CheckShareChatReq, opts ...grpc.CallOption) (*CheckShareChatRsp, error)
	UnshareChat(ctx context.Context, in *UnshareChatReq, opts ...grpc.CallOption) (*UnshareChatRsp, error)
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoRsp, error)
	ShareDoc(ctx context.Context, in *ShareDocReq, opts ...grpc.CallOption) (*ShareDocRsp, error)
	UnshareDoc(ctx context.Context, in *UnshareDocReq, opts ...grpc.CallOption) (*UnshareDocRsp, error)
	GetDocInfo(ctx context.Context, in *GetDocInfoReq, opts ...grpc.CallOption) (*GetDocInfoRsp, error)
	CheckShareDoc(ctx context.Context, in *CheckShareDocReq, opts ...grpc.CallOption) (*CheckShareDocRsp, error)
	GetAudioInfo(ctx context.Context, in *GetAudioInfoReq, opts ...grpc.CallOption) (*GetAudioInfoRsp, error)
	ShareAudio(ctx context.Context, in *ShareAudioReq, opts ...grpc.CallOption) (*ShareAudioRsp, error)
	UnshareAudio(ctx context.Context, in *UnshareAudioReq, opts ...grpc.CallOption) (*UnshareAudioRsp, error)
	CheckAudio(ctx context.Context, in *CheckAudioReq, opts ...grpc.CallOption) (*CheckAudioRsp, error)
	GetVideoInfo(ctx context.Context, in *GetVideoInfoReq, opts ...grpc.CallOption) (*GetVideoInfoRsp, error)
}

type shareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShareServiceClient(cc grpc.ClientConnInterface) ShareServiceClient {
	return &shareServiceClient{cc}
}

func (c *shareServiceClient) ShareChat(ctx context.Context, in *ShareChatReq, opts ...grpc.CallOption) (*ShareChatRsp, error) {
	out := new(ShareChatRsp)
	err := c.cc.Invoke(ctx, ShareService_ShareChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) CheckShareChat(ctx context.Context, in *CheckShareChatReq, opts ...grpc.CallOption) (*CheckShareChatRsp, error) {
	out := new(CheckShareChatRsp)
	err := c.cc.Invoke(ctx, ShareService_CheckShareChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) UnshareChat(ctx context.Context, in *UnshareChatReq, opts ...grpc.CallOption) (*UnshareChatRsp, error) {
	out := new(UnshareChatRsp)
	err := c.cc.Invoke(ctx, ShareService_UnshareChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoRsp, error) {
	out := new(GetChatInfoRsp)
	err := c.cc.Invoke(ctx, ShareService_GetChatInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) ShareDoc(ctx context.Context, in *ShareDocReq, opts ...grpc.CallOption) (*ShareDocRsp, error) {
	out := new(ShareDocRsp)
	err := c.cc.Invoke(ctx, ShareService_ShareDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) UnshareDoc(ctx context.Context, in *UnshareDocReq, opts ...grpc.CallOption) (*UnshareDocRsp, error) {
	out := new(UnshareDocRsp)
	err := c.cc.Invoke(ctx, ShareService_UnshareDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) GetDocInfo(ctx context.Context, in *GetDocInfoReq, opts ...grpc.CallOption) (*GetDocInfoRsp, error) {
	out := new(GetDocInfoRsp)
	err := c.cc.Invoke(ctx, ShareService_GetDocInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) CheckShareDoc(ctx context.Context, in *CheckShareDocReq, opts ...grpc.CallOption) (*CheckShareDocRsp, error) {
	out := new(CheckShareDocRsp)
	err := c.cc.Invoke(ctx, ShareService_CheckShareDoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) GetAudioInfo(ctx context.Context, in *GetAudioInfoReq, opts ...grpc.CallOption) (*GetAudioInfoRsp, error) {
	out := new(GetAudioInfoRsp)
	err := c.cc.Invoke(ctx, ShareService_GetAudioInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) ShareAudio(ctx context.Context, in *ShareAudioReq, opts ...grpc.CallOption) (*ShareAudioRsp, error) {
	out := new(ShareAudioRsp)
	err := c.cc.Invoke(ctx, ShareService_ShareAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) UnshareAudio(ctx context.Context, in *UnshareAudioReq, opts ...grpc.CallOption) (*UnshareAudioRsp, error) {
	out := new(UnshareAudioRsp)
	err := c.cc.Invoke(ctx, ShareService_UnshareAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) CheckAudio(ctx context.Context, in *CheckAudioReq, opts ...grpc.CallOption) (*CheckAudioRsp, error) {
	out := new(CheckAudioRsp)
	err := c.cc.Invoke(ctx, ShareService_CheckAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoReq, opts ...grpc.CallOption) (*GetVideoInfoRsp, error) {
	out := new(GetVideoInfoRsp)
	err := c.cc.Invoke(ctx, ShareService_GetVideoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareServiceServer is the server API for ShareService service.
// All implementations must embed UnimplementedShareServiceServer
// for forward compatibility
type ShareServiceServer interface {
	ShareChat(context.Context, *ShareChatReq) (*ShareChatRsp, error)
	CheckShareChat(context.Context, *CheckShareChatReq) (*CheckShareChatRsp, error)
	UnshareChat(context.Context, *UnshareChatReq) (*UnshareChatRsp, error)
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoRsp, error)
	ShareDoc(context.Context, *ShareDocReq) (*ShareDocRsp, error)
	UnshareDoc(context.Context, *UnshareDocReq) (*UnshareDocRsp, error)
	GetDocInfo(context.Context, *GetDocInfoReq) (*GetDocInfoRsp, error)
	CheckShareDoc(context.Context, *CheckShareDocReq) (*CheckShareDocRsp, error)
	GetAudioInfo(context.Context, *GetAudioInfoReq) (*GetAudioInfoRsp, error)
	ShareAudio(context.Context, *ShareAudioReq) (*ShareAudioRsp, error)
	UnshareAudio(context.Context, *UnshareAudioReq) (*UnshareAudioRsp, error)
	CheckAudio(context.Context, *CheckAudioReq) (*CheckAudioRsp, error)
	GetVideoInfo(context.Context, *GetVideoInfoReq) (*GetVideoInfoRsp, error)
	mustEmbedUnimplementedShareServiceServer()
}

// UnimplementedShareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShareServiceServer struct {
}

func (UnimplementedShareServiceServer) ShareChat(context.Context, *ShareChatReq) (*ShareChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareChat not implemented")
}
func (UnimplementedShareServiceServer) CheckShareChat(context.Context, *CheckShareChatReq) (*CheckShareChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShareChat not implemented")
}
func (UnimplementedShareServiceServer) UnshareChat(context.Context, *UnshareChatReq) (*UnshareChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareChat not implemented")
}
func (UnimplementedShareServiceServer) GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatInfo not implemented")
}
func (UnimplementedShareServiceServer) ShareDoc(context.Context, *ShareDocReq) (*ShareDocRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDoc not implemented")
}
func (UnimplementedShareServiceServer) UnshareDoc(context.Context, *UnshareDocReq) (*UnshareDocRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareDoc not implemented")
}
func (UnimplementedShareServiceServer) GetDocInfo(context.Context, *GetDocInfoReq) (*GetDocInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocInfo not implemented")
}
func (UnimplementedShareServiceServer) CheckShareDoc(context.Context, *CheckShareDocReq) (*CheckShareDocRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShareDoc not implemented")
}
func (UnimplementedShareServiceServer) GetAudioInfo(context.Context, *GetAudioInfoReq) (*GetAudioInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioInfo not implemented")
}
func (UnimplementedShareServiceServer) ShareAudio(context.Context, *ShareAudioReq) (*ShareAudioRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareAudio not implemented")
}
func (UnimplementedShareServiceServer) UnshareAudio(context.Context, *UnshareAudioReq) (*UnshareAudioRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnshareAudio not implemented")
}
func (UnimplementedShareServiceServer) CheckAudio(context.Context, *CheckAudioReq) (*CheckAudioRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAudio not implemented")
}
func (UnimplementedShareServiceServer) GetVideoInfo(context.Context, *GetVideoInfoReq) (*GetVideoInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedShareServiceServer) mustEmbedUnimplementedShareServiceServer() {}

// UnsafeShareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareServiceServer will
// result in compilation errors.
type UnsafeShareServiceServer interface {
	mustEmbedUnimplementedShareServiceServer()
}

func RegisterShareServiceServer(s grpc.ServiceRegistrar, srv ShareServiceServer) {
	s.RegisterService(&ShareService_ServiceDesc, srv)
}

func _ShareService_ShareChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).ShareChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_ShareChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).ShareChat(ctx, req.(*ShareChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_CheckShareChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShareChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).CheckShareChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_CheckShareChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).CheckShareChat(ctx, req.(*CheckShareChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_UnshareChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).UnshareChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_UnshareChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).UnshareChat(ctx, req.(*UnshareChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_GetChatInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_ShareDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).ShareDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_ShareDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).ShareDoc(ctx, req.(*ShareDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_UnshareDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).UnshareDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_UnshareDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).UnshareDoc(ctx, req.(*UnshareDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_GetDocInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).GetDocInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_GetDocInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).GetDocInfo(ctx, req.(*GetDocInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_CheckShareDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShareDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).CheckShareDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_CheckShareDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).CheckShareDoc(ctx, req.(*CheckShareDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_GetAudioInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).GetAudioInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_GetAudioInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).GetAudioInfo(ctx, req.(*GetAudioInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_ShareAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareAudioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).ShareAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_ShareAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).ShareAudio(ctx, req.(*ShareAudioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_UnshareAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnshareAudioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).UnshareAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_UnshareAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).UnshareAudio(ctx, req.(*UnshareAudioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_CheckAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAudioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).CheckAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_CheckAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).CheckAudio(ctx, req.(*CheckAudioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).GetVideoInfo(ctx, req.(*GetVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShareService_ServiceDesc is the grpc.ServiceDesc for ShareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatfinbot.share.v1.ShareService",
	HandlerType: (*ShareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareChat",
			Handler:    _ShareService_ShareChat_Handler,
		},
		{
			MethodName: "CheckShareChat",
			Handler:    _ShareService_CheckShareChat_Handler,
		},
		{
			MethodName: "UnshareChat",
			Handler:    _ShareService_UnshareChat_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _ShareService_GetChatInfo_Handler,
		},
		{
			MethodName: "ShareDoc",
			Handler:    _ShareService_ShareDoc_Handler,
		},
		{
			MethodName: "UnshareDoc",
			Handler:    _ShareService_UnshareDoc_Handler,
		},
		{
			MethodName: "GetDocInfo",
			Handler:    _ShareService_GetDocInfo_Handler,
		},
		{
			MethodName: "CheckShareDoc",
			Handler:    _ShareService_CheckShareDoc_Handler,
		},
		{
			MethodName: "GetAudioInfo",
			Handler:    _ShareService_GetAudioInfo_Handler,
		},
		{
			MethodName: "ShareAudio",
			Handler:    _ShareService_ShareAudio_Handler,
		},
		{
			MethodName: "UnshareAudio",
			Handler:    _ShareService_UnshareAudio_Handler,
		},
		{
			MethodName: "CheckAudio",
			Handler:    _ShareService_CheckAudio_Handler,
		},
		{
			MethodName: "GetVideoInfo",
			Handler:    _ShareService_GetVideoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share.proto",
}
