// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: perm.proto

package rbacpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RbacService_CheckChatPerm_FullMethodName       = "/chatfinbot.rbac.v1.RbacService/CheckChatPerm"
	RbacService_CheckMediaPerm_FullMethodName      = "/chatfinbot.rbac.v1.RbacService/CheckMediaPerm"
	RbacService_CheckChatPermInner_FullMethodName  = "/chatfinbot.rbac.v1.RbacService/CheckChatPermInner"
	RbacService_CheckMediaPermInner_FullMethodName = "/chatfinbot.rbac.v1.RbacService/CheckMediaPermInner"
	RbacService_SetChatPerm_FullMethodName         = "/chatfinbot.rbac.v1.RbacService/SetChatPerm"
	RbacService_SetMediaPerm_FullMethodName        = "/chatfinbot.rbac.v1.RbacService/SetMediaPerm"
	RbacService_SetChatPermInner_FullMethodName    = "/chatfinbot.rbac.v1.RbacService/SetChatPermInner"
	RbacService_SetMediaPermInner_FullMethodName   = "/chatfinbot.rbac.v1.RbacService/SetMediaPermInner"
	RbacService_GetUserQuota_FullMethodName        = "/chatfinbot.rbac.v1.RbacService/GetUserQuota"
)

// RbacServiceClient is the client API for RbacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacServiceClient interface {
	CheckChatPerm(ctx context.Context, in *CheckChatPermReq, opts ...grpc.CallOption) (*CheckChatPermRsp, error)
	CheckMediaPerm(ctx context.Context, in *CheckMediaPermReq, opts ...grpc.CallOption) (*CheckMediaPermRsp, error)
	CheckChatPermInner(ctx context.Context, in *CheckChatPermReq, opts ...grpc.CallOption) (*CheckChatPermRsp, error)
	CheckMediaPermInner(ctx context.Context, in *CheckMediaPermReq, opts ...grpc.CallOption) (*CheckMediaPermRsp, error)
	SetChatPerm(ctx context.Context, in *SetChatPermReq, opts ...grpc.CallOption) (*SetChatPermRsp, error)
	SetMediaPerm(ctx context.Context, in *SetMediaPermReq, opts ...grpc.CallOption) (*SetMediaPermRsp, error)
	SetChatPermInner(ctx context.Context, in *SetChatPermReq, opts ...grpc.CallOption) (*SetChatPermRsp, error)
	SetMediaPermInner(ctx context.Context, in *SetMediaPermReq, opts ...grpc.CallOption) (*SetMediaPermRsp, error)
	GetUserQuota(ctx context.Context, in *GetUserQuotaReq, opts ...grpc.CallOption) (*GetUserQuotaRsp, error)
}

type rbacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacServiceClient(cc grpc.ClientConnInterface) RbacServiceClient {
	return &rbacServiceClient{cc}
}

func (c *rbacServiceClient) CheckChatPerm(ctx context.Context, in *CheckChatPermReq, opts ...grpc.CallOption) (*CheckChatPermRsp, error) {
	out := new(CheckChatPermRsp)
	err := c.cc.Invoke(ctx, RbacService_CheckChatPerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) CheckMediaPerm(ctx context.Context, in *CheckMediaPermReq, opts ...grpc.CallOption) (*CheckMediaPermRsp, error) {
	out := new(CheckMediaPermRsp)
	err := c.cc.Invoke(ctx, RbacService_CheckMediaPerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) CheckChatPermInner(ctx context.Context, in *CheckChatPermReq, opts ...grpc.CallOption) (*CheckChatPermRsp, error) {
	out := new(CheckChatPermRsp)
	err := c.cc.Invoke(ctx, RbacService_CheckChatPermInner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) CheckMediaPermInner(ctx context.Context, in *CheckMediaPermReq, opts ...grpc.CallOption) (*CheckMediaPermRsp, error) {
	out := new(CheckMediaPermRsp)
	err := c.cc.Invoke(ctx, RbacService_CheckMediaPermInner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SetChatPerm(ctx context.Context, in *SetChatPermReq, opts ...grpc.CallOption) (*SetChatPermRsp, error) {
	out := new(SetChatPermRsp)
	err := c.cc.Invoke(ctx, RbacService_SetChatPerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SetMediaPerm(ctx context.Context, in *SetMediaPermReq, opts ...grpc.CallOption) (*SetMediaPermRsp, error) {
	out := new(SetMediaPermRsp)
	err := c.cc.Invoke(ctx, RbacService_SetMediaPerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SetChatPermInner(ctx context.Context, in *SetChatPermReq, opts ...grpc.CallOption) (*SetChatPermRsp, error) {
	out := new(SetChatPermRsp)
	err := c.cc.Invoke(ctx, RbacService_SetChatPermInner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) SetMediaPermInner(ctx context.Context, in *SetMediaPermReq, opts ...grpc.CallOption) (*SetMediaPermRsp, error) {
	out := new(SetMediaPermRsp)
	err := c.cc.Invoke(ctx, RbacService_SetMediaPermInner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetUserQuota(ctx context.Context, in *GetUserQuotaReq, opts ...grpc.CallOption) (*GetUserQuotaRsp, error) {
	out := new(GetUserQuotaRsp)
	err := c.cc.Invoke(ctx, RbacService_GetUserQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServiceServer is the server API for RbacService service.
// All implementations must embed UnimplementedRbacServiceServer
// for forward compatibility
type RbacServiceServer interface {
	CheckChatPerm(context.Context, *CheckChatPermReq) (*CheckChatPermRsp, error)
	CheckMediaPerm(context.Context, *CheckMediaPermReq) (*CheckMediaPermRsp, error)
	CheckChatPermInner(context.Context, *CheckChatPermReq) (*CheckChatPermRsp, error)
	CheckMediaPermInner(context.Context, *CheckMediaPermReq) (*CheckMediaPermRsp, error)
	SetChatPerm(context.Context, *SetChatPermReq) (*SetChatPermRsp, error)
	SetMediaPerm(context.Context, *SetMediaPermReq) (*SetMediaPermRsp, error)
	SetChatPermInner(context.Context, *SetChatPermReq) (*SetChatPermRsp, error)
	SetMediaPermInner(context.Context, *SetMediaPermReq) (*SetMediaPermRsp, error)
	GetUserQuota(context.Context, *GetUserQuotaReq) (*GetUserQuotaRsp, error)
	mustEmbedUnimplementedRbacServiceServer()
}

// UnimplementedRbacServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRbacServiceServer struct {
}

func (UnimplementedRbacServiceServer) CheckChatPerm(context.Context, *CheckChatPermReq) (*CheckChatPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChatPerm not implemented")
}
func (UnimplementedRbacServiceServer) CheckMediaPerm(context.Context, *CheckMediaPermReq) (*CheckMediaPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMediaPerm not implemented")
}
func (UnimplementedRbacServiceServer) CheckChatPermInner(context.Context, *CheckChatPermReq) (*CheckChatPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChatPermInner not implemented")
}
func (UnimplementedRbacServiceServer) CheckMediaPermInner(context.Context, *CheckMediaPermReq) (*CheckMediaPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMediaPermInner not implemented")
}
func (UnimplementedRbacServiceServer) SetChatPerm(context.Context, *SetChatPermReq) (*SetChatPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatPerm not implemented")
}
func (UnimplementedRbacServiceServer) SetMediaPerm(context.Context, *SetMediaPermReq) (*SetMediaPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMediaPerm not implemented")
}
func (UnimplementedRbacServiceServer) SetChatPermInner(context.Context, *SetChatPermReq) (*SetChatPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatPermInner not implemented")
}
func (UnimplementedRbacServiceServer) SetMediaPermInner(context.Context, *SetMediaPermReq) (*SetMediaPermRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMediaPermInner not implemented")
}
func (UnimplementedRbacServiceServer) GetUserQuota(context.Context, *GetUserQuotaReq) (*GetUserQuotaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserQuota not implemented")
}
func (UnimplementedRbacServiceServer) mustEmbedUnimplementedRbacServiceServer() {}

// UnsafeRbacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServiceServer will
// result in compilation errors.
type UnsafeRbacServiceServer interface {
	mustEmbedUnimplementedRbacServiceServer()
}

func RegisterRbacServiceServer(s grpc.ServiceRegistrar, srv RbacServiceServer) {
	s.RegisterService(&RbacService_ServiceDesc, srv)
}

func _RbacService_CheckChatPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChatPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CheckChatPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_CheckChatPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CheckChatPerm(ctx, req.(*CheckChatPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_CheckMediaPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMediaPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CheckMediaPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_CheckMediaPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CheckMediaPerm(ctx, req.(*CheckMediaPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_CheckChatPermInner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChatPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CheckChatPermInner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_CheckChatPermInner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CheckChatPermInner(ctx, req.(*CheckChatPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_CheckMediaPermInner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMediaPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).CheckMediaPermInner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_CheckMediaPermInner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).CheckMediaPermInner(ctx, req.(*CheckMediaPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SetChatPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SetChatPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_SetChatPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SetChatPerm(ctx, req.(*SetChatPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SetMediaPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMediaPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SetMediaPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_SetMediaPerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SetMediaPerm(ctx, req.(*SetMediaPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SetChatPermInner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SetChatPermInner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_SetChatPermInner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SetChatPermInner(ctx, req.(*SetChatPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_SetMediaPermInner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMediaPermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).SetMediaPermInner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_SetMediaPermInner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).SetMediaPermInner(ctx, req.(*SetMediaPermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_GetUserQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetUserQuota(ctx, req.(*GetUserQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacService_ServiceDesc is the grpc.ServiceDesc for RbacService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatfinbot.rbac.v1.RbacService",
	HandlerType: (*RbacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckChatPerm",
			Handler:    _RbacService_CheckChatPerm_Handler,
		},
		{
			MethodName: "CheckMediaPerm",
			Handler:    _RbacService_CheckMediaPerm_Handler,
		},
		{
			MethodName: "CheckChatPermInner",
			Handler:    _RbacService_CheckChatPermInner_Handler,
		},
		{
			MethodName: "CheckMediaPermInner",
			Handler:    _RbacService_CheckMediaPermInner_Handler,
		},
		{
			MethodName: "SetChatPerm",
			Handler:    _RbacService_SetChatPerm_Handler,
		},
		{
			MethodName: "SetMediaPerm",
			Handler:    _RbacService_SetMediaPerm_Handler,
		},
		{
			MethodName: "SetChatPermInner",
			Handler:    _RbacService_SetChatPermInner_Handler,
		},
		{
			MethodName: "SetMediaPermInner",
			Handler:    _RbacService_SetMediaPermInner_Handler,
		},
		{
			MethodName: "GetUserQuota",
			Handler:    _RbacService_GetUserQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perm.proto",
}
