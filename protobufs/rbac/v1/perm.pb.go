// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: perm.proto

package rbacpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatType int32

const (
	ChatType_ChatTypeUnknown ChatType = 0 // 未知（不要使用）
	ChatType_ChatTypeChat    ChatType = 1 // 问答
	ChatType_ChatTypeWriting ChatType = 2 // 写作
	ChatType_ChatTypeMedia   ChatType = 3 // 音视频
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeUnknown",
		1: "ChatTypeChat",
		2: "ChatTypeWriting",
		3: "ChatTypeMedia",
	}
	ChatType_value = map[string]int32{
		"ChatTypeUnknown": 0,
		"ChatTypeChat":    1,
		"ChatTypeWriting": 2,
		"ChatTypeMedia":   3,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[0].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[0]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{0}
}

type ChatOpt int32

const (
	ChatOpt_ChatOptUnknown      ChatOpt = 0 // 未知（不要使用）
	ChatOpt_ChatOptAnswerNum    ChatOpt = 1 // 聊天问答数量
	ChatOpt_ChatOptUploadFormat ChatOpt = 2 // 上传文件格式
	ChatOpt_ChatOptOCR          ChatOpt = 3 // ocr
	ChatOpt_ChatOptFileNum      ChatOpt = 4 // 文件数量
	ChatOpt_ChatOptPageSize     ChatOpt = 5 // 文件页数
	ChatOpt_ChatOptFileSize     ChatOpt = 6 // 文件大小
	ChatOpt_ChatOptGraph        ChatOpt = 7 // 图表生成
	ChatOpt_ChatOptMultiDoc     ChatOpt = 8 //多文档分析
)

// Enum value maps for ChatOpt.
var (
	ChatOpt_name = map[int32]string{
		0: "ChatOptUnknown",
		1: "ChatOptAnswerNum",
		2: "ChatOptUploadFormat",
		3: "ChatOptOCR",
		4: "ChatOptFileNum",
		5: "ChatOptPageSize",
		6: "ChatOptFileSize",
		7: "ChatOptGraph",
		8: "ChatOptMultiDoc",
	}
	ChatOpt_value = map[string]int32{
		"ChatOptUnknown":      0,
		"ChatOptAnswerNum":    1,
		"ChatOptUploadFormat": 2,
		"ChatOptOCR":          3,
		"ChatOptFileNum":      4,
		"ChatOptPageSize":     5,
		"ChatOptFileSize":     6,
		"ChatOptGraph":        7,
		"ChatOptMultiDoc":     8,
	}
)

func (x ChatOpt) Enum() *ChatOpt {
	p := new(ChatOpt)
	*p = x
	return p
}

func (x ChatOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[1].Descriptor()
}

func (ChatOpt) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[1]
}

func (x ChatOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatOpt.Descriptor instead.
func (ChatOpt) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{1}
}

type WritingOpt int32

const (
	WritingOpt_WritingOptUnknown       WritingOpt = 0 // 未知（不要使用）
	WritingOpt_WritingOptOutputToken   WritingOpt = 1 // 输出文字数量
	WritingOpt_WritingOptInputFileNum  WritingOpt = 2 // 输入文件数量及页数
	WritingOpt_WritingOptInputPageSize WritingOpt = 3 // 输入文件数量及页数
	WritingOpt_WritingOptEdit          WritingOpt = 4 // 写作编辑
	WritingOpt_WritingOptGraph         WritingOpt = 5 // 图表生成
	WritingOpt_WritingOptExport        WritingOpt = 6 // 导出格式
	WritingOpt_WritingOptGraphNum      WritingOpt = 7 // 图表数量
	WritingOpt_WritingOptCustomColor   WritingOpt = 8 // 自定义配色方案
)

// Enum value maps for WritingOpt.
var (
	WritingOpt_name = map[int32]string{
		0: "WritingOptUnknown",
		1: "WritingOptOutputToken",
		2: "WritingOptInputFileNum",
		3: "WritingOptInputPageSize",
		4: "WritingOptEdit",
		5: "WritingOptGraph",
		6: "WritingOptExport",
		7: "WritingOptGraphNum",
		8: "WritingOptCustomColor",
	}
	WritingOpt_value = map[string]int32{
		"WritingOptUnknown":       0,
		"WritingOptOutputToken":   1,
		"WritingOptInputFileNum":  2,
		"WritingOptInputPageSize": 3,
		"WritingOptEdit":          4,
		"WritingOptGraph":         5,
		"WritingOptExport":        6,
		"WritingOptGraphNum":      7,
		"WritingOptCustomColor":   8,
	}
)

func (x WritingOpt) Enum() *WritingOpt {
	p := new(WritingOpt)
	*p = x
	return p
}

func (x WritingOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WritingOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[2].Descriptor()
}

func (WritingOpt) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[2]
}

func (x WritingOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WritingOpt.Descriptor instead.
func (WritingOpt) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{2}
}

type MediaOpt int32

const (
	MediaOpt_MediaOptUnknown MediaOpt = 0 // 未知（不要使用）
	MediaOpt_MediaOptAudio   MediaOpt = 1 // 输出音频
	MediaOpt_MediaOptVideo   MediaOpt = 2 // 视频
)

// Enum value maps for MediaOpt.
var (
	MediaOpt_name = map[int32]string{
		0: "MediaOptUnknown",
		1: "MediaOptAudio",
		2: "MediaOptVideo",
	}
	MediaOpt_value = map[string]int32{
		"MediaOptUnknown": 0,
		"MediaOptAudio":   1,
		"MediaOptVideo":   2,
	}
)

func (x MediaOpt) Enum() *MediaOpt {
	p := new(MediaOpt)
	*p = x
	return p
}

func (x MediaOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[3].Descriptor()
}

func (MediaOpt) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[3]
}

func (x MediaOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaOpt.Descriptor instead.
func (MediaOpt) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{3}
}

type PermConfigMode int32

const (
	PermConfigMode_PermConfigModeUnknown PermConfigMode = 0 // 未知（不要使用）
	PermConfigMode_PermConfigModeDay     PermConfigMode = 1 // 按天计费
	PermConfigMode_PermConfigModeMonth   PermConfigMode = 2 // 按月计费
)

// Enum value maps for PermConfigMode.
var (
	PermConfigMode_name = map[int32]string{
		0: "PermConfigModeUnknown",
		1: "PermConfigModeDay",
		2: "PermConfigModeMonth",
	}
	PermConfigMode_value = map[string]int32{
		"PermConfigModeUnknown": 0,
		"PermConfigModeDay":     1,
		"PermConfigModeMonth":   2,
	}
)

func (x PermConfigMode) Enum() *PermConfigMode {
	p := new(PermConfigMode)
	*p = x
	return p
}

func (x PermConfigMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermConfigMode) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[4].Descriptor()
}

func (PermConfigMode) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[4]
}

func (x PermConfigMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermConfigMode.Descriptor instead.
func (PermConfigMode) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{4}
}

type CheckChatPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List        []*ChatPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Ts          int64           `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                                     // 时间  外部接口才有效
	Nonce       string          `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // 随机数  外部接口才有效
	AccessToken string          `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // token 外部接口才有效
}

func (x *CheckChatPermReq) Reset() {
	*x = CheckChatPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChatPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChatPermReq) ProtoMessage() {}

func (x *CheckChatPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChatPermReq.ProtoReflect.Descriptor instead.
func (*CheckChatPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{0}
}

func (x *CheckChatPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckChatPermReq) GetList() []*ChatPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CheckChatPermReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CheckChatPermReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CheckChatPermReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type ChatPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt          ChatOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.ChatOpt" json:"opt,omitempty"`      // 选项
	UploadFormat string  `protobuf:"bytes,2,opt,name=upload_format,json=uploadFormat,proto3" json:"upload_format,omitempty"` // 上传文件格式 只有在opt=ChatOptUploadFormat生效
	OcrNum       uint32  `protobuf:"varint,3,opt,name=ocr_num,json=ocrNum,proto3" json:"ocr_num,omitempty"`                  // OCR数量     只有在opt=ChatOptOCR生效
	FileNum      uint32  `protobuf:"varint,4,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`               // 文件数量    只有在opt=ChatOptFileNum  生效
	PageSize     uint32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 文件页数   只有在opt=ChatOptPageSize  生效
	FileSize     uint32  `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`            // 文件大小 有在opt=ChatOptFileSize  生效
}

func (x *ChatPermItem) Reset() {
	*x = ChatPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPermItem) ProtoMessage() {}

func (x *ChatPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPermItem.ProtoReflect.Descriptor instead.
func (*ChatPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{1}
}

func (x *ChatPermItem) GetOpt() ChatOpt {
	if x != nil {
		return x.Opt
	}
	return ChatOpt_ChatOptUnknown
}

func (x *ChatPermItem) GetUploadFormat() string {
	if x != nil {
		return x.UploadFormat
	}
	return ""
}

func (x *ChatPermItem) GetOcrNum() uint32 {
	if x != nil {
		return x.OcrNum
	}
	return 0
}

func (x *ChatPermItem) GetFileNum() uint32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *ChatPermItem) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ChatPermItem) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type PermData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`   // 标题
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // 格式
	Perm   bool   `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`    // 权限
	Limit  int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`  // 限制
}

func (x *PermData) Reset() {
	*x = PermData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermData) ProtoMessage() {}

func (x *PermData) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermData.ProtoReflect.Descriptor instead.
func (*PermData) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{2}
}

func (x *PermData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PermData) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *PermData) GetPerm() bool {
	if x != nil {
		return x.Perm
	}
	return false
}

func (x *PermData) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CheckChatPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*PermData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *CheckChatPermRsp) Reset() {
	*x = CheckChatPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChatPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChatPermRsp) ProtoMessage() {}

func (x *CheckChatPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChatPermRsp.ProtoReflect.Descriptor instead.
func (*CheckChatPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{3}
}

func (x *CheckChatPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckChatPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckChatPermRsp) GetList() []*PermData {
	if x != nil {
		return x.List
	}
	return nil
}

type CheckWritingPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List        []*WritingPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Ts          int64              `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                                     // 时间  外部接口才有效
	Nonce       string             `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // 随机数  外部接口才有效
	AccessToken string             `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // token 外部接口才有效
}

func (x *CheckWritingPermReq) Reset() {
	*x = CheckWritingPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckWritingPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckWritingPermReq) ProtoMessage() {}

func (x *CheckWritingPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckWritingPermReq.ProtoReflect.Descriptor instead.
func (*CheckWritingPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{4}
}

func (x *CheckWritingPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckWritingPermReq) GetList() []*WritingPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CheckWritingPermReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CheckWritingPermReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CheckWritingPermReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type WritingPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt            WritingOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.WritingOpt" json:"opt,omitempty"`            // 选项
	IntputFileNum  int32      `protobuf:"varint,2,opt,name=intput_file_num,json=intputFileNum,proto3" json:"intput_file_num,omitempty"`    // 输入文件数量
	IntputPageSize int32      `protobuf:"varint,3,opt,name=intput_page_size,json=intputPageSize,proto3" json:"intput_page_size,omitempty"` // 输入文件页数
	ExportFormat   string     `protobuf:"bytes,4,opt,name=export_format,json=exportFormat,proto3" json:"export_format,omitempty"`          // 导出格式
	GraphNum       int32      `protobuf:"varint,5,opt,name=graph_num,json=graphNum,proto3" json:"graph_num,omitempty"`                     // 图表数量
}

func (x *WritingPermItem) Reset() {
	*x = WritingPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritingPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritingPermItem) ProtoMessage() {}

func (x *WritingPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritingPermItem.ProtoReflect.Descriptor instead.
func (*WritingPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{5}
}

func (x *WritingPermItem) GetOpt() WritingOpt {
	if x != nil {
		return x.Opt
	}
	return WritingOpt_WritingOptUnknown
}

func (x *WritingPermItem) GetIntputFileNum() int32 {
	if x != nil {
		return x.IntputFileNum
	}
	return 0
}

func (x *WritingPermItem) GetIntputPageSize() int32 {
	if x != nil {
		return x.IntputPageSize
	}
	return 0
}

func (x *WritingPermItem) GetExportFormat() string {
	if x != nil {
		return x.ExportFormat
	}
	return ""
}

func (x *WritingPermItem) GetGraphNum() int32 {
	if x != nil {
		return x.GraphNum
	}
	return 0
}

type CheckWritingPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*PermData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *CheckWritingPermRsp) Reset() {
	*x = CheckWritingPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckWritingPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckWritingPermRsp) ProtoMessage() {}

func (x *CheckWritingPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckWritingPermRsp.ProtoReflect.Descriptor instead.
func (*CheckWritingPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{6}
}

func (x *CheckWritingPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckWritingPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckWritingPermRsp) GetList() []*PermData {
	if x != nil {
		return x.List
	}
	return nil
}

type CheckMediaPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List        []*MediaPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Ts          int64            `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                                     // 时间  外部接口才有效
	Nonce       string           `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // 随机数  外部接口才有效
	AccessToken string           `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // token 外部接口才有效
}

func (x *CheckMediaPermReq) Reset() {
	*x = CheckMediaPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMediaPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMediaPermReq) ProtoMessage() {}

func (x *CheckMediaPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMediaPermReq.ProtoReflect.Descriptor instead.
func (*CheckMediaPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{7}
}

func (x *CheckMediaPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckMediaPermReq) GetList() []*MediaPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CheckMediaPermReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CheckMediaPermReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CheckMediaPermReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type MediaPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      MediaOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.MediaOpt" json:"opt,omitempty"` // 选项
	Duration float64  `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`                       // 花费的时长
}

func (x *MediaPermItem) Reset() {
	*x = MediaPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPermItem) ProtoMessage() {}

func (x *MediaPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPermItem.ProtoReflect.Descriptor instead.
func (*MediaPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{8}
}

func (x *MediaPermItem) GetOpt() MediaOpt {
	if x != nil {
		return x.Opt
	}
	return MediaOpt_MediaOptUnknown
}

func (x *MediaPermItem) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type CheckMediaPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*PermData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *CheckMediaPermRsp) Reset() {
	*x = CheckMediaPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMediaPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMediaPermRsp) ProtoMessage() {}

func (x *CheckMediaPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMediaPermRsp.ProtoReflect.Descriptor instead.
func (*CheckMediaPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{9}
}

func (x *CheckMediaPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckMediaPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckMediaPermRsp) GetList() []*PermData {
	if x != nil {
		return x.List
	}
	return nil
}

type SetChatPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List        []*SetChatPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Ts          int64              `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                                     // 时间  外部接口才有效
	Nonce       string             `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // 随机数  外部接口才有效
	AccessToken string             `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // token 外部接口才有效
}

func (x *SetChatPermReq) Reset() {
	*x = SetChatPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatPermReq) ProtoMessage() {}

func (x *SetChatPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatPermReq.ProtoReflect.Descriptor instead.
func (*SetChatPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{10}
}

func (x *SetChatPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetChatPermReq) GetList() []*SetChatPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SetChatPermReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SetChatPermReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *SetChatPermReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type SetChatPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt     ChatOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.ChatOpt" json:"opt,omitempty"` // 选项
	OcrNum  uint32  `protobuf:"varint,2,opt,name=ocr_num,json=ocrNum,proto3" json:"ocr_num,omitempty"`             // OCR数量     只有在opt=ChatOptOCR生效
	FileNum uint32  `protobuf:"varint,3,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`          // 文件数量    只有在opt=ChatOptFileNum  生效
}

func (x *SetChatPermItem) Reset() {
	*x = SetChatPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatPermItem) ProtoMessage() {}

func (x *SetChatPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatPermItem.ProtoReflect.Descriptor instead.
func (*SetChatPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{11}
}

func (x *SetChatPermItem) GetOpt() ChatOpt {
	if x != nil {
		return x.Opt
	}
	return ChatOpt_ChatOptUnknown
}

func (x *SetChatPermItem) GetOcrNum() uint32 {
	if x != nil {
		return x.OcrNum
	}
	return 0
}

func (x *SetChatPermItem) GetFileNum() uint32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type SetChatPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *SetChatPermRsp) Reset() {
	*x = SetChatPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatPermRsp) ProtoMessage() {}

func (x *SetChatPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatPermRsp.ProtoReflect.Descriptor instead.
func (*SetChatPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{12}
}

func (x *SetChatPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SetChatPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SetWritingPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List        []*SetWritingPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Ts          int64                 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                                     // 时间  外部接口才有效
	Nonce       string                `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // 随机数  外部接口才有效
	AccessToken string                `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // token 外部接口才有效
}

func (x *SetWritingPermReq) Reset() {
	*x = SetWritingPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWritingPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWritingPermReq) ProtoMessage() {}

func (x *SetWritingPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWritingPermReq.ProtoReflect.Descriptor instead.
func (*SetWritingPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{13}
}

func (x *SetWritingPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetWritingPermReq) GetList() []*SetWritingPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SetWritingPermReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SetWritingPermReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *SetWritingPermReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type SetWritingPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt           WritingOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.WritingOpt" json:"opt,omitempty"`         // 选项
	IntputFileNum int32      `protobuf:"varint,2,opt,name=intput_file_num,json=intputFileNum,proto3" json:"intput_file_num,omitempty"` // 输入文件数量
	GraphNum      int32      `protobuf:"varint,3,opt,name=graph_num,json=graphNum,proto3" json:"graph_num,omitempty"`                  // 图表数量
}

func (x *SetWritingPermItem) Reset() {
	*x = SetWritingPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWritingPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWritingPermItem) ProtoMessage() {}

func (x *SetWritingPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWritingPermItem.ProtoReflect.Descriptor instead.
func (*SetWritingPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{14}
}

func (x *SetWritingPermItem) GetOpt() WritingOpt {
	if x != nil {
		return x.Opt
	}
	return WritingOpt_WritingOptUnknown
}

func (x *SetWritingPermItem) GetIntputFileNum() int32 {
	if x != nil {
		return x.IntputFileNum
	}
	return 0
}

func (x *SetWritingPermItem) GetGraphNum() int32 {
	if x != nil {
		return x.GraphNum
	}
	return 0
}

type SetWritingPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *SetWritingPermRsp) Reset() {
	*x = SetWritingPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWritingPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWritingPermRsp) ProtoMessage() {}

func (x *SetWritingPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWritingPermRsp.ProtoReflect.Descriptor instead.
func (*SetWritingPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{15}
}

func (x *SetWritingPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SetWritingPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SetMediaPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List        []*SetMediaPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Ts          int64               `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                                     // 时间  外部接口才有效
	Nonce       string              `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // 随机数  外部接口才有效
	AccessToken string              `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // token 外部接口才有效
}

func (x *SetMediaPermReq) Reset() {
	*x = SetMediaPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaPermReq) ProtoMessage() {}

func (x *SetMediaPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaPermReq.ProtoReflect.Descriptor instead.
func (*SetMediaPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{16}
}

func (x *SetMediaPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetMediaPermReq) GetList() []*SetMediaPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SetMediaPermReq) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SetMediaPermReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *SetMediaPermReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type SetMediaPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      MediaOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.MediaOpt" json:"opt,omitempty"` // 选项
	Duration float64  `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`                       // 花费的时长
}

func (x *SetMediaPermItem) Reset() {
	*x = SetMediaPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaPermItem) ProtoMessage() {}

func (x *SetMediaPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaPermItem.ProtoReflect.Descriptor instead.
func (*SetMediaPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{17}
}

func (x *SetMediaPermItem) GetOpt() MediaOpt {
	if x != nil {
		return x.Opt
	}
	return MediaOpt_MediaOptUnknown
}

func (x *SetMediaPermItem) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SetMediaPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *SetMediaPermRsp) Reset() {
	*x = SetMediaPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaPermRsp) ProtoMessage() {}

func (x *SetMediaPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaPermRsp.ProtoReflect.Descriptor instead.
func (*SetMediaPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{18}
}

func (x *SetMediaPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SetMediaPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PermConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatConfig    *ChatPermConfig    `protobuf:"bytes,1,opt,name=chat_config,json=chatConfig,proto3" json:"chat_config,omitempty"`
	WritingConfig *WritingPermConfig `protobuf:"bytes,2,opt,name=writing_config,json=writingConfig,proto3" json:"writing_config,omitempty"`
	MediaConfig   *MediaPermConfig   `protobuf:"bytes,3,opt,name=media_config,json=mediaConfig,proto3" json:"media_config,omitempty"`
}

func (x *PermConfig) Reset() {
	*x = PermConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermConfig) ProtoMessage() {}

func (x *PermConfig) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermConfig.ProtoReflect.Descriptor instead.
func (*PermConfig) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{19}
}

func (x *PermConfig) GetChatConfig() *ChatPermConfig {
	if x != nil {
		return x.ChatConfig
	}
	return nil
}

func (x *PermConfig) GetWritingConfig() *WritingPermConfig {
	if x != nil {
		return x.WritingConfig
	}
	return nil
}

func (x *PermConfig) GetMediaConfig() *MediaPermConfig {
	if x != nil {
		return x.MediaConfig
	}
	return nil
}

type ChatPermConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode         PermConfigMode `protobuf:"varint,1,opt,name=mode,proto3,enum=chatfinbot.rbac.v1.PermConfigMode" json:"mode,omitempty"` // 模式
	AnswerNum    uint32         `protobuf:"varint,2,opt,name=answer_num,json=answerNum,proto3" json:"answer_num,omitempty"`             // 回答数量
	UploadFormat string         `protobuf:"bytes,3,opt,name=upload_format,json=uploadFormat,proto3" json:"upload_format,omitempty"`     // 上传文件格式 多个英语逗号分隔 doc,PDF,docx,md,txt
	Ocr          bool           `protobuf:"varint,4,opt,name=ocr,proto3" json:"ocr,omitempty"`                                          // 是否能ocr
	OcNum        uint32         `protobuf:"varint,5,opt,name=oc_num,json=ocNum,proto3" json:"oc_num,omitempty"`                         // ocr次数， 0=未限制
	FileNum      uint32         `protobuf:"varint,6,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`                   // 文件数量
	PageSize     uint32         `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                // 每个文件限制页数
	FileSize     uint32         `protobuf:"varint,8,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                // 文件大小
	Graph        bool           `protobuf:"varint,9,opt,name=graph,proto3" json:"graph,omitempty"`                                      // 图表生成
	GraphNum     uint32         `protobuf:"varint,10,opt,name=graph_num,json=graphNum,proto3" json:"graph_num,omitempty"`               // 图表生成次数 0=未限制
	MultiDoc     bool           `protobuf:"varint,11,opt,name=multi_doc,json=multiDoc,proto3" json:"multi_doc,omitempty"`               // 多文档分析
	MultiDocNum  uint32         `protobuf:"varint,12,opt,name=multi_doc_num,json=multiDocNum,proto3" json:"multi_doc_num,omitempty"`    // 多文档分析此时 0=不限制
}

func (x *ChatPermConfig) Reset() {
	*x = ChatPermConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPermConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPermConfig) ProtoMessage() {}

func (x *ChatPermConfig) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPermConfig.ProtoReflect.Descriptor instead.
func (*ChatPermConfig) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{20}
}

func (x *ChatPermConfig) GetMode() PermConfigMode {
	if x != nil {
		return x.Mode
	}
	return PermConfigMode_PermConfigModeUnknown
}

func (x *ChatPermConfig) GetAnswerNum() uint32 {
	if x != nil {
		return x.AnswerNum
	}
	return 0
}

func (x *ChatPermConfig) GetUploadFormat() string {
	if x != nil {
		return x.UploadFormat
	}
	return ""
}

func (x *ChatPermConfig) GetOcr() bool {
	if x != nil {
		return x.Ocr
	}
	return false
}

func (x *ChatPermConfig) GetOcNum() uint32 {
	if x != nil {
		return x.OcNum
	}
	return 0
}

func (x *ChatPermConfig) GetFileNum() uint32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *ChatPermConfig) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ChatPermConfig) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ChatPermConfig) GetGraph() bool {
	if x != nil {
		return x.Graph
	}
	return false
}

func (x *ChatPermConfig) GetGraphNum() uint32 {
	if x != nil {
		return x.GraphNum
	}
	return 0
}

func (x *ChatPermConfig) GetMultiDoc() bool {
	if x != nil {
		return x.MultiDoc
	}
	return false
}

func (x *ChatPermConfig) GetMultiDocNum() uint32 {
	if x != nil {
		return x.MultiDocNum
	}
	return 0
}

type WritingPermConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode           PermConfigMode `protobuf:"varint,1,opt,name=mode,proto3,enum=chatfinbot.rbac.v1.PermConfigMode" json:"mode,omitempty"`      // 模式
	OutputToken    uint32         `protobuf:"varint,2,opt,name=output_token,json=outputToken,proto3" json:"output_token,omitempty"`            // 输出文字数量
	IntputFileNum  uint32         `protobuf:"varint,3,opt,name=intput_file_num,json=intputFileNum,proto3" json:"intput_file_num,omitempty"`    // 输入文件数量
	IntputPageSize uint32         `protobuf:"varint,4,opt,name=intput_page_size,json=intputPageSize,proto3" json:"intput_page_size,omitempty"` // 输入文件数量页数
	Edit           bool           `protobuf:"varint,5,opt,name=edit,proto3" json:"edit,omitempty"`                                             // 是否能编辑
	Graph          bool           `protobuf:"varint,6,opt,name=graph,proto3" json:"graph,omitempty"`                                           // 图表生成
	GraphNum       uint32         `protobuf:"varint,7,opt,name=graph_num,json=graphNum,proto3" json:"graph_num,omitempty"`                     // 图表生成次数 0=未限制
	ExportFormat   string         `protobuf:"bytes,8,opt,name=export_format,json=exportFormat,proto3" json:"export_format,omitempty"`          // 导出格式
	CustomColor    bool           `protobuf:"varint,9,opt,name=custom_color,json=customColor,proto3" json:"custom_color,omitempty"`            // 自定义配色
}

func (x *WritingPermConfig) Reset() {
	*x = WritingPermConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritingPermConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritingPermConfig) ProtoMessage() {}

func (x *WritingPermConfig) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritingPermConfig.ProtoReflect.Descriptor instead.
func (*WritingPermConfig) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{21}
}

func (x *WritingPermConfig) GetMode() PermConfigMode {
	if x != nil {
		return x.Mode
	}
	return PermConfigMode_PermConfigModeUnknown
}

func (x *WritingPermConfig) GetOutputToken() uint32 {
	if x != nil {
		return x.OutputToken
	}
	return 0
}

func (x *WritingPermConfig) GetIntputFileNum() uint32 {
	if x != nil {
		return x.IntputFileNum
	}
	return 0
}

func (x *WritingPermConfig) GetIntputPageSize() uint32 {
	if x != nil {
		return x.IntputPageSize
	}
	return 0
}

func (x *WritingPermConfig) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *WritingPermConfig) GetGraph() bool {
	if x != nil {
		return x.Graph
	}
	return false
}

func (x *WritingPermConfig) GetGraphNum() uint32 {
	if x != nil {
		return x.GraphNum
	}
	return 0
}

func (x *WritingPermConfig) GetExportFormat() string {
	if x != nil {
		return x.ExportFormat
	}
	return ""
}

func (x *WritingPermConfig) GetCustomColor() bool {
	if x != nil {
		return x.CustomColor
	}
	return false
}

type MediaPermConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeAudioTime uint32 `protobuf:"varint,1,opt,name=free_audio_time,json=freeAudioTime,proto3" json:"free_audio_time,omitempty"` // 免费音频时长
	FreeVideoTime uint32 `protobuf:"varint,2,opt,name=free_video_time,json=freeVideoTime,proto3" json:"free_video_time,omitempty"` // 免费视频时长
}

func (x *MediaPermConfig) Reset() {
	*x = MediaPermConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPermConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPermConfig) ProtoMessage() {}

func (x *MediaPermConfig) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPermConfig.ProtoReflect.Descriptor instead.
func (*MediaPermConfig) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{22}
}

func (x *MediaPermConfig) GetFreeAudioTime() uint32 {
	if x != nil {
		return x.FreeAudioTime
	}
	return 0
}

func (x *MediaPermConfig) GetFreeVideoTime() uint32 {
	if x != nil {
		return x.FreeVideoTime
	}
	return 0
}

var File_perm_proto protoreflect.FileDescriptor

var file_perm_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa,
	0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x03,
	0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x63, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x63, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x62,
	0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x75, 0x6d, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70,
	0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d,
	0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x63, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x63, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0x34, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x52,
	0x03, 0x6f, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x75, 0x6d, 0x22, 0x37, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70,
	0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x50, 0x65,
	0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a,
	0x0e, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x77, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xfe, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6f, 0x63, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x6f, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x6f, 0x63,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x6f,
	0x63, 0x4e, 0x75, 0x6d, 0x22, 0xcf, 0x02, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x75, 0x6d, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x59, 0x0a, 0x08, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x10, 0x03, 0x2a, 0xc1, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x74, 0x4f, 0x70, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x4f, 0x43,
	0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4f,
	0x70, 0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x6f, 0x63, 0x10, 0x08, 0x2a, 0xe9, 0x01, 0x0a, 0x0a, 0x57, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x57,
	0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x4e, 0x75, 0x6d, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x10, 0x08, 0x2a, 0x45, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x74,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4f, 0x70, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0e, 0x50,
	0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x79, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x02, 0x32, 0xe8, 0x0c, 0x0a, 0x0b, 0x52, 0x62, 0x61,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a,
	0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x27, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01,
	0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x74, 0x70, 0x65, 0x72, 0x6d,
	0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52,
	0x73, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x77, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x8d,
	0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x73, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x76,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a,
	0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x63, 0x68,
	0x61, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74,
	0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x7a, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x73, 0x70, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x63, 0x68, 0x61,
	0x74, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73,
	0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63,
	0x2f, 0x73, 0x65, 0x74, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_perm_proto_rawDescOnce sync.Once
	file_perm_proto_rawDescData = file_perm_proto_rawDesc
)

func file_perm_proto_rawDescGZIP() []byte {
	file_perm_proto_rawDescOnce.Do(func() {
		file_perm_proto_rawDescData = protoimpl.X.CompressGZIP(file_perm_proto_rawDescData)
	})
	return file_perm_proto_rawDescData
}

var file_perm_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_perm_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_perm_proto_goTypes = []interface{}{
	(ChatType)(0),               // 0: chatfinbot.rbac.v1.ChatType
	(ChatOpt)(0),                // 1: chatfinbot.rbac.v1.ChatOpt
	(WritingOpt)(0),             // 2: chatfinbot.rbac.v1.WritingOpt
	(MediaOpt)(0),               // 3: chatfinbot.rbac.v1.MediaOpt
	(PermConfigMode)(0),         // 4: chatfinbot.rbac.v1.PermConfigMode
	(*CheckChatPermReq)(nil),    // 5: chatfinbot.rbac.v1.CheckChatPermReq
	(*ChatPermItem)(nil),        // 6: chatfinbot.rbac.v1.ChatPermItem
	(*PermData)(nil),            // 7: chatfinbot.rbac.v1.PermData
	(*CheckChatPermRsp)(nil),    // 8: chatfinbot.rbac.v1.CheckChatPermRsp
	(*CheckWritingPermReq)(nil), // 9: chatfinbot.rbac.v1.CheckWritingPermReq
	(*WritingPermItem)(nil),     // 10: chatfinbot.rbac.v1.WritingPermItem
	(*CheckWritingPermRsp)(nil), // 11: chatfinbot.rbac.v1.CheckWritingPermRsp
	(*CheckMediaPermReq)(nil),   // 12: chatfinbot.rbac.v1.CheckMediaPermReq
	(*MediaPermItem)(nil),       // 13: chatfinbot.rbac.v1.MediaPermItem
	(*CheckMediaPermRsp)(nil),   // 14: chatfinbot.rbac.v1.CheckMediaPermRsp
	(*SetChatPermReq)(nil),      // 15: chatfinbot.rbac.v1.SetChatPermReq
	(*SetChatPermItem)(nil),     // 16: chatfinbot.rbac.v1.SetChatPermItem
	(*SetChatPermRsp)(nil),      // 17: chatfinbot.rbac.v1.SetChatPermRsp
	(*SetWritingPermReq)(nil),   // 18: chatfinbot.rbac.v1.SetWritingPermReq
	(*SetWritingPermItem)(nil),  // 19: chatfinbot.rbac.v1.SetWritingPermItem
	(*SetWritingPermRsp)(nil),   // 20: chatfinbot.rbac.v1.SetWritingPermRsp
	(*SetMediaPermReq)(nil),     // 21: chatfinbot.rbac.v1.SetMediaPermReq
	(*SetMediaPermItem)(nil),    // 22: chatfinbot.rbac.v1.SetMediaPermItem
	(*SetMediaPermRsp)(nil),     // 23: chatfinbot.rbac.v1.SetMediaPermRsp
	(*PermConfig)(nil),          // 24: chatfinbot.rbac.v1.PermConfig
	(*ChatPermConfig)(nil),      // 25: chatfinbot.rbac.v1.ChatPermConfig
	(*WritingPermConfig)(nil),   // 26: chatfinbot.rbac.v1.WritingPermConfig
	(*MediaPermConfig)(nil),     // 27: chatfinbot.rbac.v1.MediaPermConfig
}
var file_perm_proto_depIdxs = []int32{
	6,  // 0: chatfinbot.rbac.v1.CheckChatPermReq.list:type_name -> chatfinbot.rbac.v1.ChatPermItem
	1,  // 1: chatfinbot.rbac.v1.ChatPermItem.opt:type_name -> chatfinbot.rbac.v1.ChatOpt
	7,  // 2: chatfinbot.rbac.v1.CheckChatPermRsp.list:type_name -> chatfinbot.rbac.v1.PermData
	10, // 3: chatfinbot.rbac.v1.CheckWritingPermReq.list:type_name -> chatfinbot.rbac.v1.WritingPermItem
	2,  // 4: chatfinbot.rbac.v1.WritingPermItem.opt:type_name -> chatfinbot.rbac.v1.WritingOpt
	7,  // 5: chatfinbot.rbac.v1.CheckWritingPermRsp.list:type_name -> chatfinbot.rbac.v1.PermData
	13, // 6: chatfinbot.rbac.v1.CheckMediaPermReq.list:type_name -> chatfinbot.rbac.v1.MediaPermItem
	3,  // 7: chatfinbot.rbac.v1.MediaPermItem.opt:type_name -> chatfinbot.rbac.v1.MediaOpt
	7,  // 8: chatfinbot.rbac.v1.CheckMediaPermRsp.list:type_name -> chatfinbot.rbac.v1.PermData
	16, // 9: chatfinbot.rbac.v1.SetChatPermReq.list:type_name -> chatfinbot.rbac.v1.SetChatPermItem
	1,  // 10: chatfinbot.rbac.v1.SetChatPermItem.opt:type_name -> chatfinbot.rbac.v1.ChatOpt
	19, // 11: chatfinbot.rbac.v1.SetWritingPermReq.list:type_name -> chatfinbot.rbac.v1.SetWritingPermItem
	2,  // 12: chatfinbot.rbac.v1.SetWritingPermItem.opt:type_name -> chatfinbot.rbac.v1.WritingOpt
	22, // 13: chatfinbot.rbac.v1.SetMediaPermReq.list:type_name -> chatfinbot.rbac.v1.SetMediaPermItem
	3,  // 14: chatfinbot.rbac.v1.SetMediaPermItem.opt:type_name -> chatfinbot.rbac.v1.MediaOpt
	25, // 15: chatfinbot.rbac.v1.PermConfig.chat_config:type_name -> chatfinbot.rbac.v1.ChatPermConfig
	26, // 16: chatfinbot.rbac.v1.PermConfig.writing_config:type_name -> chatfinbot.rbac.v1.WritingPermConfig
	27, // 17: chatfinbot.rbac.v1.PermConfig.media_config:type_name -> chatfinbot.rbac.v1.MediaPermConfig
	4,  // 18: chatfinbot.rbac.v1.ChatPermConfig.mode:type_name -> chatfinbot.rbac.v1.PermConfigMode
	4,  // 19: chatfinbot.rbac.v1.WritingPermConfig.mode:type_name -> chatfinbot.rbac.v1.PermConfigMode
	5,  // 20: chatfinbot.rbac.v1.RbacService.CheckChatPerm:input_type -> chatfinbot.rbac.v1.CheckChatPermReq
	9,  // 21: chatfinbot.rbac.v1.RbacService.CheckWritingPerm:input_type -> chatfinbot.rbac.v1.CheckWritingPermReq
	12, // 22: chatfinbot.rbac.v1.RbacService.CheckMediaPerm:input_type -> chatfinbot.rbac.v1.CheckMediaPermReq
	5,  // 23: chatfinbot.rbac.v1.RbacService.CheckChatPermInner:input_type -> chatfinbot.rbac.v1.CheckChatPermReq
	9,  // 24: chatfinbot.rbac.v1.RbacService.CheckWritingPermInner:input_type -> chatfinbot.rbac.v1.CheckWritingPermReq
	12, // 25: chatfinbot.rbac.v1.RbacService.CheckMediaPermInner:input_type -> chatfinbot.rbac.v1.CheckMediaPermReq
	15, // 26: chatfinbot.rbac.v1.RbacService.SetChatPerm:input_type -> chatfinbot.rbac.v1.SetChatPermReq
	18, // 27: chatfinbot.rbac.v1.RbacService.SetWritingPerm:input_type -> chatfinbot.rbac.v1.SetWritingPermReq
	21, // 28: chatfinbot.rbac.v1.RbacService.SetMediaPerm:input_type -> chatfinbot.rbac.v1.SetMediaPermReq
	15, // 29: chatfinbot.rbac.v1.RbacService.SetChatPermInner:input_type -> chatfinbot.rbac.v1.SetChatPermReq
	18, // 30: chatfinbot.rbac.v1.RbacService.SetWritingPermInner:input_type -> chatfinbot.rbac.v1.SetWritingPermReq
	21, // 31: chatfinbot.rbac.v1.RbacService.SetMediaPermInner:input_type -> chatfinbot.rbac.v1.SetMediaPermReq
	8,  // 32: chatfinbot.rbac.v1.RbacService.CheckChatPerm:output_type -> chatfinbot.rbac.v1.CheckChatPermRsp
	11, // 33: chatfinbot.rbac.v1.RbacService.CheckWritingPerm:output_type -> chatfinbot.rbac.v1.CheckWritingPermRsp
	14, // 34: chatfinbot.rbac.v1.RbacService.CheckMediaPerm:output_type -> chatfinbot.rbac.v1.CheckMediaPermRsp
	8,  // 35: chatfinbot.rbac.v1.RbacService.CheckChatPermInner:output_type -> chatfinbot.rbac.v1.CheckChatPermRsp
	11, // 36: chatfinbot.rbac.v1.RbacService.CheckWritingPermInner:output_type -> chatfinbot.rbac.v1.CheckWritingPermRsp
	14, // 37: chatfinbot.rbac.v1.RbacService.CheckMediaPermInner:output_type -> chatfinbot.rbac.v1.CheckMediaPermRsp
	17, // 38: chatfinbot.rbac.v1.RbacService.SetChatPerm:output_type -> chatfinbot.rbac.v1.SetChatPermRsp
	20, // 39: chatfinbot.rbac.v1.RbacService.SetWritingPerm:output_type -> chatfinbot.rbac.v1.SetWritingPermRsp
	23, // 40: chatfinbot.rbac.v1.RbacService.SetMediaPerm:output_type -> chatfinbot.rbac.v1.SetMediaPermRsp
	17, // 41: chatfinbot.rbac.v1.RbacService.SetChatPermInner:output_type -> chatfinbot.rbac.v1.SetChatPermRsp
	20, // 42: chatfinbot.rbac.v1.RbacService.SetWritingPermInner:output_type -> chatfinbot.rbac.v1.SetWritingPermRsp
	23, // 43: chatfinbot.rbac.v1.RbacService.SetMediaPermInner:output_type -> chatfinbot.rbac.v1.SetMediaPermRsp
	32, // [32:44] is the sub-list for method output_type
	20, // [20:32] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_perm_proto_init() }
func file_perm_proto_init() {
	if File_perm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChatPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChatPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckWritingPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritingPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckWritingPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMediaPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMediaPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWritingPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWritingPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWritingPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPermConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritingPermConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPermConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perm_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_perm_proto_goTypes,
		DependencyIndexes: file_perm_proto_depIdxs,
		EnumInfos:         file_perm_proto_enumTypes,
		MessageInfos:      file_perm_proto_msgTypes,
	}.Build()
	File_perm_proto = out.File
	file_perm_proto_rawDesc = nil
	file_perm_proto_goTypes = nil
	file_perm_proto_depIdxs = nil
}
