// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: perm.proto

package rbacpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatType int32

const (
	ChatType_ChatTypeUnknown ChatType = 0 // 未知（不要使用）
	ChatType_ChatTypeChat    ChatType = 1 // 问答
	ChatType_ChatTypeMedia   ChatType = 3 // 媒体
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeUnknown",
		1: "ChatTypeChat",
		3: "ChatTypeMedia",
	}
	ChatType_value = map[string]int32{
		"ChatTypeUnknown": 0,
		"ChatTypeChat":    1,
		"ChatTypeMedia":   3,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[0].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[0]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{0}
}

type ChatOpt int32

const (
	ChatOpt_ChatOptUnknown  ChatOpt = 0 // 未知（不要使用）
	ChatOpt_ChatOptChatNum  ChatOpt = 1 // 聊天问答数量
	ChatOpt_ChatOptOCR      ChatOpt = 3 // ocr
	ChatOpt_ChatOptDocNum   ChatOpt = 4 // 文档数
	ChatOpt_ChatOptDocPages ChatOpt = 5 // 页数
)

// Enum value maps for ChatOpt.
var (
	ChatOpt_name = map[int32]string{
		0: "ChatOptUnknown",
		1: "ChatOptChatNum",
		3: "ChatOptOCR",
		4: "ChatOptDocNum",
		5: "ChatOptDocPages",
	}
	ChatOpt_value = map[string]int32{
		"ChatOptUnknown":  0,
		"ChatOptChatNum":  1,
		"ChatOptOCR":      3,
		"ChatOptDocNum":   4,
		"ChatOptDocPages": 5,
	}
)

func (x ChatOpt) Enum() *ChatOpt {
	p := new(ChatOpt)
	*p = x
	return p
}

func (x ChatOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[1].Descriptor()
}

func (ChatOpt) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[1]
}

func (x ChatOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatOpt.Descriptor instead.
func (ChatOpt) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{1}
}

type MediaOpt int32

const (
	MediaOpt_MediaOptUnknown MediaOpt = 0 // 未知（不要使用）
	MediaOpt_MediaOptAudio   MediaOpt = 1 // 音频文件
	MediaOpt_MediaOptVideo   MediaOpt = 2 // 视频
)

// Enum value maps for MediaOpt.
var (
	MediaOpt_name = map[int32]string{
		0: "MediaOptUnknown",
		1: "MediaOptAudio",
		2: "MediaOptVideo",
	}
	MediaOpt_value = map[string]int32{
		"MediaOptUnknown": 0,
		"MediaOptAudio":   1,
		"MediaOptVideo":   2,
	}
)

func (x MediaOpt) Enum() *MediaOpt {
	p := new(MediaOpt)
	*p = x
	return p
}

func (x MediaOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_perm_proto_enumTypes[2].Descriptor()
}

func (MediaOpt) Type() protoreflect.EnumType {
	return &file_perm_proto_enumTypes[2]
}

func (x MediaOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaOpt.Descriptor instead.
func (MediaOpt) EnumDescriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{2}
}

type CheckChatPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List   []*ChatPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CheckChatPermReq) Reset() {
	*x = CheckChatPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChatPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChatPermReq) ProtoMessage() {}

func (x *CheckChatPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChatPermReq.ProtoReflect.Descriptor instead.
func (*CheckChatPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{0}
}

func (x *CheckChatPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckChatPermReq) GetList() []*ChatPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ChatPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      ChatOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.ChatOpt" json:"opt,omitempty"` // 选项
	OcrNum   uint32  `protobuf:"varint,2,opt,name=ocr_num,json=ocrNum,proto3" json:"ocr_num,omitempty"`             // OCR数量     只有在opt=ChatOptOCR生效
	FileNum  uint32  `protobuf:"varint,3,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`          // 文件数量    只有在opt=ChatOptFileNum  生效
	PageSize uint32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       // 文件页数   只有在opt=ChatOptPageSize  生效
}

func (x *ChatPermItem) Reset() {
	*x = ChatPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPermItem) ProtoMessage() {}

func (x *ChatPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPermItem.ProtoReflect.Descriptor instead.
func (*ChatPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{1}
}

func (x *ChatPermItem) GetOpt() ChatOpt {
	if x != nil {
		return x.Opt
	}
	return ChatOpt_ChatOptUnknown
}

func (x *ChatPermItem) GetOcrNum() uint32 {
	if x != nil {
		return x.OcrNum
	}
	return 0
}

func (x *ChatPermItem) GetFileNum() uint32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *ChatPermItem) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PermData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`   // 标题
	Config string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // 格式
	Perm   bool   `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`    // 权限
	Limit  int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`  // 限制
	Opt    uint32 `protobuf:"varint,5,opt,name=opt,proto3" json:"opt,omitempty"`      // 选项
}

func (x *PermData) Reset() {
	*x = PermData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermData) ProtoMessage() {}

func (x *PermData) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermData.ProtoReflect.Descriptor instead.
func (*PermData) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{2}
}

func (x *PermData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PermData) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *PermData) GetPerm() bool {
	if x != nil {
		return x.Perm
	}
	return false
}

func (x *PermData) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PermData) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type CheckChatPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*PermData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *CheckChatPermRsp) Reset() {
	*x = CheckChatPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChatPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChatPermRsp) ProtoMessage() {}

func (x *CheckChatPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChatPermRsp.ProtoReflect.Descriptor instead.
func (*CheckChatPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{3}
}

func (x *CheckChatPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckChatPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckChatPermRsp) GetList() []*PermData {
	if x != nil {
		return x.List
	}
	return nil
}

type CheckWritingPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*PermData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *CheckWritingPermRsp) Reset() {
	*x = CheckWritingPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckWritingPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckWritingPermRsp) ProtoMessage() {}

func (x *CheckWritingPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckWritingPermRsp.ProtoReflect.Descriptor instead.
func (*CheckWritingPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{4}
}

func (x *CheckWritingPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckWritingPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckWritingPermRsp) GetList() []*PermData {
	if x != nil {
		return x.List
	}
	return nil
}

type CheckMediaPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List   []*MediaPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CheckMediaPermReq) Reset() {
	*x = CheckMediaPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMediaPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMediaPermReq) ProtoMessage() {}

func (x *CheckMediaPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMediaPermReq.ProtoReflect.Descriptor instead.
func (*CheckMediaPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{5}
}

func (x *CheckMediaPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckMediaPermReq) GetList() []*MediaPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

type MediaPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      MediaOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.MediaOpt" json:"opt,omitempty"` // 选项
	Duration float64  `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`                       // 花费的时长
}

func (x *MediaPermItem) Reset() {
	*x = MediaPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPermItem) ProtoMessage() {}

func (x *MediaPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPermItem.ProtoReflect.Descriptor instead.
func (*MediaPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{6}
}

func (x *MediaPermItem) GetOpt() MediaOpt {
	if x != nil {
		return x.Opt
	}
	return MediaOpt_MediaOptUnknown
}

func (x *MediaPermItem) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type CheckMediaPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret  int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`  // 错误码
	Msg  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`   // msg
	List []*PermData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"` // 数据
}

func (x *CheckMediaPermRsp) Reset() {
	*x = CheckMediaPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMediaPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMediaPermRsp) ProtoMessage() {}

func (x *CheckMediaPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMediaPermRsp.ProtoReflect.Descriptor instead.
func (*CheckMediaPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{7}
}

func (x *CheckMediaPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *CheckMediaPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckMediaPermRsp) GetList() []*PermData {
	if x != nil {
		return x.List
	}
	return nil
}

type SetChatPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List   []*SetChatPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SetChatPermReq) Reset() {
	*x = SetChatPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatPermReq) ProtoMessage() {}

func (x *SetChatPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatPermReq.ProtoReflect.Descriptor instead.
func (*SetChatPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{8}
}

func (x *SetChatPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetChatPermReq) GetList() []*SetChatPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

type SetChatPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      ChatOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.ChatOpt" json:"opt,omitempty"` // 选项
	OcrNum   uint32  `protobuf:"varint,2,opt,name=ocr_num,json=ocrNum,proto3" json:"ocr_num,omitempty"`             // OCR数量     只有在opt=ChatOptOCR生效
	FileNum  uint32  `protobuf:"varint,3,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`          // 文件数量    只有在opt=ChatOptFileNum  生效
	PageSize uint32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       // 页数数量    只有在opt=ChatOptPageSize   生效
	Remark   string  `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                            // 备注
}

func (x *SetChatPermItem) Reset() {
	*x = SetChatPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatPermItem) ProtoMessage() {}

func (x *SetChatPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatPermItem.ProtoReflect.Descriptor instead.
func (*SetChatPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{9}
}

func (x *SetChatPermItem) GetOpt() ChatOpt {
	if x != nil {
		return x.Opt
	}
	return ChatOpt_ChatOptUnknown
}

func (x *SetChatPermItem) GetOcrNum() uint32 {
	if x != nil {
		return x.OcrNum
	}
	return 0
}

func (x *SetChatPermItem) GetFileNum() uint32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *SetChatPermItem) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SetChatPermItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type SetChatPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *SetChatPermRsp) Reset() {
	*x = SetChatPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatPermRsp) ProtoMessage() {}

func (x *SetChatPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatPermRsp.ProtoReflect.Descriptor instead.
func (*SetChatPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{10}
}

func (x *SetChatPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SetChatPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SetMediaPermReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	List   []*SetMediaPermItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SetMediaPermReq) Reset() {
	*x = SetMediaPermReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaPermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaPermReq) ProtoMessage() {}

func (x *SetMediaPermReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaPermReq.ProtoReflect.Descriptor instead.
func (*SetMediaPermReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{11}
}

func (x *SetMediaPermReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetMediaPermReq) GetList() []*SetMediaPermItem {
	if x != nil {
		return x.List
	}
	return nil
}

type SetMediaPermItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      MediaOpt `protobuf:"varint,1,opt,name=opt,proto3,enum=chatfinbot.rbac.v1.MediaOpt" json:"opt,omitempty"` // 选项
	Duration float64  `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`                       // 花费的时长
}

func (x *SetMediaPermItem) Reset() {
	*x = SetMediaPermItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaPermItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaPermItem) ProtoMessage() {}

func (x *SetMediaPermItem) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaPermItem.ProtoReflect.Descriptor instead.
func (*SetMediaPermItem) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{12}
}

func (x *SetMediaPermItem) GetOpt() MediaOpt {
	if x != nil {
		return x.Opt
	}
	return MediaOpt_MediaOptUnknown
}

func (x *SetMediaPermItem) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SetMediaPermRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
}

func (x *SetMediaPermRsp) Reset() {
	*x = SetMediaPermRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaPermRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaPermRsp) ProtoMessage() {}

func (x *SetMediaPermRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaPermRsp.ProtoReflect.Descriptor instead.
func (*SetMediaPermRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{13}
}

func (x *SetMediaPermRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *SetMediaPermRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserQuotaUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatNum       uint32 `protobuf:"varint,1,opt,name=chat_num,json=chatNum,proto3" json:"chat_num,omitempty"`                   // 聊天数量
	DocNum        uint32 `protobuf:"varint,2,opt,name=doc_num,json=docNum,proto3" json:"doc_num,omitempty"`                      // 聊天使用文件数量
	OcrNum        uint32 `protobuf:"varint,3,opt,name=ocr_num,json=ocrNum,proto3" json:"ocr_num,omitempty"`                      // ocr次数
	AudioDuration uint32 `protobuf:"varint,4,opt,name=audio_duration,json=audioDuration,proto3" json:"audio_duration,omitempty"` // 音频时长
	VideoDuration uint32 `protobuf:"varint,5,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"` // 视频时长
}

func (x *UserQuotaUsage) Reset() {
	*x = UserQuotaUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuotaUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuotaUsage) ProtoMessage() {}

func (x *UserQuotaUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuotaUsage.ProtoReflect.Descriptor instead.
func (*UserQuotaUsage) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{14}
}

func (x *UserQuotaUsage) GetChatNum() uint32 {
	if x != nil {
		return x.ChatNum
	}
	return 0
}

func (x *UserQuotaUsage) GetDocNum() uint32 {
	if x != nil {
		return x.DocNum
	}
	return 0
}

func (x *UserQuotaUsage) GetOcrNum() uint32 {
	if x != nil {
		return x.OcrNum
	}
	return 0
}

func (x *UserQuotaUsage) GetAudioDuration() uint32 {
	if x != nil {
		return x.AudioDuration
	}
	return 0
}

func (x *UserQuotaUsage) GetVideoDuration() uint32 {
	if x != nil {
		return x.VideoDuration
	}
	return 0
}

type GetUserQuotaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserQuotaReq) Reset() {
	*x = GetUserQuotaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserQuotaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserQuotaReq) ProtoMessage() {}

func (x *GetUserQuotaReq) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserQuotaReq.ProtoReflect.Descriptor instead.
func (*GetUserQuotaReq) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{15}
}

type BasicQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode               uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`                                                          // 模式  1=天 2=月
	ChatNum            uint32 `protobuf:"varint,2,opt,name=chat_num,json=chatNum,proto3" json:"chat_num,omitempty"`                                     // 聊天数量
	ChatUsageNum       uint32 `protobuf:"varint,3,opt,name=chat_usage_num,json=chatUsageNum,proto3" json:"chat_usage_num,omitempty"`                    // 使用 聊天数量
	DocNum             uint32 `protobuf:"varint,4,opt,name=doc_num,json=docNum,proto3" json:"doc_num,omitempty"`                                        // 文档数
	DocUsageNum        uint32 `protobuf:"varint,5,opt,name=doc_usage_num,json=docUsageNum,proto3" json:"doc_usage_num,omitempty"`                       // 使用文档数量
	DocPages           uint32 `protobuf:"varint,6,opt,name=doc_pages,json=docPages,proto3" json:"doc_pages,omitempty"`                                  // 文档页数
	OcrNum             uint32 `protobuf:"varint,7,opt,name=ocr_num,json=ocrNum,proto3" json:"ocr_num,omitempty"`                                        // ocr数量
	OcrUsageNum        uint32 `protobuf:"varint,8,opt,name=ocr_usage_num,json=ocrUsageNum,proto3" json:"ocr_usage_num,omitempty"`                       // 使用ocr数量
	AudioDuration      uint32 `protobuf:"varint,9,opt,name=audio_duration,json=audioDuration,proto3" json:"audio_duration,omitempty"`                   // 音频时长
	AudioUsageDuration uint32 `protobuf:"varint,10,opt,name=audio_usage_duration,json=audioUsageDuration,proto3" json:"audio_usage_duration,omitempty"` //使用音频数量
	VideoDuration      uint32 `protobuf:"varint,11,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`                  // 视频时长
	VideoUsageDuration uint32 `protobuf:"varint,12,opt,name=video_usage_duration,json=videoUsageDuration,proto3" json:"video_usage_duration,omitempty"` //使用视频时长
}

func (x *BasicQuota) Reset() {
	*x = BasicQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicQuota) ProtoMessage() {}

func (x *BasicQuota) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicQuota.ProtoReflect.Descriptor instead.
func (*BasicQuota) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{16}
}

func (x *BasicQuota) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *BasicQuota) GetChatNum() uint32 {
	if x != nil {
		return x.ChatNum
	}
	return 0
}

func (x *BasicQuota) GetChatUsageNum() uint32 {
	if x != nil {
		return x.ChatUsageNum
	}
	return 0
}

func (x *BasicQuota) GetDocNum() uint32 {
	if x != nil {
		return x.DocNum
	}
	return 0
}

func (x *BasicQuota) GetDocUsageNum() uint32 {
	if x != nil {
		return x.DocUsageNum
	}
	return 0
}

func (x *BasicQuota) GetDocPages() uint32 {
	if x != nil {
		return x.DocPages
	}
	return 0
}

func (x *BasicQuota) GetOcrNum() uint32 {
	if x != nil {
		return x.OcrNum
	}
	return 0
}

func (x *BasicQuota) GetOcrUsageNum() uint32 {
	if x != nil {
		return x.OcrUsageNum
	}
	return 0
}

func (x *BasicQuota) GetAudioDuration() uint32 {
	if x != nil {
		return x.AudioDuration
	}
	return 0
}

func (x *BasicQuota) GetAudioUsageDuration() uint32 {
	if x != nil {
		return x.AudioUsageDuration
	}
	return 0
}

func (x *BasicQuota) GetVideoDuration() uint32 {
	if x != nil {
		return x.VideoDuration
	}
	return 0
}

func (x *BasicQuota) GetVideoUsageDuration() uint32 {
	if x != nil {
		return x.VideoUsageDuration
	}
	return 0
}

type GetUserQuotaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret       int32       `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"` // 错误码
	Msg       string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`  // msg
	BasicInfo *BasicQuota `protobuf:"bytes,3,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
}

func (x *GetUserQuotaRsp) Reset() {
	*x = GetUserQuotaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserQuotaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserQuotaRsp) ProtoMessage() {}

func (x *GetUserQuotaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserQuotaRsp.ProtoReflect.Descriptor instead.
func (*GetUserQuotaRsp) Descriptor() ([]byte, []int) {
	return file_perm_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserQuotaRsp) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *GetUserQuotaRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserQuotaRsp) GetBasicInfo() *BasicQuota {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

var File_perm_proto protoreflect.FileDescriptor

var file_perm_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61,
	0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x63, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6f, 0x63, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x74, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x63, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x74,
	0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x69, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x52, 0x03,
	0x6f, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x63, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x63, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x34, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x64, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x03,
	0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0xab, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x63, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x63, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x22, 0xaa, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x63, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x63, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x63, 0x72, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6f, 0x63, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x73, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x2a, 0x44, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x74, 0x4f, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74,
	0x4f, 0x70, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x4f, 0x43, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x10, 0x05, 0x2a, 0x45, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x74,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4f, 0x70, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x02, 0x32, 0xa5, 0x09, 0x0a, 0x0b,
	0x52, 0x62, 0x61, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x82, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x25,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x65, 0x72, 0x6d,
	0x12, 0x89, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x52, 0x73, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x8d, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52,
	0x73, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x63, 0x68, 0x61, 0x74,
	0x70, 0x65, 0x72, 0x6d, 0x12, 0x7a, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x65, 0x72, 0x6d, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x70, 0x65, 0x72, 0x6d,
	0x12, 0x81, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62,
	0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x63, 0x68, 0x61, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x70, 0x65, 0x72, 0x6d, 0x2d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x66, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x72, 0x62, 0x61, 0x63, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_perm_proto_rawDescOnce sync.Once
	file_perm_proto_rawDescData = file_perm_proto_rawDesc
)

func file_perm_proto_rawDescGZIP() []byte {
	file_perm_proto_rawDescOnce.Do(func() {
		file_perm_proto_rawDescData = protoimpl.X.CompressGZIP(file_perm_proto_rawDescData)
	})
	return file_perm_proto_rawDescData
}

var file_perm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_perm_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_perm_proto_goTypes = []interface{}{
	(ChatType)(0),               // 0: chatfinbot.rbac.v1.ChatType
	(ChatOpt)(0),                // 1: chatfinbot.rbac.v1.ChatOpt
	(MediaOpt)(0),               // 2: chatfinbot.rbac.v1.MediaOpt
	(*CheckChatPermReq)(nil),    // 3: chatfinbot.rbac.v1.CheckChatPermReq
	(*ChatPermItem)(nil),        // 4: chatfinbot.rbac.v1.ChatPermItem
	(*PermData)(nil),            // 5: chatfinbot.rbac.v1.PermData
	(*CheckChatPermRsp)(nil),    // 6: chatfinbot.rbac.v1.CheckChatPermRsp
	(*CheckWritingPermRsp)(nil), // 7: chatfinbot.rbac.v1.CheckWritingPermRsp
	(*CheckMediaPermReq)(nil),   // 8: chatfinbot.rbac.v1.CheckMediaPermReq
	(*MediaPermItem)(nil),       // 9: chatfinbot.rbac.v1.MediaPermItem
	(*CheckMediaPermRsp)(nil),   // 10: chatfinbot.rbac.v1.CheckMediaPermRsp
	(*SetChatPermReq)(nil),      // 11: chatfinbot.rbac.v1.SetChatPermReq
	(*SetChatPermItem)(nil),     // 12: chatfinbot.rbac.v1.SetChatPermItem
	(*SetChatPermRsp)(nil),      // 13: chatfinbot.rbac.v1.SetChatPermRsp
	(*SetMediaPermReq)(nil),     // 14: chatfinbot.rbac.v1.SetMediaPermReq
	(*SetMediaPermItem)(nil),    // 15: chatfinbot.rbac.v1.SetMediaPermItem
	(*SetMediaPermRsp)(nil),     // 16: chatfinbot.rbac.v1.SetMediaPermRsp
	(*UserQuotaUsage)(nil),      // 17: chatfinbot.rbac.v1.UserQuotaUsage
	(*GetUserQuotaReq)(nil),     // 18: chatfinbot.rbac.v1.GetUserQuotaReq
	(*BasicQuota)(nil),          // 19: chatfinbot.rbac.v1.BasicQuota
	(*GetUserQuotaRsp)(nil),     // 20: chatfinbot.rbac.v1.GetUserQuotaRsp
}
var file_perm_proto_depIdxs = []int32{
	4,  // 0: chatfinbot.rbac.v1.CheckChatPermReq.list:type_name -> chatfinbot.rbac.v1.ChatPermItem
	1,  // 1: chatfinbot.rbac.v1.ChatPermItem.opt:type_name -> chatfinbot.rbac.v1.ChatOpt
	5,  // 2: chatfinbot.rbac.v1.CheckChatPermRsp.list:type_name -> chatfinbot.rbac.v1.PermData
	5,  // 3: chatfinbot.rbac.v1.CheckWritingPermRsp.list:type_name -> chatfinbot.rbac.v1.PermData
	9,  // 4: chatfinbot.rbac.v1.CheckMediaPermReq.list:type_name -> chatfinbot.rbac.v1.MediaPermItem
	2,  // 5: chatfinbot.rbac.v1.MediaPermItem.opt:type_name -> chatfinbot.rbac.v1.MediaOpt
	5,  // 6: chatfinbot.rbac.v1.CheckMediaPermRsp.list:type_name -> chatfinbot.rbac.v1.PermData
	12, // 7: chatfinbot.rbac.v1.SetChatPermReq.list:type_name -> chatfinbot.rbac.v1.SetChatPermItem
	1,  // 8: chatfinbot.rbac.v1.SetChatPermItem.opt:type_name -> chatfinbot.rbac.v1.ChatOpt
	15, // 9: chatfinbot.rbac.v1.SetMediaPermReq.list:type_name -> chatfinbot.rbac.v1.SetMediaPermItem
	2,  // 10: chatfinbot.rbac.v1.SetMediaPermItem.opt:type_name -> chatfinbot.rbac.v1.MediaOpt
	19, // 11: chatfinbot.rbac.v1.GetUserQuotaRsp.basic_info:type_name -> chatfinbot.rbac.v1.BasicQuota
	3,  // 12: chatfinbot.rbac.v1.RbacService.CheckChatPerm:input_type -> chatfinbot.rbac.v1.CheckChatPermReq
	8,  // 13: chatfinbot.rbac.v1.RbacService.CheckMediaPerm:input_type -> chatfinbot.rbac.v1.CheckMediaPermReq
	3,  // 14: chatfinbot.rbac.v1.RbacService.CheckChatPermInner:input_type -> chatfinbot.rbac.v1.CheckChatPermReq
	8,  // 15: chatfinbot.rbac.v1.RbacService.CheckMediaPermInner:input_type -> chatfinbot.rbac.v1.CheckMediaPermReq
	11, // 16: chatfinbot.rbac.v1.RbacService.SetChatPerm:input_type -> chatfinbot.rbac.v1.SetChatPermReq
	14, // 17: chatfinbot.rbac.v1.RbacService.SetMediaPerm:input_type -> chatfinbot.rbac.v1.SetMediaPermReq
	11, // 18: chatfinbot.rbac.v1.RbacService.SetChatPermInner:input_type -> chatfinbot.rbac.v1.SetChatPermReq
	14, // 19: chatfinbot.rbac.v1.RbacService.SetMediaPermInner:input_type -> chatfinbot.rbac.v1.SetMediaPermReq
	18, // 20: chatfinbot.rbac.v1.RbacService.GetUserQuota:input_type -> chatfinbot.rbac.v1.GetUserQuotaReq
	6,  // 21: chatfinbot.rbac.v1.RbacService.CheckChatPerm:output_type -> chatfinbot.rbac.v1.CheckChatPermRsp
	10, // 22: chatfinbot.rbac.v1.RbacService.CheckMediaPerm:output_type -> chatfinbot.rbac.v1.CheckMediaPermRsp
	6,  // 23: chatfinbot.rbac.v1.RbacService.CheckChatPermInner:output_type -> chatfinbot.rbac.v1.CheckChatPermRsp
	10, // 24: chatfinbot.rbac.v1.RbacService.CheckMediaPermInner:output_type -> chatfinbot.rbac.v1.CheckMediaPermRsp
	13, // 25: chatfinbot.rbac.v1.RbacService.SetChatPerm:output_type -> chatfinbot.rbac.v1.SetChatPermRsp
	16, // 26: chatfinbot.rbac.v1.RbacService.SetMediaPerm:output_type -> chatfinbot.rbac.v1.SetMediaPermRsp
	13, // 27: chatfinbot.rbac.v1.RbacService.SetChatPermInner:output_type -> chatfinbot.rbac.v1.SetChatPermRsp
	16, // 28: chatfinbot.rbac.v1.RbacService.SetMediaPermInner:output_type -> chatfinbot.rbac.v1.SetMediaPermRsp
	20, // 29: chatfinbot.rbac.v1.RbacService.GetUserQuota:output_type -> chatfinbot.rbac.v1.GetUserQuotaRsp
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_perm_proto_init() }
func file_perm_proto_init() {
	if File_perm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChatPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChatPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckWritingPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMediaPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMediaPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaPermReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaPermItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaPermRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuotaUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserQuotaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserQuotaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_perm_proto_goTypes,
		DependencyIndexes: file_perm_proto_depIdxs,
		EnumInfos:         file_perm_proto_enumTypes,
		MessageInfos:      file_perm_proto_msgTypes,
	}.Build()
	File_perm_proto = out.File
	file_perm_proto_rawDesc = nil
	file_perm_proto_goTypes = nil
	file_perm_proto_depIdxs = nil
}
